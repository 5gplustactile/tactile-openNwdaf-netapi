# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.nf_type import NFType
from openapi_server import util

from openapi_server.models.nf_type import NFType  # noqa: E501

class ScpDomainCond(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scp_domains=None, nf_type_list=None):  # noqa: E501
        """ScpDomainCond - a model defined in OpenAPI

        :param scp_domains: The scp_domains of this ScpDomainCond.  # noqa: E501
        :type scp_domains: List[str]
        :param nf_type_list: The nf_type_list of this ScpDomainCond.  # noqa: E501
        :type nf_type_list: List[NFType]
        """
        self.openapi_types = {
            'scp_domains': List[str],
            'nf_type_list': List[NFType]
        }

        self.attribute_map = {
            'scp_domains': 'scpDomains',
            'nf_type_list': 'nfTypeList'
        }

        self._scp_domains = scp_domains
        self._nf_type_list = nf_type_list

    @classmethod
    def from_dict(cls, dikt) -> 'ScpDomainCond':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ScpDomainCond of this ScpDomainCond.  # noqa: E501
        :rtype: ScpDomainCond
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scp_domains(self):
        """Gets the scp_domains of this ScpDomainCond.


        :return: The scp_domains of this ScpDomainCond.
        :rtype: List[str]
        """
        return self._scp_domains

    @scp_domains.setter
    def scp_domains(self, scp_domains):
        """Sets the scp_domains of this ScpDomainCond.


        :param scp_domains: The scp_domains of this ScpDomainCond.
        :type scp_domains: List[str]
        """
        if scp_domains is None:
            raise ValueError("Invalid value for `scp_domains`, must not be `None`")  # noqa: E501
        if scp_domains is not None and len(scp_domains) < 1:
            raise ValueError("Invalid value for `scp_domains`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._scp_domains = scp_domains

    @property
    def nf_type_list(self):
        """Gets the nf_type_list of this ScpDomainCond.


        :return: The nf_type_list of this ScpDomainCond.
        :rtype: List[NFType]
        """
        return self._nf_type_list

    @nf_type_list.setter
    def nf_type_list(self, nf_type_list):
        """Sets the nf_type_list of this ScpDomainCond.


        :param nf_type_list: The nf_type_list of this ScpDomainCond.
        :type nf_type_list: List[NFType]
        """
        if nf_type_list is not None and len(nf_type_list) < 1:
            raise ValueError("Invalid value for `nf_type_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._nf_type_list = nf_type_list
