# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.plmn_id import PlmnId
import re
from openapi_server import util

from openapi_server.models.plmn_id import PlmnId  # noqa: E501
import re  # noqa: E501

class TmgiRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mbs_service_id_start=None, mbs_service_id_end=None, plmn_id=None, nid=None):  # noqa: E501
        """TmgiRange - a model defined in OpenAPI

        :param mbs_service_id_start: The mbs_service_id_start of this TmgiRange.  # noqa: E501
        :type mbs_service_id_start: str
        :param mbs_service_id_end: The mbs_service_id_end of this TmgiRange.  # noqa: E501
        :type mbs_service_id_end: str
        :param plmn_id: The plmn_id of this TmgiRange.  # noqa: E501
        :type plmn_id: PlmnId
        :param nid: The nid of this TmgiRange.  # noqa: E501
        :type nid: str
        """
        self.openapi_types = {
            'mbs_service_id_start': str,
            'mbs_service_id_end': str,
            'plmn_id': PlmnId,
            'nid': str
        }

        self.attribute_map = {
            'mbs_service_id_start': 'mbsServiceIdStart',
            'mbs_service_id_end': 'mbsServiceIdEnd',
            'plmn_id': 'plmnId',
            'nid': 'nid'
        }

        self._mbs_service_id_start = mbs_service_id_start
        self._mbs_service_id_end = mbs_service_id_end
        self._plmn_id = plmn_id
        self._nid = nid

    @classmethod
    def from_dict(cls, dikt) -> 'TmgiRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TmgiRange of this TmgiRange.  # noqa: E501
        :rtype: TmgiRange
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mbs_service_id_start(self):
        """Gets the mbs_service_id_start of this TmgiRange.


        :return: The mbs_service_id_start of this TmgiRange.
        :rtype: str
        """
        return self._mbs_service_id_start

    @mbs_service_id_start.setter
    def mbs_service_id_start(self, mbs_service_id_start):
        """Sets the mbs_service_id_start of this TmgiRange.


        :param mbs_service_id_start: The mbs_service_id_start of this TmgiRange.
        :type mbs_service_id_start: str
        """
        if mbs_service_id_start is None:
            raise ValueError("Invalid value for `mbs_service_id_start`, must not be `None`")  # noqa: E501
        if mbs_service_id_start is not None and not re.search(r'^[A-Fa-f0-9]{6}$', mbs_service_id_start):  # noqa: E501
            raise ValueError("Invalid value for `mbs_service_id_start`, must be a follow pattern or equal to `/^[A-Fa-f0-9]{6}$/`")  # noqa: E501

        self._mbs_service_id_start = mbs_service_id_start

    @property
    def mbs_service_id_end(self):
        """Gets the mbs_service_id_end of this TmgiRange.


        :return: The mbs_service_id_end of this TmgiRange.
        :rtype: str
        """
        return self._mbs_service_id_end

    @mbs_service_id_end.setter
    def mbs_service_id_end(self, mbs_service_id_end):
        """Sets the mbs_service_id_end of this TmgiRange.


        :param mbs_service_id_end: The mbs_service_id_end of this TmgiRange.
        :type mbs_service_id_end: str
        """
        if mbs_service_id_end is None:
            raise ValueError("Invalid value for `mbs_service_id_end`, must not be `None`")  # noqa: E501
        if mbs_service_id_end is not None and not re.search(r'^[A-Fa-f0-9]{6}$', mbs_service_id_end):  # noqa: E501
            raise ValueError("Invalid value for `mbs_service_id_end`, must be a follow pattern or equal to `/^[A-Fa-f0-9]{6}$/`")  # noqa: E501

        self._mbs_service_id_end = mbs_service_id_end

    @property
    def plmn_id(self):
        """Gets the plmn_id of this TmgiRange.


        :return: The plmn_id of this TmgiRange.
        :rtype: PlmnId
        """
        return self._plmn_id

    @plmn_id.setter
    def plmn_id(self, plmn_id):
        """Sets the plmn_id of this TmgiRange.


        :param plmn_id: The plmn_id of this TmgiRange.
        :type plmn_id: PlmnId
        """
        if plmn_id is None:
            raise ValueError("Invalid value for `plmn_id`, must not be `None`")  # noqa: E501

        self._plmn_id = plmn_id

    @property
    def nid(self):
        """Gets the nid of this TmgiRange.

        This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1).    # noqa: E501

        :return: The nid of this TmgiRange.
        :rtype: str
        """
        return self._nid

    @nid.setter
    def nid(self, nid):
        """Sets the nid of this TmgiRange.

        This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1).    # noqa: E501

        :param nid: The nid of this TmgiRange.
        :type nid: str
        """
        if nid is not None and not re.search(r'^[A-Fa-f0-9]{11}$', nid):  # noqa: E501
            raise ValueError("Invalid value for `nid`, must be a follow pattern or equal to `/^[A-Fa-f0-9]{11}$/`")  # noqa: E501

        self._nid = nid
