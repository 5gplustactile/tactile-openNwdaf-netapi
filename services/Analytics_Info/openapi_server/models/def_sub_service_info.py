# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class DefSubServiceInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, versions=None, supported_features=None):  # noqa: E501
        """DefSubServiceInfo - a model defined in OpenAPI

        :param versions: The versions of this DefSubServiceInfo.  # noqa: E501
        :type versions: List[str]
        :param supported_features: The supported_features of this DefSubServiceInfo.  # noqa: E501
        :type supported_features: str
        """
        self.openapi_types = {
            'versions': List[str],
            'supported_features': str
        }

        self.attribute_map = {
            'versions': 'versions',
            'supported_features': 'supportedFeatures'
        }

        self._versions = versions
        self._supported_features = supported_features

    @classmethod
    def from_dict(cls, dikt) -> 'DefSubServiceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DefSubServiceInfo of this DefSubServiceInfo.  # noqa: E501
        :rtype: DefSubServiceInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def versions(self):
        """Gets the versions of this DefSubServiceInfo.


        :return: The versions of this DefSubServiceInfo.
        :rtype: List[str]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this DefSubServiceInfo.


        :param versions: The versions of this DefSubServiceInfo.
        :type versions: List[str]
        """
        if versions is not None and len(versions) < 1:
            raise ValueError("Invalid value for `versions`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._versions = versions

    @property
    def supported_features(self):
        """Gets the supported_features of this DefSubServiceInfo.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :return: The supported_features of this DefSubServiceInfo.
        :rtype: str
        """
        return self._supported_features

    @supported_features.setter
    def supported_features(self, supported_features):
        """Sets the supported_features of this DefSubServiceInfo.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :param supported_features: The supported_features of this DefSubServiceInfo.
        :type supported_features: str
        """
        if supported_features is not None and not re.search(r'^[A-Fa-f0-9]*$', supported_features):  # noqa: E501
            raise ValueError("Invalid value for `supported_features`, must be a follow pattern or equal to `/^[A-Fa-f0-9]*$/`")  # noqa: E501

        self._supported_features = supported_features
