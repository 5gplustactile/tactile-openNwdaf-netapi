# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.af_event import AfEvent
from openapi_server.models.amf_cond import AmfCond
from openapi_server.models.dccf_cond import DccfCond
from openapi_server.models.guami import Guami
from openapi_server.models.guami_list_cond import GuamiListCond
from openapi_server.models.identity_range import IdentityRange
from openapi_server.models.ml_analytics_info import MlAnalyticsInfo
from openapi_server.models.nf_type import NFType
from openapi_server.models.nef_cond import NefCond
from openapi_server.models.network_slice_cond import NetworkSliceCond
from openapi_server.models.nf_group_cond import NfGroupCond
from openapi_server.models.nf_group_list_cond import NfGroupListCond
from openapi_server.models.nf_instance_id_cond import NfInstanceIdCond
from openapi_server.models.nf_instance_id_list_cond import NfInstanceIdListCond
from openapi_server.models.nf_service_set_cond import NfServiceSetCond
from openapi_server.models.nf_set_cond import NfSetCond
from openapi_server.models.nf_type_cond import NfTypeCond
from openapi_server.models.nwdaf_cond import NwdafCond
from openapi_server.models.pfd_data import PfdData
from openapi_server.models.scp_domain_cond import ScpDomainCond
from openapi_server.models.service_name import ServiceName
from openapi_server.models.service_name_cond import ServiceNameCond
from openapi_server.models.service_name_list_cond import ServiceNameListCond
from openapi_server.models.snssai import Snssai
from openapi_server.models.tai import Tai
from openapi_server.models.tai_range import TaiRange
from openapi_server.models.upf_cond import UpfCond
from openapi_server import util

from openapi_server.models.af_event import AfEvent  # noqa: E501
from openapi_server.models.amf_cond import AmfCond  # noqa: E501
from openapi_server.models.dccf_cond import DccfCond  # noqa: E501
from openapi_server.models.guami import Guami  # noqa: E501
from openapi_server.models.guami_list_cond import GuamiListCond  # noqa: E501
from openapi_server.models.identity_range import IdentityRange  # noqa: E501
from openapi_server.models.ml_analytics_info import MlAnalyticsInfo  # noqa: E501
from openapi_server.models.nef_cond import NefCond  # noqa: E501
from openapi_server.models.network_slice_cond import NetworkSliceCond  # noqa: E501
from openapi_server.models.nf_group_cond import NfGroupCond  # noqa: E501
from openapi_server.models.nf_group_list_cond import NfGroupListCond  # noqa: E501
from openapi_server.models.nf_instance_id_cond import NfInstanceIdCond  # noqa: E501
from openapi_server.models.nf_instance_id_list_cond import NfInstanceIdListCond  # noqa: E501
from openapi_server.models.nf_service_set_cond import NfServiceSetCond  # noqa: E501
from openapi_server.models.nf_set_cond import NfSetCond  # noqa: E501
from openapi_server.models.nf_type import NFType  # noqa: E501
from openapi_server.models.nf_type_cond import NfTypeCond  # noqa: E501
from openapi_server.models.nwdaf_cond import NwdafCond  # noqa: E501
from openapi_server.models.pfd_data import PfdData  # noqa: E501
from openapi_server.models.scp_domain_cond import ScpDomainCond  # noqa: E501
from openapi_server.models.service_name import ServiceName  # noqa: E501
from openapi_server.models.service_name_cond import ServiceNameCond  # noqa: E501
from openapi_server.models.service_name_list_cond import ServiceNameListCond  # noqa: E501
from openapi_server.models.snssai import Snssai  # noqa: E501
from openapi_server.models.tai import Tai  # noqa: E501
from openapi_server.models.tai_range import TaiRange  # noqa: E501
from openapi_server.models.upf_cond import UpfCond  # noqa: E501

class SubscrCond(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nf_instance_id=None, nf_instance_id_list=None, nf_type=None, service_name=None, condition_type=None, service_name_list=None, guami_list=None, snssai_list=None, nsi_list=None, nf_group_id=None, nf_group_id_list=None, nf_set_id=None, nf_service_set_id=None, smf_serving_area=None, tai_list=None, scp_domains=None, nf_type_list=None, analytics_ids=None, tai_range_list=None, serving_nf_type_list=None, serving_nf_set_id_list=None, ml_analytics_list=None, af_events=None, pfd_data=None, gpsi_ranges=None, external_group_identifiers_ranges=None, served_fqdn_list=None):  # noqa: E501
        """SubscrCond - a model defined in OpenAPI

        :param nf_instance_id: The nf_instance_id of this SubscrCond.  # noqa: E501
        :type nf_instance_id: str
        :param nf_instance_id_list: The nf_instance_id_list of this SubscrCond.  # noqa: E501
        :type nf_instance_id_list: List[str]
        :param nf_type: The nf_type of this SubscrCond.  # noqa: E501
        :type nf_type: str
        :param service_name: The service_name of this SubscrCond.  # noqa: E501
        :type service_name: ServiceName
        :param condition_type: The condition_type of this SubscrCond.  # noqa: E501
        :type condition_type: str
        :param service_name_list: The service_name_list of this SubscrCond.  # noqa: E501
        :type service_name_list: List[ServiceName]
        :param guami_list: The guami_list of this SubscrCond.  # noqa: E501
        :type guami_list: List[Guami]
        :param snssai_list: The snssai_list of this SubscrCond.  # noqa: E501
        :type snssai_list: List[Snssai]
        :param nsi_list: The nsi_list of this SubscrCond.  # noqa: E501
        :type nsi_list: List[str]
        :param nf_group_id: The nf_group_id of this SubscrCond.  # noqa: E501
        :type nf_group_id: str
        :param nf_group_id_list: The nf_group_id_list of this SubscrCond.  # noqa: E501
        :type nf_group_id_list: List[str]
        :param nf_set_id: The nf_set_id of this SubscrCond.  # noqa: E501
        :type nf_set_id: str
        :param nf_service_set_id: The nf_service_set_id of this SubscrCond.  # noqa: E501
        :type nf_service_set_id: str
        :param smf_serving_area: The smf_serving_area of this SubscrCond.  # noqa: E501
        :type smf_serving_area: List[str]
        :param tai_list: The tai_list of this SubscrCond.  # noqa: E501
        :type tai_list: List[Tai]
        :param scp_domains: The scp_domains of this SubscrCond.  # noqa: E501
        :type scp_domains: List[str]
        :param nf_type_list: The nf_type_list of this SubscrCond.  # noqa: E501
        :type nf_type_list: List[NFType]
        :param analytics_ids: The analytics_ids of this SubscrCond.  # noqa: E501
        :type analytics_ids: List[str]
        :param tai_range_list: The tai_range_list of this SubscrCond.  # noqa: E501
        :type tai_range_list: List[TaiRange]
        :param serving_nf_type_list: The serving_nf_type_list of this SubscrCond.  # noqa: E501
        :type serving_nf_type_list: List[NFType]
        :param serving_nf_set_id_list: The serving_nf_set_id_list of this SubscrCond.  # noqa: E501
        :type serving_nf_set_id_list: List[str]
        :param ml_analytics_list: The ml_analytics_list of this SubscrCond.  # noqa: E501
        :type ml_analytics_list: List[MlAnalyticsInfo]
        :param af_events: The af_events of this SubscrCond.  # noqa: E501
        :type af_events: List[AfEvent]
        :param pfd_data: The pfd_data of this SubscrCond.  # noqa: E501
        :type pfd_data: PfdData
        :param gpsi_ranges: The gpsi_ranges of this SubscrCond.  # noqa: E501
        :type gpsi_ranges: List[IdentityRange]
        :param external_group_identifiers_ranges: The external_group_identifiers_ranges of this SubscrCond.  # noqa: E501
        :type external_group_identifiers_ranges: List[IdentityRange]
        :param served_fqdn_list: The served_fqdn_list of this SubscrCond.  # noqa: E501
        :type served_fqdn_list: List[str]
        """
        self.openapi_types = {
            'nf_instance_id': str,
            'nf_instance_id_list': List[str],
            'nf_type': str,
            'service_name': ServiceName,
            'condition_type': str,
            'service_name_list': List[ServiceName],
            'guami_list': List[Guami],
            'snssai_list': List[Snssai],
            'nsi_list': List[str],
            'nf_group_id': str,
            'nf_group_id_list': List[str],
            'nf_set_id': str,
            'nf_service_set_id': str,
            'smf_serving_area': List[str],
            'tai_list': List[Tai],
            'scp_domains': List[str],
            'nf_type_list': List[NFType],
            'analytics_ids': List[str],
            'tai_range_list': List[TaiRange],
            'serving_nf_type_list': List[NFType],
            'serving_nf_set_id_list': List[str],
            'ml_analytics_list': List[MlAnalyticsInfo],
            'af_events': List[AfEvent],
            'pfd_data': PfdData,
            'gpsi_ranges': List[IdentityRange],
            'external_group_identifiers_ranges': List[IdentityRange],
            'served_fqdn_list': List[str]
        }

        self.attribute_map = {
            'nf_instance_id': 'nfInstanceId',
            'nf_instance_id_list': 'nfInstanceIdList',
            'nf_type': 'nfType',
            'service_name': 'serviceName',
            'condition_type': 'conditionType',
            'service_name_list': 'serviceNameList',
            'guami_list': 'guamiList',
            'snssai_list': 'snssaiList',
            'nsi_list': 'nsiList',
            'nf_group_id': 'nfGroupId',
            'nf_group_id_list': 'nfGroupIdList',
            'nf_set_id': 'nfSetId',
            'nf_service_set_id': 'nfServiceSetId',
            'smf_serving_area': 'smfServingArea',
            'tai_list': 'taiList',
            'scp_domains': 'scpDomains',
            'nf_type_list': 'nfTypeList',
            'analytics_ids': 'analyticsIds',
            'tai_range_list': 'taiRangeList',
            'serving_nf_type_list': 'servingNfTypeList',
            'serving_nf_set_id_list': 'servingNfSetIdList',
            'ml_analytics_list': 'mlAnalyticsList',
            'af_events': 'afEvents',
            'pfd_data': 'pfdData',
            'gpsi_ranges': 'gpsiRanges',
            'external_group_identifiers_ranges': 'externalGroupIdentifiersRanges',
            'served_fqdn_list': 'servedFqdnList'
        }

        self._nf_instance_id = nf_instance_id
        self._nf_instance_id_list = nf_instance_id_list
        self._nf_type = nf_type
        self._service_name = service_name
        self._condition_type = condition_type
        self._service_name_list = service_name_list
        self._guami_list = guami_list
        self._snssai_list = snssai_list
        self._nsi_list = nsi_list
        self._nf_group_id = nf_group_id
        self._nf_group_id_list = nf_group_id_list
        self._nf_set_id = nf_set_id
        self._nf_service_set_id = nf_service_set_id
        self._smf_serving_area = smf_serving_area
        self._tai_list = tai_list
        self._scp_domains = scp_domains
        self._nf_type_list = nf_type_list
        self._analytics_ids = analytics_ids
        self._tai_range_list = tai_range_list
        self._serving_nf_type_list = serving_nf_type_list
        self._serving_nf_set_id_list = serving_nf_set_id_list
        self._ml_analytics_list = ml_analytics_list
        self._af_events = af_events
        self._pfd_data = pfd_data
        self._gpsi_ranges = gpsi_ranges
        self._external_group_identifiers_ranges = external_group_identifiers_ranges
        self._served_fqdn_list = served_fqdn_list

    @classmethod
    def from_dict(cls, dikt) -> 'SubscrCond':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SubscrCond of this SubscrCond.  # noqa: E501
        :rtype: SubscrCond
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nf_instance_id(self):
        """Gets the nf_instance_id of this SubscrCond.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :return: The nf_instance_id of this SubscrCond.
        :rtype: str
        """
        return self._nf_instance_id

    @nf_instance_id.setter
    def nf_instance_id(self, nf_instance_id):
        """Sets the nf_instance_id of this SubscrCond.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :param nf_instance_id: The nf_instance_id of this SubscrCond.
        :type nf_instance_id: str
        """
        if nf_instance_id is None:
            raise ValueError("Invalid value for `nf_instance_id`, must not be `None`")  # noqa: E501

        self._nf_instance_id = nf_instance_id

    @property
    def nf_instance_id_list(self):
        """Gets the nf_instance_id_list of this SubscrCond.


        :return: The nf_instance_id_list of this SubscrCond.
        :rtype: List[str]
        """
        return self._nf_instance_id_list

    @nf_instance_id_list.setter
    def nf_instance_id_list(self, nf_instance_id_list):
        """Sets the nf_instance_id_list of this SubscrCond.


        :param nf_instance_id_list: The nf_instance_id_list of this SubscrCond.
        :type nf_instance_id_list: List[str]
        """
        if nf_instance_id_list is None:
            raise ValueError("Invalid value for `nf_instance_id_list`, must not be `None`")  # noqa: E501
        if nf_instance_id_list is not None and len(nf_instance_id_list) < 1:
            raise ValueError("Invalid value for `nf_instance_id_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._nf_instance_id_list = nf_instance_id_list

    @property
    def nf_type(self):
        """Gets the nf_type of this SubscrCond.


        :return: The nf_type of this SubscrCond.
        :rtype: str
        """
        return self._nf_type

    @nf_type.setter
    def nf_type(self, nf_type):
        """Sets the nf_type of this SubscrCond.


        :param nf_type: The nf_type of this SubscrCond.
        :type nf_type: str
        """
        allowed_values = ["UDM", "AUSF", "UDR", "PCF", "CHF", "HSS"]  # noqa: E501
        if nf_type not in allowed_values:
            raise ValueError(
                "Invalid value for `nf_type` ({0}), must be one of {1}"
                .format(nf_type, allowed_values)
            )

        self._nf_type = nf_type

    @property
    def service_name(self):
        """Gets the service_name of this SubscrCond.


        :return: The service_name of this SubscrCond.
        :rtype: ServiceName
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this SubscrCond.


        :param service_name: The service_name of this SubscrCond.
        :type service_name: ServiceName
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")  # noqa: E501

        self._service_name = service_name

    @property
    def condition_type(self):
        """Gets the condition_type of this SubscrCond.


        :return: The condition_type of this SubscrCond.
        :rtype: str
        """
        return self._condition_type

    @condition_type.setter
    def condition_type(self, condition_type):
        """Sets the condition_type of this SubscrCond.


        :param condition_type: The condition_type of this SubscrCond.
        :type condition_type: str
        """
        allowed_values = ["DCCF_COND"]  # noqa: E501
        if condition_type not in allowed_values:
            raise ValueError(
                "Invalid value for `condition_type` ({0}), must be one of {1}"
                .format(condition_type, allowed_values)
            )

        self._condition_type = condition_type

    @property
    def service_name_list(self):
        """Gets the service_name_list of this SubscrCond.


        :return: The service_name_list of this SubscrCond.
        :rtype: List[ServiceName]
        """
        return self._service_name_list

    @service_name_list.setter
    def service_name_list(self, service_name_list):
        """Sets the service_name_list of this SubscrCond.


        :param service_name_list: The service_name_list of this SubscrCond.
        :type service_name_list: List[ServiceName]
        """
        if service_name_list is None:
            raise ValueError("Invalid value for `service_name_list`, must not be `None`")  # noqa: E501
        if service_name_list is not None and len(service_name_list) < 1:
            raise ValueError("Invalid value for `service_name_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._service_name_list = service_name_list

    @property
    def guami_list(self):
        """Gets the guami_list of this SubscrCond.


        :return: The guami_list of this SubscrCond.
        :rtype: List[Guami]
        """
        return self._guami_list

    @guami_list.setter
    def guami_list(self, guami_list):
        """Sets the guami_list of this SubscrCond.


        :param guami_list: The guami_list of this SubscrCond.
        :type guami_list: List[Guami]
        """
        if guami_list is None:
            raise ValueError("Invalid value for `guami_list`, must not be `None`")  # noqa: E501

        self._guami_list = guami_list

    @property
    def snssai_list(self):
        """Gets the snssai_list of this SubscrCond.


        :return: The snssai_list of this SubscrCond.
        :rtype: List[Snssai]
        """
        return self._snssai_list

    @snssai_list.setter
    def snssai_list(self, snssai_list):
        """Sets the snssai_list of this SubscrCond.


        :param snssai_list: The snssai_list of this SubscrCond.
        :type snssai_list: List[Snssai]
        """
        if snssai_list is None:
            raise ValueError("Invalid value for `snssai_list`, must not be `None`")  # noqa: E501
        if snssai_list is not None and len(snssai_list) < 1:
            raise ValueError("Invalid value for `snssai_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._snssai_list = snssai_list

    @property
    def nsi_list(self):
        """Gets the nsi_list of this SubscrCond.


        :return: The nsi_list of this SubscrCond.
        :rtype: List[str]
        """
        return self._nsi_list

    @nsi_list.setter
    def nsi_list(self, nsi_list):
        """Sets the nsi_list of this SubscrCond.


        :param nsi_list: The nsi_list of this SubscrCond.
        :type nsi_list: List[str]
        """

        self._nsi_list = nsi_list

    @property
    def nf_group_id(self):
        """Gets the nf_group_id of this SubscrCond.

        Identifier of a group of NFs.  # noqa: E501

        :return: The nf_group_id of this SubscrCond.
        :rtype: str
        """
        return self._nf_group_id

    @nf_group_id.setter
    def nf_group_id(self, nf_group_id):
        """Sets the nf_group_id of this SubscrCond.

        Identifier of a group of NFs.  # noqa: E501

        :param nf_group_id: The nf_group_id of this SubscrCond.
        :type nf_group_id: str
        """
        if nf_group_id is None:
            raise ValueError("Invalid value for `nf_group_id`, must not be `None`")  # noqa: E501

        self._nf_group_id = nf_group_id

    @property
    def nf_group_id_list(self):
        """Gets the nf_group_id_list of this SubscrCond.


        :return: The nf_group_id_list of this SubscrCond.
        :rtype: List[str]
        """
        return self._nf_group_id_list

    @nf_group_id_list.setter
    def nf_group_id_list(self, nf_group_id_list):
        """Sets the nf_group_id_list of this SubscrCond.


        :param nf_group_id_list: The nf_group_id_list of this SubscrCond.
        :type nf_group_id_list: List[str]
        """
        if nf_group_id_list is None:
            raise ValueError("Invalid value for `nf_group_id_list`, must not be `None`")  # noqa: E501
        if nf_group_id_list is not None and len(nf_group_id_list) < 1:
            raise ValueError("Invalid value for `nf_group_id_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._nf_group_id_list = nf_group_id_list

    @property
    def nf_set_id(self):
        """Gets the nf_set_id of this SubscrCond.

        NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.    # noqa: E501

        :return: The nf_set_id of this SubscrCond.
        :rtype: str
        """
        return self._nf_set_id

    @nf_set_id.setter
    def nf_set_id(self, nf_set_id):
        """Sets the nf_set_id of this SubscrCond.

        NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.    # noqa: E501

        :param nf_set_id: The nf_set_id of this SubscrCond.
        :type nf_set_id: str
        """
        if nf_set_id is None:
            raise ValueError("Invalid value for `nf_set_id`, must not be `None`")  # noqa: E501

        self._nf_set_id = nf_set_id

    @property
    def nf_service_set_id(self):
        """Gets the nf_service_set_id of this SubscrCond.

        NF Service Set Identifier (see clause 28.12 of 3GPP TS 23.003) formatted as the following  string \"set<Set ID>.sn<Service Name>.nfi<NF Instance ID>.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.sn<ServiceName>.nfi<NFInstanceID>.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)   <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NID> encoded as defined in clause 5.4.2 (\"Nid\" data type definition)  <NFInstanceId> encoded as defined in clause 5.3.2  <ServiceName> encoded as defined in 3GPP TS 29.510  <Set ID> encoded as a string of characters consisting of alphabetic    characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that shall end    with either an alphabetic character or a digit.   # noqa: E501

        :return: The nf_service_set_id of this SubscrCond.
        :rtype: str
        """
        return self._nf_service_set_id

    @nf_service_set_id.setter
    def nf_service_set_id(self, nf_service_set_id):
        """Sets the nf_service_set_id of this SubscrCond.

        NF Service Set Identifier (see clause 28.12 of 3GPP TS 23.003) formatted as the following  string \"set<Set ID>.sn<Service Name>.nfi<NF Instance ID>.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.sn<ServiceName>.nfi<NFInstanceID>.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)   <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NID> encoded as defined in clause 5.4.2 (\"Nid\" data type definition)  <NFInstanceId> encoded as defined in clause 5.3.2  <ServiceName> encoded as defined in 3GPP TS 29.510  <Set ID> encoded as a string of characters consisting of alphabetic    characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that shall end    with either an alphabetic character or a digit.   # noqa: E501

        :param nf_service_set_id: The nf_service_set_id of this SubscrCond.
        :type nf_service_set_id: str
        """
        if nf_service_set_id is None:
            raise ValueError("Invalid value for `nf_service_set_id`, must not be `None`")  # noqa: E501

        self._nf_service_set_id = nf_service_set_id

    @property
    def smf_serving_area(self):
        """Gets the smf_serving_area of this SubscrCond.


        :return: The smf_serving_area of this SubscrCond.
        :rtype: List[str]
        """
        return self._smf_serving_area

    @smf_serving_area.setter
    def smf_serving_area(self, smf_serving_area):
        """Sets the smf_serving_area of this SubscrCond.


        :param smf_serving_area: The smf_serving_area of this SubscrCond.
        :type smf_serving_area: List[str]
        """
        if smf_serving_area is not None and len(smf_serving_area) < 1:
            raise ValueError("Invalid value for `smf_serving_area`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._smf_serving_area = smf_serving_area

    @property
    def tai_list(self):
        """Gets the tai_list of this SubscrCond.


        :return: The tai_list of this SubscrCond.
        :rtype: List[Tai]
        """
        return self._tai_list

    @tai_list.setter
    def tai_list(self, tai_list):
        """Sets the tai_list of this SubscrCond.


        :param tai_list: The tai_list of this SubscrCond.
        :type tai_list: List[Tai]
        """
        if tai_list is not None and len(tai_list) < 1:
            raise ValueError("Invalid value for `tai_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._tai_list = tai_list

    @property
    def scp_domains(self):
        """Gets the scp_domains of this SubscrCond.


        :return: The scp_domains of this SubscrCond.
        :rtype: List[str]
        """
        return self._scp_domains

    @scp_domains.setter
    def scp_domains(self, scp_domains):
        """Sets the scp_domains of this SubscrCond.


        :param scp_domains: The scp_domains of this SubscrCond.
        :type scp_domains: List[str]
        """
        if scp_domains is None:
            raise ValueError("Invalid value for `scp_domains`, must not be `None`")  # noqa: E501
        if scp_domains is not None and len(scp_domains) < 1:
            raise ValueError("Invalid value for `scp_domains`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._scp_domains = scp_domains

    @property
    def nf_type_list(self):
        """Gets the nf_type_list of this SubscrCond.


        :return: The nf_type_list of this SubscrCond.
        :rtype: List[NFType]
        """
        return self._nf_type_list

    @nf_type_list.setter
    def nf_type_list(self, nf_type_list):
        """Sets the nf_type_list of this SubscrCond.


        :param nf_type_list: The nf_type_list of this SubscrCond.
        :type nf_type_list: List[NFType]
        """
        if nf_type_list is not None and len(nf_type_list) < 1:
            raise ValueError("Invalid value for `nf_type_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._nf_type_list = nf_type_list

    @property
    def analytics_ids(self):
        """Gets the analytics_ids of this SubscrCond.


        :return: The analytics_ids of this SubscrCond.
        :rtype: List[str]
        """
        return self._analytics_ids

    @analytics_ids.setter
    def analytics_ids(self, analytics_ids):
        """Sets the analytics_ids of this SubscrCond.


        :param analytics_ids: The analytics_ids of this SubscrCond.
        :type analytics_ids: List[str]
        """
        if analytics_ids is not None and len(analytics_ids) < 1:
            raise ValueError("Invalid value for `analytics_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._analytics_ids = analytics_ids

    @property
    def tai_range_list(self):
        """Gets the tai_range_list of this SubscrCond.


        :return: The tai_range_list of this SubscrCond.
        :rtype: List[TaiRange]
        """
        return self._tai_range_list

    @tai_range_list.setter
    def tai_range_list(self, tai_range_list):
        """Sets the tai_range_list of this SubscrCond.


        :param tai_range_list: The tai_range_list of this SubscrCond.
        :type tai_range_list: List[TaiRange]
        """
        if tai_range_list is not None and len(tai_range_list) < 1:
            raise ValueError("Invalid value for `tai_range_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._tai_range_list = tai_range_list

    @property
    def serving_nf_type_list(self):
        """Gets the serving_nf_type_list of this SubscrCond.


        :return: The serving_nf_type_list of this SubscrCond.
        :rtype: List[NFType]
        """
        return self._serving_nf_type_list

    @serving_nf_type_list.setter
    def serving_nf_type_list(self, serving_nf_type_list):
        """Sets the serving_nf_type_list of this SubscrCond.


        :param serving_nf_type_list: The serving_nf_type_list of this SubscrCond.
        :type serving_nf_type_list: List[NFType]
        """
        if serving_nf_type_list is not None and len(serving_nf_type_list) < 1:
            raise ValueError("Invalid value for `serving_nf_type_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._serving_nf_type_list = serving_nf_type_list

    @property
    def serving_nf_set_id_list(self):
        """Gets the serving_nf_set_id_list of this SubscrCond.


        :return: The serving_nf_set_id_list of this SubscrCond.
        :rtype: List[str]
        """
        return self._serving_nf_set_id_list

    @serving_nf_set_id_list.setter
    def serving_nf_set_id_list(self, serving_nf_set_id_list):
        """Sets the serving_nf_set_id_list of this SubscrCond.


        :param serving_nf_set_id_list: The serving_nf_set_id_list of this SubscrCond.
        :type serving_nf_set_id_list: List[str]
        """
        if serving_nf_set_id_list is not None and len(serving_nf_set_id_list) < 1:
            raise ValueError("Invalid value for `serving_nf_set_id_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._serving_nf_set_id_list = serving_nf_set_id_list

    @property
    def ml_analytics_list(self):
        """Gets the ml_analytics_list of this SubscrCond.


        :return: The ml_analytics_list of this SubscrCond.
        :rtype: List[MlAnalyticsInfo]
        """
        return self._ml_analytics_list

    @ml_analytics_list.setter
    def ml_analytics_list(self, ml_analytics_list):
        """Sets the ml_analytics_list of this SubscrCond.


        :param ml_analytics_list: The ml_analytics_list of this SubscrCond.
        :type ml_analytics_list: List[MlAnalyticsInfo]
        """
        if ml_analytics_list is not None and len(ml_analytics_list) < 1:
            raise ValueError("Invalid value for `ml_analytics_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ml_analytics_list = ml_analytics_list

    @property
    def af_events(self):
        """Gets the af_events of this SubscrCond.


        :return: The af_events of this SubscrCond.
        :rtype: List[AfEvent]
        """
        return self._af_events

    @af_events.setter
    def af_events(self, af_events):
        """Sets the af_events of this SubscrCond.


        :param af_events: The af_events of this SubscrCond.
        :type af_events: List[AfEvent]
        """
        if af_events is not None and len(af_events) < 1:
            raise ValueError("Invalid value for `af_events`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._af_events = af_events

    @property
    def pfd_data(self):
        """Gets the pfd_data of this SubscrCond.


        :return: The pfd_data of this SubscrCond.
        :rtype: PfdData
        """
        return self._pfd_data

    @pfd_data.setter
    def pfd_data(self, pfd_data):
        """Sets the pfd_data of this SubscrCond.


        :param pfd_data: The pfd_data of this SubscrCond.
        :type pfd_data: PfdData
        """

        self._pfd_data = pfd_data

    @property
    def gpsi_ranges(self):
        """Gets the gpsi_ranges of this SubscrCond.


        :return: The gpsi_ranges of this SubscrCond.
        :rtype: List[IdentityRange]
        """
        return self._gpsi_ranges

    @gpsi_ranges.setter
    def gpsi_ranges(self, gpsi_ranges):
        """Sets the gpsi_ranges of this SubscrCond.


        :param gpsi_ranges: The gpsi_ranges of this SubscrCond.
        :type gpsi_ranges: List[IdentityRange]
        """
        if gpsi_ranges is not None and len(gpsi_ranges) < 1:
            raise ValueError("Invalid value for `gpsi_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._gpsi_ranges = gpsi_ranges

    @property
    def external_group_identifiers_ranges(self):
        """Gets the external_group_identifiers_ranges of this SubscrCond.


        :return: The external_group_identifiers_ranges of this SubscrCond.
        :rtype: List[IdentityRange]
        """
        return self._external_group_identifiers_ranges

    @external_group_identifiers_ranges.setter
    def external_group_identifiers_ranges(self, external_group_identifiers_ranges):
        """Sets the external_group_identifiers_ranges of this SubscrCond.


        :param external_group_identifiers_ranges: The external_group_identifiers_ranges of this SubscrCond.
        :type external_group_identifiers_ranges: List[IdentityRange]
        """
        if external_group_identifiers_ranges is not None and len(external_group_identifiers_ranges) < 1:
            raise ValueError("Invalid value for `external_group_identifiers_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._external_group_identifiers_ranges = external_group_identifiers_ranges

    @property
    def served_fqdn_list(self):
        """Gets the served_fqdn_list of this SubscrCond.


        :return: The served_fqdn_list of this SubscrCond.
        :rtype: List[str]
        """
        return self._served_fqdn_list

    @served_fqdn_list.setter
    def served_fqdn_list(self, served_fqdn_list):
        """Sets the served_fqdn_list of this SubscrCond.


        :param served_fqdn_list: The served_fqdn_list of this SubscrCond.
        :type served_fqdn_list: List[str]
        """
        if served_fqdn_list is not None and len(served_fqdn_list) < 1:
            raise ValueError("Invalid value for `served_fqdn_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._served_fqdn_list = served_fqdn_list
