# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.nf_type import NFType
from openapi_server.models.tai import Tai
from openapi_server.models.tai_range import TaiRange
from openapi_server import util

from openapi_server.models.nf_type import NFType  # noqa: E501
from openapi_server.models.tai import Tai  # noqa: E501
from openapi_server.models.tai_range import TaiRange  # noqa: E501

class DccfCond(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition_type=None, tai_list=None, tai_range_list=None, serving_nf_type_list=None, serving_nf_set_id_list=None):  # noqa: E501
        """DccfCond - a model defined in OpenAPI

        :param condition_type: The condition_type of this DccfCond.  # noqa: E501
        :type condition_type: str
        :param tai_list: The tai_list of this DccfCond.  # noqa: E501
        :type tai_list: List[Tai]
        :param tai_range_list: The tai_range_list of this DccfCond.  # noqa: E501
        :type tai_range_list: List[TaiRange]
        :param serving_nf_type_list: The serving_nf_type_list of this DccfCond.  # noqa: E501
        :type serving_nf_type_list: List[NFType]
        :param serving_nf_set_id_list: The serving_nf_set_id_list of this DccfCond.  # noqa: E501
        :type serving_nf_set_id_list: List[str]
        """
        self.openapi_types = {
            'condition_type': str,
            'tai_list': List[Tai],
            'tai_range_list': List[TaiRange],
            'serving_nf_type_list': List[NFType],
            'serving_nf_set_id_list': List[str]
        }

        self.attribute_map = {
            'condition_type': 'conditionType',
            'tai_list': 'taiList',
            'tai_range_list': 'taiRangeList',
            'serving_nf_type_list': 'servingNfTypeList',
            'serving_nf_set_id_list': 'servingNfSetIdList'
        }

        self._condition_type = condition_type
        self._tai_list = tai_list
        self._tai_range_list = tai_range_list
        self._serving_nf_type_list = serving_nf_type_list
        self._serving_nf_set_id_list = serving_nf_set_id_list

    @classmethod
    def from_dict(cls, dikt) -> 'DccfCond':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DccfCond of this DccfCond.  # noqa: E501
        :rtype: DccfCond
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition_type(self):
        """Gets the condition_type of this DccfCond.


        :return: The condition_type of this DccfCond.
        :rtype: str
        """
        return self._condition_type

    @condition_type.setter
    def condition_type(self, condition_type):
        """Sets the condition_type of this DccfCond.


        :param condition_type: The condition_type of this DccfCond.
        :type condition_type: str
        """
        allowed_values = ["DCCF_COND"]  # noqa: E501
        if condition_type not in allowed_values:
            raise ValueError(
                "Invalid value for `condition_type` ({0}), must be one of {1}"
                .format(condition_type, allowed_values)
            )

        self._condition_type = condition_type

    @property
    def tai_list(self):
        """Gets the tai_list of this DccfCond.


        :return: The tai_list of this DccfCond.
        :rtype: List[Tai]
        """
        return self._tai_list

    @tai_list.setter
    def tai_list(self, tai_list):
        """Sets the tai_list of this DccfCond.


        :param tai_list: The tai_list of this DccfCond.
        :type tai_list: List[Tai]
        """
        if tai_list is not None and len(tai_list) < 1:
            raise ValueError("Invalid value for `tai_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._tai_list = tai_list

    @property
    def tai_range_list(self):
        """Gets the tai_range_list of this DccfCond.


        :return: The tai_range_list of this DccfCond.
        :rtype: List[TaiRange]
        """
        return self._tai_range_list

    @tai_range_list.setter
    def tai_range_list(self, tai_range_list):
        """Sets the tai_range_list of this DccfCond.


        :param tai_range_list: The tai_range_list of this DccfCond.
        :type tai_range_list: List[TaiRange]
        """
        if tai_range_list is not None and len(tai_range_list) < 1:
            raise ValueError("Invalid value for `tai_range_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._tai_range_list = tai_range_list

    @property
    def serving_nf_type_list(self):
        """Gets the serving_nf_type_list of this DccfCond.


        :return: The serving_nf_type_list of this DccfCond.
        :rtype: List[NFType]
        """
        return self._serving_nf_type_list

    @serving_nf_type_list.setter
    def serving_nf_type_list(self, serving_nf_type_list):
        """Sets the serving_nf_type_list of this DccfCond.


        :param serving_nf_type_list: The serving_nf_type_list of this DccfCond.
        :type serving_nf_type_list: List[NFType]
        """
        if serving_nf_type_list is not None and len(serving_nf_type_list) < 1:
            raise ValueError("Invalid value for `serving_nf_type_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._serving_nf_type_list = serving_nf_type_list

    @property
    def serving_nf_set_id_list(self):
        """Gets the serving_nf_set_id_list of this DccfCond.


        :return: The serving_nf_set_id_list of this DccfCond.
        :rtype: List[str]
        """
        return self._serving_nf_set_id_list

    @serving_nf_set_id_list.setter
    def serving_nf_set_id_list(self, serving_nf_set_id_list):
        """Sets the serving_nf_set_id_list of this DccfCond.


        :param serving_nf_set_id_list: The serving_nf_set_id_list of this DccfCond.
        :type serving_nf_set_id_list: List[str]
        """
        if serving_nf_set_id_list is not None and len(serving_nf_set_id_list) < 1:
            raise ValueError("Invalid value for `serving_nf_set_id_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._serving_nf_set_id_list = serving_nf_set_id_list
