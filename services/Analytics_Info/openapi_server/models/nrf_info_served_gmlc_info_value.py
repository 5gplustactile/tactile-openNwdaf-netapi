# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.external_client_type import ExternalClientType
from openapi_server.models.gmlc_info import GmlcInfo
from openapi_server import util

from openapi_server.models.external_client_type import ExternalClientType  # noqa: E501
from openapi_server.models.gmlc_info import GmlcInfo  # noqa: E501

class NrfInfoServedGmlcInfoValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, serving_client_types=None, gmlc_numbers=None):  # noqa: E501
        """NrfInfoServedGmlcInfoValue - a model defined in OpenAPI

        :param serving_client_types: The serving_client_types of this NrfInfoServedGmlcInfoValue.  # noqa: E501
        :type serving_client_types: List[ExternalClientType]
        :param gmlc_numbers: The gmlc_numbers of this NrfInfoServedGmlcInfoValue.  # noqa: E501
        :type gmlc_numbers: List[str]
        """
        self.openapi_types = {
            'serving_client_types': List[ExternalClientType],
            'gmlc_numbers': List[str]
        }

        self.attribute_map = {
            'serving_client_types': 'servingClientTypes',
            'gmlc_numbers': 'gmlcNumbers'
        }

        self._serving_client_types = serving_client_types
        self._gmlc_numbers = gmlc_numbers

    @classmethod
    def from_dict(cls, dikt) -> 'NrfInfoServedGmlcInfoValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NrfInfo_servedGmlcInfo_value of this NrfInfoServedGmlcInfoValue.  # noqa: E501
        :rtype: NrfInfoServedGmlcInfoValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def serving_client_types(self):
        """Gets the serving_client_types of this NrfInfoServedGmlcInfoValue.


        :return: The serving_client_types of this NrfInfoServedGmlcInfoValue.
        :rtype: List[ExternalClientType]
        """
        return self._serving_client_types

    @serving_client_types.setter
    def serving_client_types(self, serving_client_types):
        """Sets the serving_client_types of this NrfInfoServedGmlcInfoValue.


        :param serving_client_types: The serving_client_types of this NrfInfoServedGmlcInfoValue.
        :type serving_client_types: List[ExternalClientType]
        """
        if serving_client_types is not None and len(serving_client_types) < 1:
            raise ValueError("Invalid value for `serving_client_types`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._serving_client_types = serving_client_types

    @property
    def gmlc_numbers(self):
        """Gets the gmlc_numbers of this NrfInfoServedGmlcInfoValue.


        :return: The gmlc_numbers of this NrfInfoServedGmlcInfoValue.
        :rtype: List[str]
        """
        return self._gmlc_numbers

    @gmlc_numbers.setter
    def gmlc_numbers(self, gmlc_numbers):
        """Sets the gmlc_numbers of this NrfInfoServedGmlcInfoValue.


        :param gmlc_numbers: The gmlc_numbers of this NrfInfoServedGmlcInfoValue.
        :type gmlc_numbers: List[str]
        """
        if gmlc_numbers is not None and len(gmlc_numbers) < 1:
            raise ValueError("Invalid value for `gmlc_numbers`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._gmlc_numbers = gmlc_numbers
