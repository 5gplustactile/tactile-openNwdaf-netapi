# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.identity_range import IdentityRange
from openapi_server.models.internal_group_id_range import InternalGroupIdRange
from openapi_server.models.snssai_tsctsf_info_item import SnssaiTsctsfInfoItem
from openapi_server.models.supi_range import SupiRange
from openapi_server import util

from openapi_server.models.identity_range import IdentityRange  # noqa: E501
from openapi_server.models.internal_group_id_range import InternalGroupIdRange  # noqa: E501
from openapi_server.models.snssai_tsctsf_info_item import SnssaiTsctsfInfoItem  # noqa: E501
from openapi_server.models.supi_range import SupiRange  # noqa: E501

class TsctsfInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s_nssai_info_list=None, external_group_identifiers_ranges=None, supi_ranges=None, gpsi_ranges=None, internal_group_identifiers_ranges=None):  # noqa: E501
        """TsctsfInfo - a model defined in OpenAPI

        :param s_nssai_info_list: The s_nssai_info_list of this TsctsfInfo.  # noqa: E501
        :type s_nssai_info_list: Dict[str, SnssaiTsctsfInfoItem]
        :param external_group_identifiers_ranges: The external_group_identifiers_ranges of this TsctsfInfo.  # noqa: E501
        :type external_group_identifiers_ranges: List[IdentityRange]
        :param supi_ranges: The supi_ranges of this TsctsfInfo.  # noqa: E501
        :type supi_ranges: List[SupiRange]
        :param gpsi_ranges: The gpsi_ranges of this TsctsfInfo.  # noqa: E501
        :type gpsi_ranges: List[IdentityRange]
        :param internal_group_identifiers_ranges: The internal_group_identifiers_ranges of this TsctsfInfo.  # noqa: E501
        :type internal_group_identifiers_ranges: List[InternalGroupIdRange]
        """
        self.openapi_types = {
            's_nssai_info_list': Dict[str, SnssaiTsctsfInfoItem],
            'external_group_identifiers_ranges': List[IdentityRange],
            'supi_ranges': List[SupiRange],
            'gpsi_ranges': List[IdentityRange],
            'internal_group_identifiers_ranges': List[InternalGroupIdRange]
        }

        self.attribute_map = {
            's_nssai_info_list': 'sNssaiInfoList',
            'external_group_identifiers_ranges': 'externalGroupIdentifiersRanges',
            'supi_ranges': 'supiRanges',
            'gpsi_ranges': 'gpsiRanges',
            'internal_group_identifiers_ranges': 'internalGroupIdentifiersRanges'
        }

        self._s_nssai_info_list = s_nssai_info_list
        self._external_group_identifiers_ranges = external_group_identifiers_ranges
        self._supi_ranges = supi_ranges
        self._gpsi_ranges = gpsi_ranges
        self._internal_group_identifiers_ranges = internal_group_identifiers_ranges

    @classmethod
    def from_dict(cls, dikt) -> 'TsctsfInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TsctsfInfo of this TsctsfInfo.  # noqa: E501
        :rtype: TsctsfInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s_nssai_info_list(self):
        """Gets the s_nssai_info_list of this TsctsfInfo.

        A map (list of key-value pairs) where a valid JSON string serves as key  # noqa: E501

        :return: The s_nssai_info_list of this TsctsfInfo.
        :rtype: Dict[str, SnssaiTsctsfInfoItem]
        """
        return self._s_nssai_info_list

    @s_nssai_info_list.setter
    def s_nssai_info_list(self, s_nssai_info_list):
        """Sets the s_nssai_info_list of this TsctsfInfo.

        A map (list of key-value pairs) where a valid JSON string serves as key  # noqa: E501

        :param s_nssai_info_list: The s_nssai_info_list of this TsctsfInfo.
        :type s_nssai_info_list: Dict[str, SnssaiTsctsfInfoItem]
        """
        if s_nssai_info_list is not None and len(s_nssai_info_list) < 1:
            raise ValueError("Invalid value for `s_nssai_info_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._s_nssai_info_list = s_nssai_info_list

    @property
    def external_group_identifiers_ranges(self):
        """Gets the external_group_identifiers_ranges of this TsctsfInfo.


        :return: The external_group_identifiers_ranges of this TsctsfInfo.
        :rtype: List[IdentityRange]
        """
        return self._external_group_identifiers_ranges

    @external_group_identifiers_ranges.setter
    def external_group_identifiers_ranges(self, external_group_identifiers_ranges):
        """Sets the external_group_identifiers_ranges of this TsctsfInfo.


        :param external_group_identifiers_ranges: The external_group_identifiers_ranges of this TsctsfInfo.
        :type external_group_identifiers_ranges: List[IdentityRange]
        """
        if external_group_identifiers_ranges is not None and len(external_group_identifiers_ranges) < 1:
            raise ValueError("Invalid value for `external_group_identifiers_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._external_group_identifiers_ranges = external_group_identifiers_ranges

    @property
    def supi_ranges(self):
        """Gets the supi_ranges of this TsctsfInfo.


        :return: The supi_ranges of this TsctsfInfo.
        :rtype: List[SupiRange]
        """
        return self._supi_ranges

    @supi_ranges.setter
    def supi_ranges(self, supi_ranges):
        """Sets the supi_ranges of this TsctsfInfo.


        :param supi_ranges: The supi_ranges of this TsctsfInfo.
        :type supi_ranges: List[SupiRange]
        """
        if supi_ranges is not None and len(supi_ranges) < 1:
            raise ValueError("Invalid value for `supi_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._supi_ranges = supi_ranges

    @property
    def gpsi_ranges(self):
        """Gets the gpsi_ranges of this TsctsfInfo.


        :return: The gpsi_ranges of this TsctsfInfo.
        :rtype: List[IdentityRange]
        """
        return self._gpsi_ranges

    @gpsi_ranges.setter
    def gpsi_ranges(self, gpsi_ranges):
        """Sets the gpsi_ranges of this TsctsfInfo.


        :param gpsi_ranges: The gpsi_ranges of this TsctsfInfo.
        :type gpsi_ranges: List[IdentityRange]
        """
        if gpsi_ranges is not None and len(gpsi_ranges) < 1:
            raise ValueError("Invalid value for `gpsi_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._gpsi_ranges = gpsi_ranges

    @property
    def internal_group_identifiers_ranges(self):
        """Gets the internal_group_identifiers_ranges of this TsctsfInfo.


        :return: The internal_group_identifiers_ranges of this TsctsfInfo.
        :rtype: List[InternalGroupIdRange]
        """
        return self._internal_group_identifiers_ranges

    @internal_group_identifiers_ranges.setter
    def internal_group_identifiers_ranges(self, internal_group_identifiers_ranges):
        """Sets the internal_group_identifiers_ranges of this TsctsfInfo.


        :param internal_group_identifiers_ranges: The internal_group_identifiers_ranges of this TsctsfInfo.
        :type internal_group_identifiers_ranges: List[InternalGroupIdRange]
        """
        if internal_group_identifiers_ranges is not None and len(internal_group_identifiers_ranges) < 1:
            raise ValueError("Invalid value for `internal_group_identifiers_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._internal_group_identifiers_ranges = internal_group_identifiers_ranges
