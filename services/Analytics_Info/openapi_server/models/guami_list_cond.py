# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.guami import Guami
from openapi_server import util

from openapi_server.models.guami import Guami  # noqa: E501

class GuamiListCond(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, guami_list=None):  # noqa: E501
        """GuamiListCond - a model defined in OpenAPI

        :param guami_list: The guami_list of this GuamiListCond.  # noqa: E501
        :type guami_list: List[Guami]
        """
        self.openapi_types = {
            'guami_list': List[Guami]
        }

        self.attribute_map = {
            'guami_list': 'guamiList'
        }

        self._guami_list = guami_list

    @classmethod
    def from_dict(cls, dikt) -> 'GuamiListCond':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GuamiListCond of this GuamiListCond.  # noqa: E501
        :rtype: GuamiListCond
        """
        return util.deserialize_model(dikt, cls)

    @property
    def guami_list(self):
        """Gets the guami_list of this GuamiListCond.


        :return: The guami_list of this GuamiListCond.
        :rtype: List[Guami]
        """
        return self._guami_list

    @guami_list.setter
    def guami_list(self, guami_list):
        """Sets the guami_list of this GuamiListCond.


        :param guami_list: The guami_list of this GuamiListCond.
        :type guami_list: List[Guami]
        """
        if guami_list is None:
            raise ValueError("Invalid value for `guami_list`, must not be `None`")  # noqa: E501

        self._guami_list = guami_list
