# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.hss_info import HssInfo
from openapi_server.models.identity_range import IdentityRange
from openapi_server.models.imsi_range import ImsiRange
from openapi_server.models.network_node_diameter_address import NetworkNodeDiameterAddress
from openapi_server import util

from openapi_server.models.hss_info import HssInfo  # noqa: E501
from openapi_server.models.identity_range import IdentityRange  # noqa: E501
from openapi_server.models.imsi_range import ImsiRange  # noqa: E501
from openapi_server.models.network_node_diameter_address import NetworkNodeDiameterAddress  # noqa: E501

class NrfInfoServedHssInfoListValueValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_id=None, imsi_ranges=None, ims_private_identity_ranges=None, ims_public_identity_ranges=None, msisdn_ranges=None, external_group_identifiers_ranges=None, hss_diameter_address=None, additional_diam_addresses=None):  # noqa: E501
        """NrfInfoServedHssInfoListValueValue - a model defined in OpenAPI

        :param group_id: The group_id of this NrfInfoServedHssInfoListValueValue.  # noqa: E501
        :type group_id: str
        :param imsi_ranges: The imsi_ranges of this NrfInfoServedHssInfoListValueValue.  # noqa: E501
        :type imsi_ranges: List[ImsiRange]
        :param ims_private_identity_ranges: The ims_private_identity_ranges of this NrfInfoServedHssInfoListValueValue.  # noqa: E501
        :type ims_private_identity_ranges: List[IdentityRange]
        :param ims_public_identity_ranges: The ims_public_identity_ranges of this NrfInfoServedHssInfoListValueValue.  # noqa: E501
        :type ims_public_identity_ranges: List[IdentityRange]
        :param msisdn_ranges: The msisdn_ranges of this NrfInfoServedHssInfoListValueValue.  # noqa: E501
        :type msisdn_ranges: List[IdentityRange]
        :param external_group_identifiers_ranges: The external_group_identifiers_ranges of this NrfInfoServedHssInfoListValueValue.  # noqa: E501
        :type external_group_identifiers_ranges: List[IdentityRange]
        :param hss_diameter_address: The hss_diameter_address of this NrfInfoServedHssInfoListValueValue.  # noqa: E501
        :type hss_diameter_address: NetworkNodeDiameterAddress
        :param additional_diam_addresses: The additional_diam_addresses of this NrfInfoServedHssInfoListValueValue.  # noqa: E501
        :type additional_diam_addresses: List[NetworkNodeDiameterAddress]
        """
        self.openapi_types = {
            'group_id': str,
            'imsi_ranges': List[ImsiRange],
            'ims_private_identity_ranges': List[IdentityRange],
            'ims_public_identity_ranges': List[IdentityRange],
            'msisdn_ranges': List[IdentityRange],
            'external_group_identifiers_ranges': List[IdentityRange],
            'hss_diameter_address': NetworkNodeDiameterAddress,
            'additional_diam_addresses': List[NetworkNodeDiameterAddress]
        }

        self.attribute_map = {
            'group_id': 'groupId',
            'imsi_ranges': 'imsiRanges',
            'ims_private_identity_ranges': 'imsPrivateIdentityRanges',
            'ims_public_identity_ranges': 'imsPublicIdentityRanges',
            'msisdn_ranges': 'msisdnRanges',
            'external_group_identifiers_ranges': 'externalGroupIdentifiersRanges',
            'hss_diameter_address': 'hssDiameterAddress',
            'additional_diam_addresses': 'additionalDiamAddresses'
        }

        self._group_id = group_id
        self._imsi_ranges = imsi_ranges
        self._ims_private_identity_ranges = ims_private_identity_ranges
        self._ims_public_identity_ranges = ims_public_identity_ranges
        self._msisdn_ranges = msisdn_ranges
        self._external_group_identifiers_ranges = external_group_identifiers_ranges
        self._hss_diameter_address = hss_diameter_address
        self._additional_diam_addresses = additional_diam_addresses

    @classmethod
    def from_dict(cls, dikt) -> 'NrfInfoServedHssInfoListValueValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NrfInfo_servedHssInfoList_value_value of this NrfInfoServedHssInfoListValueValue.  # noqa: E501
        :rtype: NrfInfoServedHssInfoListValueValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id(self):
        """Gets the group_id of this NrfInfoServedHssInfoListValueValue.

        Identifier of a group of NFs.  # noqa: E501

        :return: The group_id of this NrfInfoServedHssInfoListValueValue.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this NrfInfoServedHssInfoListValueValue.

        Identifier of a group of NFs.  # noqa: E501

        :param group_id: The group_id of this NrfInfoServedHssInfoListValueValue.
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def imsi_ranges(self):
        """Gets the imsi_ranges of this NrfInfoServedHssInfoListValueValue.


        :return: The imsi_ranges of this NrfInfoServedHssInfoListValueValue.
        :rtype: List[ImsiRange]
        """
        return self._imsi_ranges

    @imsi_ranges.setter
    def imsi_ranges(self, imsi_ranges):
        """Sets the imsi_ranges of this NrfInfoServedHssInfoListValueValue.


        :param imsi_ranges: The imsi_ranges of this NrfInfoServedHssInfoListValueValue.
        :type imsi_ranges: List[ImsiRange]
        """
        if imsi_ranges is not None and len(imsi_ranges) < 1:
            raise ValueError("Invalid value for `imsi_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._imsi_ranges = imsi_ranges

    @property
    def ims_private_identity_ranges(self):
        """Gets the ims_private_identity_ranges of this NrfInfoServedHssInfoListValueValue.


        :return: The ims_private_identity_ranges of this NrfInfoServedHssInfoListValueValue.
        :rtype: List[IdentityRange]
        """
        return self._ims_private_identity_ranges

    @ims_private_identity_ranges.setter
    def ims_private_identity_ranges(self, ims_private_identity_ranges):
        """Sets the ims_private_identity_ranges of this NrfInfoServedHssInfoListValueValue.


        :param ims_private_identity_ranges: The ims_private_identity_ranges of this NrfInfoServedHssInfoListValueValue.
        :type ims_private_identity_ranges: List[IdentityRange]
        """
        if ims_private_identity_ranges is not None and len(ims_private_identity_ranges) < 1:
            raise ValueError("Invalid value for `ims_private_identity_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ims_private_identity_ranges = ims_private_identity_ranges

    @property
    def ims_public_identity_ranges(self):
        """Gets the ims_public_identity_ranges of this NrfInfoServedHssInfoListValueValue.


        :return: The ims_public_identity_ranges of this NrfInfoServedHssInfoListValueValue.
        :rtype: List[IdentityRange]
        """
        return self._ims_public_identity_ranges

    @ims_public_identity_ranges.setter
    def ims_public_identity_ranges(self, ims_public_identity_ranges):
        """Sets the ims_public_identity_ranges of this NrfInfoServedHssInfoListValueValue.


        :param ims_public_identity_ranges: The ims_public_identity_ranges of this NrfInfoServedHssInfoListValueValue.
        :type ims_public_identity_ranges: List[IdentityRange]
        """
        if ims_public_identity_ranges is not None and len(ims_public_identity_ranges) < 1:
            raise ValueError("Invalid value for `ims_public_identity_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ims_public_identity_ranges = ims_public_identity_ranges

    @property
    def msisdn_ranges(self):
        """Gets the msisdn_ranges of this NrfInfoServedHssInfoListValueValue.


        :return: The msisdn_ranges of this NrfInfoServedHssInfoListValueValue.
        :rtype: List[IdentityRange]
        """
        return self._msisdn_ranges

    @msisdn_ranges.setter
    def msisdn_ranges(self, msisdn_ranges):
        """Sets the msisdn_ranges of this NrfInfoServedHssInfoListValueValue.


        :param msisdn_ranges: The msisdn_ranges of this NrfInfoServedHssInfoListValueValue.
        :type msisdn_ranges: List[IdentityRange]
        """
        if msisdn_ranges is not None and len(msisdn_ranges) < 1:
            raise ValueError("Invalid value for `msisdn_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._msisdn_ranges = msisdn_ranges

    @property
    def external_group_identifiers_ranges(self):
        """Gets the external_group_identifiers_ranges of this NrfInfoServedHssInfoListValueValue.


        :return: The external_group_identifiers_ranges of this NrfInfoServedHssInfoListValueValue.
        :rtype: List[IdentityRange]
        """
        return self._external_group_identifiers_ranges

    @external_group_identifiers_ranges.setter
    def external_group_identifiers_ranges(self, external_group_identifiers_ranges):
        """Sets the external_group_identifiers_ranges of this NrfInfoServedHssInfoListValueValue.


        :param external_group_identifiers_ranges: The external_group_identifiers_ranges of this NrfInfoServedHssInfoListValueValue.
        :type external_group_identifiers_ranges: List[IdentityRange]
        """
        if external_group_identifiers_ranges is not None and len(external_group_identifiers_ranges) < 1:
            raise ValueError("Invalid value for `external_group_identifiers_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._external_group_identifiers_ranges = external_group_identifiers_ranges

    @property
    def hss_diameter_address(self):
        """Gets the hss_diameter_address of this NrfInfoServedHssInfoListValueValue.


        :return: The hss_diameter_address of this NrfInfoServedHssInfoListValueValue.
        :rtype: NetworkNodeDiameterAddress
        """
        return self._hss_diameter_address

    @hss_diameter_address.setter
    def hss_diameter_address(self, hss_diameter_address):
        """Sets the hss_diameter_address of this NrfInfoServedHssInfoListValueValue.


        :param hss_diameter_address: The hss_diameter_address of this NrfInfoServedHssInfoListValueValue.
        :type hss_diameter_address: NetworkNodeDiameterAddress
        """

        self._hss_diameter_address = hss_diameter_address

    @property
    def additional_diam_addresses(self):
        """Gets the additional_diam_addresses of this NrfInfoServedHssInfoListValueValue.


        :return: The additional_diam_addresses of this NrfInfoServedHssInfoListValueValue.
        :rtype: List[NetworkNodeDiameterAddress]
        """
        return self._additional_diam_addresses

    @additional_diam_addresses.setter
    def additional_diam_addresses(self, additional_diam_addresses):
        """Sets the additional_diam_addresses of this NrfInfoServedHssInfoListValueValue.


        :param additional_diam_addresses: The additional_diam_addresses of this NrfInfoServedHssInfoListValueValue.
        :type additional_diam_addresses: List[NetworkNodeDiameterAddress]
        """
        if additional_diam_addresses is not None and len(additional_diam_addresses) < 1:
            raise ValueError("Invalid value for `additional_diam_addresses`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._additional_diam_addresses = additional_diam_addresses
