# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class NfInstanceIdCond(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nf_instance_id=None):  # noqa: E501
        """NfInstanceIdCond - a model defined in OpenAPI

        :param nf_instance_id: The nf_instance_id of this NfInstanceIdCond.  # noqa: E501
        :type nf_instance_id: str
        """
        self.openapi_types = {
            'nf_instance_id': str
        }

        self.attribute_map = {
            'nf_instance_id': 'nfInstanceId'
        }

        self._nf_instance_id = nf_instance_id

    @classmethod
    def from_dict(cls, dikt) -> 'NfInstanceIdCond':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NfInstanceIdCond of this NfInstanceIdCond.  # noqa: E501
        :rtype: NfInstanceIdCond
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nf_instance_id(self):
        """Gets the nf_instance_id of this NfInstanceIdCond.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :return: The nf_instance_id of this NfInstanceIdCond.
        :rtype: str
        """
        return self._nf_instance_id

    @nf_instance_id.setter
    def nf_instance_id(self, nf_instance_id):
        """Sets the nf_instance_id of this NfInstanceIdCond.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :param nf_instance_id: The nf_instance_id of this NfInstanceIdCond.
        :type nf_instance_id: str
        """
        if nf_instance_id is None:
            raise ValueError("Invalid value for `nf_instance_id`, must not be `None`")  # noqa: E501

        self._nf_instance_id = nf_instance_id
