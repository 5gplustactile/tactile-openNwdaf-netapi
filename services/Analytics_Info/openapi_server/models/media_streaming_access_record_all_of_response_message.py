# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class MediaStreamingAccessRecordAllOfResponseMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, response_code=None, size=None, body_size=None, content_type=None):  # noqa: E501
        """MediaStreamingAccessRecordAllOfResponseMessage - a model defined in OpenAPI

        :param response_code: The response_code of this MediaStreamingAccessRecordAllOfResponseMessage.  # noqa: E501
        :type response_code: int
        :param size: The size of this MediaStreamingAccessRecordAllOfResponseMessage.  # noqa: E501
        :type size: int
        :param body_size: The body_size of this MediaStreamingAccessRecordAllOfResponseMessage.  # noqa: E501
        :type body_size: int
        :param content_type: The content_type of this MediaStreamingAccessRecordAllOfResponseMessage.  # noqa: E501
        :type content_type: str
        """
        self.openapi_types = {
            'response_code': int,
            'size': int,
            'body_size': int,
            'content_type': str
        }

        self.attribute_map = {
            'response_code': 'responseCode',
            'size': 'size',
            'body_size': 'bodySize',
            'content_type': 'contentType'
        }

        self._response_code = response_code
        self._size = size
        self._body_size = body_size
        self._content_type = content_type

    @classmethod
    def from_dict(cls, dikt) -> 'MediaStreamingAccessRecordAllOfResponseMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MediaStreamingAccessRecord_allOf_responseMessage of this MediaStreamingAccessRecordAllOfResponseMessage.  # noqa: E501
        :rtype: MediaStreamingAccessRecordAllOfResponseMessage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def response_code(self):
        """Gets the response_code of this MediaStreamingAccessRecordAllOfResponseMessage.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The response_code of this MediaStreamingAccessRecordAllOfResponseMessage.
        :rtype: int
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this MediaStreamingAccessRecordAllOfResponseMessage.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param response_code: The response_code of this MediaStreamingAccessRecordAllOfResponseMessage.
        :type response_code: int
        """
        if response_code is None:
            raise ValueError("Invalid value for `response_code`, must not be `None`")  # noqa: E501
        if response_code is not None and response_code < 0:  # noqa: E501
            raise ValueError("Invalid value for `response_code`, must be a value greater than or equal to `0`")  # noqa: E501

        self._response_code = response_code

    @property
    def size(self):
        """Gets the size of this MediaStreamingAccessRecordAllOfResponseMessage.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The size of this MediaStreamingAccessRecordAllOfResponseMessage.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this MediaStreamingAccessRecordAllOfResponseMessage.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param size: The size of this MediaStreamingAccessRecordAllOfResponseMessage.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501
        if size is not None and size < 0:  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._size = size

    @property
    def body_size(self):
        """Gets the body_size of this MediaStreamingAccessRecordAllOfResponseMessage.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The body_size of this MediaStreamingAccessRecordAllOfResponseMessage.
        :rtype: int
        """
        return self._body_size

    @body_size.setter
    def body_size(self, body_size):
        """Sets the body_size of this MediaStreamingAccessRecordAllOfResponseMessage.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param body_size: The body_size of this MediaStreamingAccessRecordAllOfResponseMessage.
        :type body_size: int
        """
        if body_size is None:
            raise ValueError("Invalid value for `body_size`, must not be `None`")  # noqa: E501
        if body_size is not None and body_size < 0:  # noqa: E501
            raise ValueError("Invalid value for `body_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._body_size = body_size

    @property
    def content_type(self):
        """Gets the content_type of this MediaStreamingAccessRecordAllOfResponseMessage.


        :return: The content_type of this MediaStreamingAccessRecordAllOfResponseMessage.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this MediaStreamingAccessRecordAllOfResponseMessage.


        :param content_type: The content_type of this MediaStreamingAccessRecordAllOfResponseMessage.
        :type content_type: str
        """

        self._content_type = content_type
