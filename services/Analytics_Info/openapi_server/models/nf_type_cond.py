# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.nf_type import NFType
from openapi_server import util

from openapi_server.models.nf_type import NFType  # noqa: E501

class NfTypeCond(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nf_type=None):  # noqa: E501
        """NfTypeCond - a model defined in OpenAPI

        :param nf_type: The nf_type of this NfTypeCond.  # noqa: E501
        :type nf_type: NFType
        """
        self.openapi_types = {
            'nf_type': NFType
        }

        self.attribute_map = {
            'nf_type': 'nfType'
        }

        self._nf_type = nf_type

    @classmethod
    def from_dict(cls, dikt) -> 'NfTypeCond':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NfTypeCond of this NfTypeCond.  # noqa: E501
        :rtype: NfTypeCond
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nf_type(self):
        """Gets the nf_type of this NfTypeCond.


        :return: The nf_type of this NfTypeCond.
        :rtype: NFType
        """
        return self._nf_type

    @nf_type.setter
    def nf_type(self, nf_type):
        """Sets the nf_type of this NfTypeCond.


        :param nf_type: The nf_type of this NfTypeCond.
        :type nf_type: NFType
        """
        if nf_type is None:
            raise ValueError("Invalid value for `nf_type`, must not be `None`")  # noqa: E501

        self._nf_type = nf_type
