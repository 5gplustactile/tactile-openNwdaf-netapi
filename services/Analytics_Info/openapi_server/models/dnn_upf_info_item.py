# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.ip_index import IpIndex
from openapi_server.models.ipv4_address_range import Ipv4AddressRange
from openapi_server.models.ipv6_prefix_range import Ipv6PrefixRange
from openapi_server.models.pdu_session_type import PduSessionType
from openapi_server import util

from openapi_server.models.ip_index import IpIndex  # noqa: E501
from openapi_server.models.ipv4_address_range import Ipv4AddressRange  # noqa: E501
from openapi_server.models.ipv6_prefix_range import Ipv6PrefixRange  # noqa: E501
from openapi_server.models.pdu_session_type import PduSessionType  # noqa: E501

class DnnUpfInfoItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dnn=None, dnai_list=None, pdu_session_types=None, ipv4_address_ranges=None, ipv6_prefix_ranges=None, ipv4_index_list=None, ipv6_index_list=None, network_instance=None, dnai_nw_instance_list=None):  # noqa: E501
        """DnnUpfInfoItem - a model defined in OpenAPI

        :param dnn: The dnn of this DnnUpfInfoItem.  # noqa: E501
        :type dnn: str
        :param dnai_list: The dnai_list of this DnnUpfInfoItem.  # noqa: E501
        :type dnai_list: List[str]
        :param pdu_session_types: The pdu_session_types of this DnnUpfInfoItem.  # noqa: E501
        :type pdu_session_types: List[PduSessionType]
        :param ipv4_address_ranges: The ipv4_address_ranges of this DnnUpfInfoItem.  # noqa: E501
        :type ipv4_address_ranges: List[Ipv4AddressRange]
        :param ipv6_prefix_ranges: The ipv6_prefix_ranges of this DnnUpfInfoItem.  # noqa: E501
        :type ipv6_prefix_ranges: List[Ipv6PrefixRange]
        :param ipv4_index_list: The ipv4_index_list of this DnnUpfInfoItem.  # noqa: E501
        :type ipv4_index_list: List[IpIndex]
        :param ipv6_index_list: The ipv6_index_list of this DnnUpfInfoItem.  # noqa: E501
        :type ipv6_index_list: List[IpIndex]
        :param network_instance: The network_instance of this DnnUpfInfoItem.  # noqa: E501
        :type network_instance: str
        :param dnai_nw_instance_list: The dnai_nw_instance_list of this DnnUpfInfoItem.  # noqa: E501
        :type dnai_nw_instance_list: Dict[str, str]
        """
        self.openapi_types = {
            'dnn': str,
            'dnai_list': List[str],
            'pdu_session_types': List[PduSessionType],
            'ipv4_address_ranges': List[Ipv4AddressRange],
            'ipv6_prefix_ranges': List[Ipv6PrefixRange],
            'ipv4_index_list': List[IpIndex],
            'ipv6_index_list': List[IpIndex],
            'network_instance': str,
            'dnai_nw_instance_list': Dict[str, str]
        }

        self.attribute_map = {
            'dnn': 'dnn',
            'dnai_list': 'dnaiList',
            'pdu_session_types': 'pduSessionTypes',
            'ipv4_address_ranges': 'ipv4AddressRanges',
            'ipv6_prefix_ranges': 'ipv6PrefixRanges',
            'ipv4_index_list': 'ipv4IndexList',
            'ipv6_index_list': 'ipv6IndexList',
            'network_instance': 'networkInstance',
            'dnai_nw_instance_list': 'dnaiNwInstanceList'
        }

        self._dnn = dnn
        self._dnai_list = dnai_list
        self._pdu_session_types = pdu_session_types
        self._ipv4_address_ranges = ipv4_address_ranges
        self._ipv6_prefix_ranges = ipv6_prefix_ranges
        self._ipv4_index_list = ipv4_index_list
        self._ipv6_index_list = ipv6_index_list
        self._network_instance = network_instance
        self._dnai_nw_instance_list = dnai_nw_instance_list

    @classmethod
    def from_dict(cls, dikt) -> 'DnnUpfInfoItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DnnUpfInfoItem of this DnnUpfInfoItem.  # noqa: E501
        :rtype: DnnUpfInfoItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dnn(self):
        """Gets the dnn of this DnnUpfInfoItem.

        String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").   # noqa: E501

        :return: The dnn of this DnnUpfInfoItem.
        :rtype: str
        """
        return self._dnn

    @dnn.setter
    def dnn(self, dnn):
        """Sets the dnn of this DnnUpfInfoItem.

        String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \"Label1.Label2.Label3\").   # noqa: E501

        :param dnn: The dnn of this DnnUpfInfoItem.
        :type dnn: str
        """
        if dnn is None:
            raise ValueError("Invalid value for `dnn`, must not be `None`")  # noqa: E501

        self._dnn = dnn

    @property
    def dnai_list(self):
        """Gets the dnai_list of this DnnUpfInfoItem.


        :return: The dnai_list of this DnnUpfInfoItem.
        :rtype: List[str]
        """
        return self._dnai_list

    @dnai_list.setter
    def dnai_list(self, dnai_list):
        """Sets the dnai_list of this DnnUpfInfoItem.


        :param dnai_list: The dnai_list of this DnnUpfInfoItem.
        :type dnai_list: List[str]
        """
        if dnai_list is not None and len(dnai_list) < 1:
            raise ValueError("Invalid value for `dnai_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._dnai_list = dnai_list

    @property
    def pdu_session_types(self):
        """Gets the pdu_session_types of this DnnUpfInfoItem.


        :return: The pdu_session_types of this DnnUpfInfoItem.
        :rtype: List[PduSessionType]
        """
        return self._pdu_session_types

    @pdu_session_types.setter
    def pdu_session_types(self, pdu_session_types):
        """Sets the pdu_session_types of this DnnUpfInfoItem.


        :param pdu_session_types: The pdu_session_types of this DnnUpfInfoItem.
        :type pdu_session_types: List[PduSessionType]
        """
        if pdu_session_types is not None and len(pdu_session_types) < 1:
            raise ValueError("Invalid value for `pdu_session_types`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._pdu_session_types = pdu_session_types

    @property
    def ipv4_address_ranges(self):
        """Gets the ipv4_address_ranges of this DnnUpfInfoItem.


        :return: The ipv4_address_ranges of this DnnUpfInfoItem.
        :rtype: List[Ipv4AddressRange]
        """
        return self._ipv4_address_ranges

    @ipv4_address_ranges.setter
    def ipv4_address_ranges(self, ipv4_address_ranges):
        """Sets the ipv4_address_ranges of this DnnUpfInfoItem.


        :param ipv4_address_ranges: The ipv4_address_ranges of this DnnUpfInfoItem.
        :type ipv4_address_ranges: List[Ipv4AddressRange]
        """
        if ipv4_address_ranges is not None and len(ipv4_address_ranges) < 1:
            raise ValueError("Invalid value for `ipv4_address_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ipv4_address_ranges = ipv4_address_ranges

    @property
    def ipv6_prefix_ranges(self):
        """Gets the ipv6_prefix_ranges of this DnnUpfInfoItem.


        :return: The ipv6_prefix_ranges of this DnnUpfInfoItem.
        :rtype: List[Ipv6PrefixRange]
        """
        return self._ipv6_prefix_ranges

    @ipv6_prefix_ranges.setter
    def ipv6_prefix_ranges(self, ipv6_prefix_ranges):
        """Sets the ipv6_prefix_ranges of this DnnUpfInfoItem.


        :param ipv6_prefix_ranges: The ipv6_prefix_ranges of this DnnUpfInfoItem.
        :type ipv6_prefix_ranges: List[Ipv6PrefixRange]
        """
        if ipv6_prefix_ranges is not None and len(ipv6_prefix_ranges) < 1:
            raise ValueError("Invalid value for `ipv6_prefix_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ipv6_prefix_ranges = ipv6_prefix_ranges

    @property
    def ipv4_index_list(self):
        """Gets the ipv4_index_list of this DnnUpfInfoItem.


        :return: The ipv4_index_list of this DnnUpfInfoItem.
        :rtype: List[IpIndex]
        """
        return self._ipv4_index_list

    @ipv4_index_list.setter
    def ipv4_index_list(self, ipv4_index_list):
        """Sets the ipv4_index_list of this DnnUpfInfoItem.


        :param ipv4_index_list: The ipv4_index_list of this DnnUpfInfoItem.
        :type ipv4_index_list: List[IpIndex]
        """
        if ipv4_index_list is not None and len(ipv4_index_list) < 1:
            raise ValueError("Invalid value for `ipv4_index_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ipv4_index_list = ipv4_index_list

    @property
    def ipv6_index_list(self):
        """Gets the ipv6_index_list of this DnnUpfInfoItem.


        :return: The ipv6_index_list of this DnnUpfInfoItem.
        :rtype: List[IpIndex]
        """
        return self._ipv6_index_list

    @ipv6_index_list.setter
    def ipv6_index_list(self, ipv6_index_list):
        """Sets the ipv6_index_list of this DnnUpfInfoItem.


        :param ipv6_index_list: The ipv6_index_list of this DnnUpfInfoItem.
        :type ipv6_index_list: List[IpIndex]
        """
        if ipv6_index_list is not None and len(ipv6_index_list) < 1:
            raise ValueError("Invalid value for `ipv6_index_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ipv6_index_list = ipv6_index_list

    @property
    def network_instance(self):
        """Gets the network_instance of this DnnUpfInfoItem.

        The N6 Network Instance associated with the S-NSSAI and DNN.   # noqa: E501

        :return: The network_instance of this DnnUpfInfoItem.
        :rtype: str
        """
        return self._network_instance

    @network_instance.setter
    def network_instance(self, network_instance):
        """Sets the network_instance of this DnnUpfInfoItem.

        The N6 Network Instance associated with the S-NSSAI and DNN.   # noqa: E501

        :param network_instance: The network_instance of this DnnUpfInfoItem.
        :type network_instance: str
        """

        self._network_instance = network_instance

    @property
    def dnai_nw_instance_list(self):
        """Gets the dnai_nw_instance_list of this DnnUpfInfoItem.

        Map of network instance per DNAI for the DNN, where the key of the map is the DNAI. When present, the value of each entry of the map shall contain a N6 network instance that is configured for the DNAI indicated by the key.   # noqa: E501

        :return: The dnai_nw_instance_list of this DnnUpfInfoItem.
        :rtype: Dict[str, str]
        """
        return self._dnai_nw_instance_list

    @dnai_nw_instance_list.setter
    def dnai_nw_instance_list(self, dnai_nw_instance_list):
        """Sets the dnai_nw_instance_list of this DnnUpfInfoItem.

        Map of network instance per DNAI for the DNN, where the key of the map is the DNAI. When present, the value of each entry of the map shall contain a N6 network instance that is configured for the DNAI indicated by the key.   # noqa: E501

        :param dnai_nw_instance_list: The dnai_nw_instance_list of this DnnUpfInfoItem.
        :type dnai_nw_instance_list: Dict[str, str]
        """
        if dnai_nw_instance_list is not None and len(dnai_nw_instance_list) < 1:
            raise ValueError("Invalid value for `dnai_nw_instance_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._dnai_nw_instance_list = dnai_nw_instance_list
