# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class NfGroupCond(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nf_type=None, nf_group_id=None):  # noqa: E501
        """NfGroupCond - a model defined in OpenAPI

        :param nf_type: The nf_type of this NfGroupCond.  # noqa: E501
        :type nf_type: str
        :param nf_group_id: The nf_group_id of this NfGroupCond.  # noqa: E501
        :type nf_group_id: str
        """
        self.openapi_types = {
            'nf_type': str,
            'nf_group_id': str
        }

        self.attribute_map = {
            'nf_type': 'nfType',
            'nf_group_id': 'nfGroupId'
        }

        self._nf_type = nf_type
        self._nf_group_id = nf_group_id

    @classmethod
    def from_dict(cls, dikt) -> 'NfGroupCond':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NfGroupCond of this NfGroupCond.  # noqa: E501
        :rtype: NfGroupCond
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nf_type(self):
        """Gets the nf_type of this NfGroupCond.


        :return: The nf_type of this NfGroupCond.
        :rtype: str
        """
        return self._nf_type

    @nf_type.setter
    def nf_type(self, nf_type):
        """Sets the nf_type of this NfGroupCond.


        :param nf_type: The nf_type of this NfGroupCond.
        :type nf_type: str
        """
        allowed_values = ["UDM", "AUSF", "UDR", "PCF", "CHF", "HSS"]  # noqa: E501
        if nf_type not in allowed_values:
            raise ValueError(
                "Invalid value for `nf_type` ({0}), must be one of {1}"
                .format(nf_type, allowed_values)
            )

        self._nf_type = nf_type

    @property
    def nf_group_id(self):
        """Gets the nf_group_id of this NfGroupCond.

        Identifier of a group of NFs.  # noqa: E501

        :return: The nf_group_id of this NfGroupCond.
        :rtype: str
        """
        return self._nf_group_id

    @nf_group_id.setter
    def nf_group_id(self, nf_group_id):
        """Sets the nf_group_id of this NfGroupCond.

        Identifier of a group of NFs.  # noqa: E501

        :param nf_group_id: The nf_group_id of this NfGroupCond.
        :type nf_group_id: str
        """
        if nf_group_id is None:
            raise ValueError("Invalid value for `nf_group_id`, must not be `None`")  # noqa: E501

        self._nf_group_id = nf_group_id
