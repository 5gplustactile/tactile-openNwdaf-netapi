# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class M5QoSSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mar_bw_dl_bit_rate=None, mar_bw_ul_bit_rate=None, min_des_bw_dl_bit_rate=None, min_des_bw_ul_bit_rate=None, mir_bw_dl_bit_rate=None, mir_bw_ul_bit_rate=None, des_latency=None, des_loss=None):  # noqa: E501
        """M5QoSSpecification - a model defined in OpenAPI

        :param mar_bw_dl_bit_rate: The mar_bw_dl_bit_rate of this M5QoSSpecification.  # noqa: E501
        :type mar_bw_dl_bit_rate: str
        :param mar_bw_ul_bit_rate: The mar_bw_ul_bit_rate of this M5QoSSpecification.  # noqa: E501
        :type mar_bw_ul_bit_rate: str
        :param min_des_bw_dl_bit_rate: The min_des_bw_dl_bit_rate of this M5QoSSpecification.  # noqa: E501
        :type min_des_bw_dl_bit_rate: str
        :param min_des_bw_ul_bit_rate: The min_des_bw_ul_bit_rate of this M5QoSSpecification.  # noqa: E501
        :type min_des_bw_ul_bit_rate: str
        :param mir_bw_dl_bit_rate: The mir_bw_dl_bit_rate of this M5QoSSpecification.  # noqa: E501
        :type mir_bw_dl_bit_rate: str
        :param mir_bw_ul_bit_rate: The mir_bw_ul_bit_rate of this M5QoSSpecification.  # noqa: E501
        :type mir_bw_ul_bit_rate: str
        :param des_latency: The des_latency of this M5QoSSpecification.  # noqa: E501
        :type des_latency: int
        :param des_loss: The des_loss of this M5QoSSpecification.  # noqa: E501
        :type des_loss: int
        """
        self.openapi_types = {
            'mar_bw_dl_bit_rate': str,
            'mar_bw_ul_bit_rate': str,
            'min_des_bw_dl_bit_rate': str,
            'min_des_bw_ul_bit_rate': str,
            'mir_bw_dl_bit_rate': str,
            'mir_bw_ul_bit_rate': str,
            'des_latency': int,
            'des_loss': int
        }

        self.attribute_map = {
            'mar_bw_dl_bit_rate': 'marBwDlBitRate',
            'mar_bw_ul_bit_rate': 'marBwUlBitRate',
            'min_des_bw_dl_bit_rate': 'minDesBwDlBitRate',
            'min_des_bw_ul_bit_rate': 'minDesBwUlBitRate',
            'mir_bw_dl_bit_rate': 'mirBwDlBitRate',
            'mir_bw_ul_bit_rate': 'mirBwUlBitRate',
            'des_latency': 'desLatency',
            'des_loss': 'desLoss'
        }

        self._mar_bw_dl_bit_rate = mar_bw_dl_bit_rate
        self._mar_bw_ul_bit_rate = mar_bw_ul_bit_rate
        self._min_des_bw_dl_bit_rate = min_des_bw_dl_bit_rate
        self._min_des_bw_ul_bit_rate = min_des_bw_ul_bit_rate
        self._mir_bw_dl_bit_rate = mir_bw_dl_bit_rate
        self._mir_bw_ul_bit_rate = mir_bw_ul_bit_rate
        self._des_latency = des_latency
        self._des_loss = des_loss

    @classmethod
    def from_dict(cls, dikt) -> 'M5QoSSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The M5QoSSpecification of this M5QoSSpecification.  # noqa: E501
        :rtype: M5QoSSpecification
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mar_bw_dl_bit_rate(self):
        """Gets the mar_bw_dl_bit_rate of this M5QoSSpecification.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :return: The mar_bw_dl_bit_rate of this M5QoSSpecification.
        :rtype: str
        """
        return self._mar_bw_dl_bit_rate

    @mar_bw_dl_bit_rate.setter
    def mar_bw_dl_bit_rate(self, mar_bw_dl_bit_rate):
        """Sets the mar_bw_dl_bit_rate of this M5QoSSpecification.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :param mar_bw_dl_bit_rate: The mar_bw_dl_bit_rate of this M5QoSSpecification.
        :type mar_bw_dl_bit_rate: str
        """
        if mar_bw_dl_bit_rate is None:
            raise ValueError("Invalid value for `mar_bw_dl_bit_rate`, must not be `None`")  # noqa: E501
        if mar_bw_dl_bit_rate is not None and not re.search(r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$', mar_bw_dl_bit_rate):  # noqa: E501
            raise ValueError("Invalid value for `mar_bw_dl_bit_rate`, must be a follow pattern or equal to `/^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$/`")  # noqa: E501

        self._mar_bw_dl_bit_rate = mar_bw_dl_bit_rate

    @property
    def mar_bw_ul_bit_rate(self):
        """Gets the mar_bw_ul_bit_rate of this M5QoSSpecification.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :return: The mar_bw_ul_bit_rate of this M5QoSSpecification.
        :rtype: str
        """
        return self._mar_bw_ul_bit_rate

    @mar_bw_ul_bit_rate.setter
    def mar_bw_ul_bit_rate(self, mar_bw_ul_bit_rate):
        """Sets the mar_bw_ul_bit_rate of this M5QoSSpecification.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :param mar_bw_ul_bit_rate: The mar_bw_ul_bit_rate of this M5QoSSpecification.
        :type mar_bw_ul_bit_rate: str
        """
        if mar_bw_ul_bit_rate is None:
            raise ValueError("Invalid value for `mar_bw_ul_bit_rate`, must not be `None`")  # noqa: E501
        if mar_bw_ul_bit_rate is not None and not re.search(r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$', mar_bw_ul_bit_rate):  # noqa: E501
            raise ValueError("Invalid value for `mar_bw_ul_bit_rate`, must be a follow pattern or equal to `/^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$/`")  # noqa: E501

        self._mar_bw_ul_bit_rate = mar_bw_ul_bit_rate

    @property
    def min_des_bw_dl_bit_rate(self):
        """Gets the min_des_bw_dl_bit_rate of this M5QoSSpecification.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :return: The min_des_bw_dl_bit_rate of this M5QoSSpecification.
        :rtype: str
        """
        return self._min_des_bw_dl_bit_rate

    @min_des_bw_dl_bit_rate.setter
    def min_des_bw_dl_bit_rate(self, min_des_bw_dl_bit_rate):
        """Sets the min_des_bw_dl_bit_rate of this M5QoSSpecification.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :param min_des_bw_dl_bit_rate: The min_des_bw_dl_bit_rate of this M5QoSSpecification.
        :type min_des_bw_dl_bit_rate: str
        """
        if min_des_bw_dl_bit_rate is not None and not re.search(r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$', min_des_bw_dl_bit_rate):  # noqa: E501
            raise ValueError("Invalid value for `min_des_bw_dl_bit_rate`, must be a follow pattern or equal to `/^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$/`")  # noqa: E501

        self._min_des_bw_dl_bit_rate = min_des_bw_dl_bit_rate

    @property
    def min_des_bw_ul_bit_rate(self):
        """Gets the min_des_bw_ul_bit_rate of this M5QoSSpecification.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :return: The min_des_bw_ul_bit_rate of this M5QoSSpecification.
        :rtype: str
        """
        return self._min_des_bw_ul_bit_rate

    @min_des_bw_ul_bit_rate.setter
    def min_des_bw_ul_bit_rate(self, min_des_bw_ul_bit_rate):
        """Sets the min_des_bw_ul_bit_rate of this M5QoSSpecification.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :param min_des_bw_ul_bit_rate: The min_des_bw_ul_bit_rate of this M5QoSSpecification.
        :type min_des_bw_ul_bit_rate: str
        """
        if min_des_bw_ul_bit_rate is not None and not re.search(r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$', min_des_bw_ul_bit_rate):  # noqa: E501
            raise ValueError("Invalid value for `min_des_bw_ul_bit_rate`, must be a follow pattern or equal to `/^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$/`")  # noqa: E501

        self._min_des_bw_ul_bit_rate = min_des_bw_ul_bit_rate

    @property
    def mir_bw_dl_bit_rate(self):
        """Gets the mir_bw_dl_bit_rate of this M5QoSSpecification.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :return: The mir_bw_dl_bit_rate of this M5QoSSpecification.
        :rtype: str
        """
        return self._mir_bw_dl_bit_rate

    @mir_bw_dl_bit_rate.setter
    def mir_bw_dl_bit_rate(self, mir_bw_dl_bit_rate):
        """Sets the mir_bw_dl_bit_rate of this M5QoSSpecification.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :param mir_bw_dl_bit_rate: The mir_bw_dl_bit_rate of this M5QoSSpecification.
        :type mir_bw_dl_bit_rate: str
        """
        if mir_bw_dl_bit_rate is None:
            raise ValueError("Invalid value for `mir_bw_dl_bit_rate`, must not be `None`")  # noqa: E501
        if mir_bw_dl_bit_rate is not None and not re.search(r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$', mir_bw_dl_bit_rate):  # noqa: E501
            raise ValueError("Invalid value for `mir_bw_dl_bit_rate`, must be a follow pattern or equal to `/^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$/`")  # noqa: E501

        self._mir_bw_dl_bit_rate = mir_bw_dl_bit_rate

    @property
    def mir_bw_ul_bit_rate(self):
        """Gets the mir_bw_ul_bit_rate of this M5QoSSpecification.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :return: The mir_bw_ul_bit_rate of this M5QoSSpecification.
        :rtype: str
        """
        return self._mir_bw_ul_bit_rate

    @mir_bw_ul_bit_rate.setter
    def mir_bw_ul_bit_rate(self, mir_bw_ul_bit_rate):
        """Sets the mir_bw_ul_bit_rate of this M5QoSSpecification.

        String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\".   # noqa: E501

        :param mir_bw_ul_bit_rate: The mir_bw_ul_bit_rate of this M5QoSSpecification.
        :type mir_bw_ul_bit_rate: str
        """
        if mir_bw_ul_bit_rate is None:
            raise ValueError("Invalid value for `mir_bw_ul_bit_rate`, must not be `None`")  # noqa: E501
        if mir_bw_ul_bit_rate is not None and not re.search(r'^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$', mir_bw_ul_bit_rate):  # noqa: E501
            raise ValueError("Invalid value for `mir_bw_ul_bit_rate`, must be a follow pattern or equal to `/^\d+(\.\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$/`")  # noqa: E501

        self._mir_bw_ul_bit_rate = mir_bw_ul_bit_rate

    @property
    def des_latency(self):
        """Gets the des_latency of this M5QoSSpecification.


        :return: The des_latency of this M5QoSSpecification.
        :rtype: int
        """
        return self._des_latency

    @des_latency.setter
    def des_latency(self, des_latency):
        """Sets the des_latency of this M5QoSSpecification.


        :param des_latency: The des_latency of this M5QoSSpecification.
        :type des_latency: int
        """
        if des_latency is not None and des_latency < 0:  # noqa: E501
            raise ValueError("Invalid value for `des_latency`, must be a value greater than or equal to `0`")  # noqa: E501

        self._des_latency = des_latency

    @property
    def des_loss(self):
        """Gets the des_loss of this M5QoSSpecification.


        :return: The des_loss of this M5QoSSpecification.
        :rtype: int
        """
        return self._des_loss

    @des_loss.setter
    def des_loss(self, des_loss):
        """Sets the des_loss of this M5QoSSpecification.


        :param des_loss: The des_loss of this M5QoSSpecification.
        :type des_loss: int
        """
        if des_loss is not None and des_loss < 0:  # noqa: E501
            raise ValueError("Invalid value for `des_loss`, must be a value greater than or equal to `0`")  # noqa: E501

        self._des_loss = des_loss
