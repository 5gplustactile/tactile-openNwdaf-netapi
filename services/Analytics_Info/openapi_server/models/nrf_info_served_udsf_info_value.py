# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.identity_range import IdentityRange
from openapi_server.models.supi_range import SupiRange
from openapi_server.models.udsf_info import UdsfInfo
from openapi_server import util

from openapi_server.models.identity_range import IdentityRange  # noqa: E501
from openapi_server.models.supi_range import SupiRange  # noqa: E501
from openapi_server.models.udsf_info import UdsfInfo  # noqa: E501

class NrfInfoServedUdsfInfoValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_id=None, supi_ranges=None, storage_id_ranges=None):  # noqa: E501
        """NrfInfoServedUdsfInfoValue - a model defined in OpenAPI

        :param group_id: The group_id of this NrfInfoServedUdsfInfoValue.  # noqa: E501
        :type group_id: str
        :param supi_ranges: The supi_ranges of this NrfInfoServedUdsfInfoValue.  # noqa: E501
        :type supi_ranges: List[SupiRange]
        :param storage_id_ranges: The storage_id_ranges of this NrfInfoServedUdsfInfoValue.  # noqa: E501
        :type storage_id_ranges: Dict[str, List[IdentityRange]]
        """
        self.openapi_types = {
            'group_id': str,
            'supi_ranges': List[SupiRange],
            'storage_id_ranges': Dict[str, List[IdentityRange]]
        }

        self.attribute_map = {
            'group_id': 'groupId',
            'supi_ranges': 'supiRanges',
            'storage_id_ranges': 'storageIdRanges'
        }

        self._group_id = group_id
        self._supi_ranges = supi_ranges
        self._storage_id_ranges = storage_id_ranges

    @classmethod
    def from_dict(cls, dikt) -> 'NrfInfoServedUdsfInfoValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NrfInfo_servedUdsfInfo_value of this NrfInfoServedUdsfInfoValue.  # noqa: E501
        :rtype: NrfInfoServedUdsfInfoValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id(self):
        """Gets the group_id of this NrfInfoServedUdsfInfoValue.

        Identifier of a group of NFs.  # noqa: E501

        :return: The group_id of this NrfInfoServedUdsfInfoValue.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this NrfInfoServedUdsfInfoValue.

        Identifier of a group of NFs.  # noqa: E501

        :param group_id: The group_id of this NrfInfoServedUdsfInfoValue.
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def supi_ranges(self):
        """Gets the supi_ranges of this NrfInfoServedUdsfInfoValue.


        :return: The supi_ranges of this NrfInfoServedUdsfInfoValue.
        :rtype: List[SupiRange]
        """
        return self._supi_ranges

    @supi_ranges.setter
    def supi_ranges(self, supi_ranges):
        """Sets the supi_ranges of this NrfInfoServedUdsfInfoValue.


        :param supi_ranges: The supi_ranges of this NrfInfoServedUdsfInfoValue.
        :type supi_ranges: List[SupiRange]
        """
        if supi_ranges is not None and len(supi_ranges) < 1:
            raise ValueError("Invalid value for `supi_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._supi_ranges = supi_ranges

    @property
    def storage_id_ranges(self):
        """Gets the storage_id_ranges of this NrfInfoServedUdsfInfoValue.

        A map (list of key-value pairs) where realmId serves as key and each value in the map is an array of IdentityRanges. Each IdentityRange is a range of storageIds.   # noqa: E501

        :return: The storage_id_ranges of this NrfInfoServedUdsfInfoValue.
        :rtype: Dict[str, List[IdentityRange]]
        """
        return self._storage_id_ranges

    @storage_id_ranges.setter
    def storage_id_ranges(self, storage_id_ranges):
        """Sets the storage_id_ranges of this NrfInfoServedUdsfInfoValue.

        A map (list of key-value pairs) where realmId serves as key and each value in the map is an array of IdentityRanges. Each IdentityRange is a range of storageIds.   # noqa: E501

        :param storage_id_ranges: The storage_id_ranges of this NrfInfoServedUdsfInfoValue.
        :type storage_id_ranges: Dict[str, List[IdentityRange]]
        """
        if storage_id_ranges is not None and len(storage_id_ranges) < 1:
            raise ValueError("Invalid value for `storage_id_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._storage_id_ranges = storage_id_ranges
