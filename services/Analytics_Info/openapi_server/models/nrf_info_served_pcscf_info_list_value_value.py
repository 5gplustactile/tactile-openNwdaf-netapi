# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.access_type import AccessType
from openapi_server.models.ipv4_address_range import Ipv4AddressRange
from openapi_server.models.ipv6_addr import Ipv6Addr
from openapi_server.models.ipv6_prefix_range import Ipv6PrefixRange
from openapi_server.models.pcscf_info import PcscfInfo
import re
from openapi_server import util

from openapi_server.models.access_type import AccessType  # noqa: E501
from openapi_server.models.ipv4_address_range import Ipv4AddressRange  # noqa: E501
from openapi_server.models.ipv6_addr import Ipv6Addr  # noqa: E501
from openapi_server.models.ipv6_prefix_range import Ipv6PrefixRange  # noqa: E501
from openapi_server.models.pcscf_info import PcscfInfo  # noqa: E501
import re  # noqa: E501

class NrfInfoServedPcscfInfoListValueValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_type=None, dnn_list=None, gm_fqdn=None, gm_ipv4_addresses=None, gm_ipv6_addresses=None, mw_fqdn=None, mw_ipv4_addresses=None, mw_ipv6_addresses=None, served_ipv4_address_ranges=None, served_ipv6_prefix_ranges=None):  # noqa: E501
        """NrfInfoServedPcscfInfoListValueValue - a model defined in OpenAPI

        :param access_type: The access_type of this NrfInfoServedPcscfInfoListValueValue.  # noqa: E501
        :type access_type: List[AccessType]
        :param dnn_list: The dnn_list of this NrfInfoServedPcscfInfoListValueValue.  # noqa: E501
        :type dnn_list: List[str]
        :param gm_fqdn: The gm_fqdn of this NrfInfoServedPcscfInfoListValueValue.  # noqa: E501
        :type gm_fqdn: str
        :param gm_ipv4_addresses: The gm_ipv4_addresses of this NrfInfoServedPcscfInfoListValueValue.  # noqa: E501
        :type gm_ipv4_addresses: List[str]
        :param gm_ipv6_addresses: The gm_ipv6_addresses of this NrfInfoServedPcscfInfoListValueValue.  # noqa: E501
        :type gm_ipv6_addresses: List[Ipv6Addr]
        :param mw_fqdn: The mw_fqdn of this NrfInfoServedPcscfInfoListValueValue.  # noqa: E501
        :type mw_fqdn: str
        :param mw_ipv4_addresses: The mw_ipv4_addresses of this NrfInfoServedPcscfInfoListValueValue.  # noqa: E501
        :type mw_ipv4_addresses: List[str]
        :param mw_ipv6_addresses: The mw_ipv6_addresses of this NrfInfoServedPcscfInfoListValueValue.  # noqa: E501
        :type mw_ipv6_addresses: List[Ipv6Addr]
        :param served_ipv4_address_ranges: The served_ipv4_address_ranges of this NrfInfoServedPcscfInfoListValueValue.  # noqa: E501
        :type served_ipv4_address_ranges: List[Ipv4AddressRange]
        :param served_ipv6_prefix_ranges: The served_ipv6_prefix_ranges of this NrfInfoServedPcscfInfoListValueValue.  # noqa: E501
        :type served_ipv6_prefix_ranges: List[Ipv6PrefixRange]
        """
        self.openapi_types = {
            'access_type': List[AccessType],
            'dnn_list': List[str],
            'gm_fqdn': str,
            'gm_ipv4_addresses': List[str],
            'gm_ipv6_addresses': List[Ipv6Addr],
            'mw_fqdn': str,
            'mw_ipv4_addresses': List[str],
            'mw_ipv6_addresses': List[Ipv6Addr],
            'served_ipv4_address_ranges': List[Ipv4AddressRange],
            'served_ipv6_prefix_ranges': List[Ipv6PrefixRange]
        }

        self.attribute_map = {
            'access_type': 'accessType',
            'dnn_list': 'dnnList',
            'gm_fqdn': 'gmFqdn',
            'gm_ipv4_addresses': 'gmIpv4Addresses',
            'gm_ipv6_addresses': 'gmIpv6Addresses',
            'mw_fqdn': 'mwFqdn',
            'mw_ipv4_addresses': 'mwIpv4Addresses',
            'mw_ipv6_addresses': 'mwIpv6Addresses',
            'served_ipv4_address_ranges': 'servedIpv4AddressRanges',
            'served_ipv6_prefix_ranges': 'servedIpv6PrefixRanges'
        }

        self._access_type = access_type
        self._dnn_list = dnn_list
        self._gm_fqdn = gm_fqdn
        self._gm_ipv4_addresses = gm_ipv4_addresses
        self._gm_ipv6_addresses = gm_ipv6_addresses
        self._mw_fqdn = mw_fqdn
        self._mw_ipv4_addresses = mw_ipv4_addresses
        self._mw_ipv6_addresses = mw_ipv6_addresses
        self._served_ipv4_address_ranges = served_ipv4_address_ranges
        self._served_ipv6_prefix_ranges = served_ipv6_prefix_ranges

    @classmethod
    def from_dict(cls, dikt) -> 'NrfInfoServedPcscfInfoListValueValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NrfInfo_servedPcscfInfoList_value_value of this NrfInfoServedPcscfInfoListValueValue.  # noqa: E501
        :rtype: NrfInfoServedPcscfInfoListValueValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_type(self):
        """Gets the access_type of this NrfInfoServedPcscfInfoListValueValue.


        :return: The access_type of this NrfInfoServedPcscfInfoListValueValue.
        :rtype: List[AccessType]
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this NrfInfoServedPcscfInfoListValueValue.


        :param access_type: The access_type of this NrfInfoServedPcscfInfoListValueValue.
        :type access_type: List[AccessType]
        """
        if access_type is not None and len(access_type) < 1:
            raise ValueError("Invalid value for `access_type`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._access_type = access_type

    @property
    def dnn_list(self):
        """Gets the dnn_list of this NrfInfoServedPcscfInfoListValueValue.


        :return: The dnn_list of this NrfInfoServedPcscfInfoListValueValue.
        :rtype: List[str]
        """
        return self._dnn_list

    @dnn_list.setter
    def dnn_list(self, dnn_list):
        """Sets the dnn_list of this NrfInfoServedPcscfInfoListValueValue.


        :param dnn_list: The dnn_list of this NrfInfoServedPcscfInfoListValueValue.
        :type dnn_list: List[str]
        """
        if dnn_list is not None and len(dnn_list) < 1:
            raise ValueError("Invalid value for `dnn_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._dnn_list = dnn_list

    @property
    def gm_fqdn(self):
        """Gets the gm_fqdn of this NrfInfoServedPcscfInfoListValueValue.

        Fully Qualified Domain Name  # noqa: E501

        :return: The gm_fqdn of this NrfInfoServedPcscfInfoListValueValue.
        :rtype: str
        """
        return self._gm_fqdn

    @gm_fqdn.setter
    def gm_fqdn(self, gm_fqdn):
        """Sets the gm_fqdn of this NrfInfoServedPcscfInfoListValueValue.

        Fully Qualified Domain Name  # noqa: E501

        :param gm_fqdn: The gm_fqdn of this NrfInfoServedPcscfInfoListValueValue.
        :type gm_fqdn: str
        """
        if gm_fqdn is not None and len(gm_fqdn) > 253:
            raise ValueError("Invalid value for `gm_fqdn`, length must be less than or equal to `253`")  # noqa: E501
        if gm_fqdn is not None and len(gm_fqdn) < 4:
            raise ValueError("Invalid value for `gm_fqdn`, length must be greater than or equal to `4`")  # noqa: E501
        if gm_fqdn is not None and not re.search(r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$', gm_fqdn):  # noqa: E501
            raise ValueError("Invalid value for `gm_fqdn`, must be a follow pattern or equal to `/^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$/`")  # noqa: E501

        self._gm_fqdn = gm_fqdn

    @property
    def gm_ipv4_addresses(self):
        """Gets the gm_ipv4_addresses of this NrfInfoServedPcscfInfoListValueValue.


        :return: The gm_ipv4_addresses of this NrfInfoServedPcscfInfoListValueValue.
        :rtype: List[str]
        """
        return self._gm_ipv4_addresses

    @gm_ipv4_addresses.setter
    def gm_ipv4_addresses(self, gm_ipv4_addresses):
        """Sets the gm_ipv4_addresses of this NrfInfoServedPcscfInfoListValueValue.


        :param gm_ipv4_addresses: The gm_ipv4_addresses of this NrfInfoServedPcscfInfoListValueValue.
        :type gm_ipv4_addresses: List[str]
        """
        if gm_ipv4_addresses is not None and len(gm_ipv4_addresses) < 1:
            raise ValueError("Invalid value for `gm_ipv4_addresses`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._gm_ipv4_addresses = gm_ipv4_addresses

    @property
    def gm_ipv6_addresses(self):
        """Gets the gm_ipv6_addresses of this NrfInfoServedPcscfInfoListValueValue.


        :return: The gm_ipv6_addresses of this NrfInfoServedPcscfInfoListValueValue.
        :rtype: List[Ipv6Addr]
        """
        return self._gm_ipv6_addresses

    @gm_ipv6_addresses.setter
    def gm_ipv6_addresses(self, gm_ipv6_addresses):
        """Sets the gm_ipv6_addresses of this NrfInfoServedPcscfInfoListValueValue.


        :param gm_ipv6_addresses: The gm_ipv6_addresses of this NrfInfoServedPcscfInfoListValueValue.
        :type gm_ipv6_addresses: List[Ipv6Addr]
        """
        if gm_ipv6_addresses is not None and len(gm_ipv6_addresses) < 1:
            raise ValueError("Invalid value for `gm_ipv6_addresses`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._gm_ipv6_addresses = gm_ipv6_addresses

    @property
    def mw_fqdn(self):
        """Gets the mw_fqdn of this NrfInfoServedPcscfInfoListValueValue.

        Fully Qualified Domain Name  # noqa: E501

        :return: The mw_fqdn of this NrfInfoServedPcscfInfoListValueValue.
        :rtype: str
        """
        return self._mw_fqdn

    @mw_fqdn.setter
    def mw_fqdn(self, mw_fqdn):
        """Sets the mw_fqdn of this NrfInfoServedPcscfInfoListValueValue.

        Fully Qualified Domain Name  # noqa: E501

        :param mw_fqdn: The mw_fqdn of this NrfInfoServedPcscfInfoListValueValue.
        :type mw_fqdn: str
        """
        if mw_fqdn is not None and len(mw_fqdn) > 253:
            raise ValueError("Invalid value for `mw_fqdn`, length must be less than or equal to `253`")  # noqa: E501
        if mw_fqdn is not None and len(mw_fqdn) < 4:
            raise ValueError("Invalid value for `mw_fqdn`, length must be greater than or equal to `4`")  # noqa: E501
        if mw_fqdn is not None and not re.search(r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$', mw_fqdn):  # noqa: E501
            raise ValueError("Invalid value for `mw_fqdn`, must be a follow pattern or equal to `/^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$/`")  # noqa: E501

        self._mw_fqdn = mw_fqdn

    @property
    def mw_ipv4_addresses(self):
        """Gets the mw_ipv4_addresses of this NrfInfoServedPcscfInfoListValueValue.


        :return: The mw_ipv4_addresses of this NrfInfoServedPcscfInfoListValueValue.
        :rtype: List[str]
        """
        return self._mw_ipv4_addresses

    @mw_ipv4_addresses.setter
    def mw_ipv4_addresses(self, mw_ipv4_addresses):
        """Sets the mw_ipv4_addresses of this NrfInfoServedPcscfInfoListValueValue.


        :param mw_ipv4_addresses: The mw_ipv4_addresses of this NrfInfoServedPcscfInfoListValueValue.
        :type mw_ipv4_addresses: List[str]
        """
        if mw_ipv4_addresses is not None and len(mw_ipv4_addresses) < 1:
            raise ValueError("Invalid value for `mw_ipv4_addresses`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._mw_ipv4_addresses = mw_ipv4_addresses

    @property
    def mw_ipv6_addresses(self):
        """Gets the mw_ipv6_addresses of this NrfInfoServedPcscfInfoListValueValue.


        :return: The mw_ipv6_addresses of this NrfInfoServedPcscfInfoListValueValue.
        :rtype: List[Ipv6Addr]
        """
        return self._mw_ipv6_addresses

    @mw_ipv6_addresses.setter
    def mw_ipv6_addresses(self, mw_ipv6_addresses):
        """Sets the mw_ipv6_addresses of this NrfInfoServedPcscfInfoListValueValue.


        :param mw_ipv6_addresses: The mw_ipv6_addresses of this NrfInfoServedPcscfInfoListValueValue.
        :type mw_ipv6_addresses: List[Ipv6Addr]
        """
        if mw_ipv6_addresses is not None and len(mw_ipv6_addresses) < 1:
            raise ValueError("Invalid value for `mw_ipv6_addresses`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._mw_ipv6_addresses = mw_ipv6_addresses

    @property
    def served_ipv4_address_ranges(self):
        """Gets the served_ipv4_address_ranges of this NrfInfoServedPcscfInfoListValueValue.


        :return: The served_ipv4_address_ranges of this NrfInfoServedPcscfInfoListValueValue.
        :rtype: List[Ipv4AddressRange]
        """
        return self._served_ipv4_address_ranges

    @served_ipv4_address_ranges.setter
    def served_ipv4_address_ranges(self, served_ipv4_address_ranges):
        """Sets the served_ipv4_address_ranges of this NrfInfoServedPcscfInfoListValueValue.


        :param served_ipv4_address_ranges: The served_ipv4_address_ranges of this NrfInfoServedPcscfInfoListValueValue.
        :type served_ipv4_address_ranges: List[Ipv4AddressRange]
        """
        if served_ipv4_address_ranges is not None and len(served_ipv4_address_ranges) < 1:
            raise ValueError("Invalid value for `served_ipv4_address_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._served_ipv4_address_ranges = served_ipv4_address_ranges

    @property
    def served_ipv6_prefix_ranges(self):
        """Gets the served_ipv6_prefix_ranges of this NrfInfoServedPcscfInfoListValueValue.


        :return: The served_ipv6_prefix_ranges of this NrfInfoServedPcscfInfoListValueValue.
        :rtype: List[Ipv6PrefixRange]
        """
        return self._served_ipv6_prefix_ranges

    @served_ipv6_prefix_ranges.setter
    def served_ipv6_prefix_ranges(self, served_ipv6_prefix_ranges):
        """Sets the served_ipv6_prefix_ranges of this NrfInfoServedPcscfInfoListValueValue.


        :param served_ipv6_prefix_ranges: The served_ipv6_prefix_ranges of this NrfInfoServedPcscfInfoListValueValue.
        :type served_ipv6_prefix_ranges: List[Ipv6PrefixRange]
        """
        if served_ipv6_prefix_ranges is not None and len(served_ipv6_prefix_ranges) < 1:
            raise ValueError("Invalid value for `served_ipv6_prefix_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._served_ipv6_prefix_ranges = served_ipv6_prefix_ranges
