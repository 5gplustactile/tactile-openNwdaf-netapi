# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class NwdafCapability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analytics_aggregation=False, analytics_metadata_provisioning=False):  # noqa: E501
        """NwdafCapability - a model defined in OpenAPI

        :param analytics_aggregation: The analytics_aggregation of this NwdafCapability.  # noqa: E501
        :type analytics_aggregation: bool
        :param analytics_metadata_provisioning: The analytics_metadata_provisioning of this NwdafCapability.  # noqa: E501
        :type analytics_metadata_provisioning: bool
        """
        self.openapi_types = {
            'analytics_aggregation': bool,
            'analytics_metadata_provisioning': bool
        }

        self.attribute_map = {
            'analytics_aggregation': 'analyticsAggregation',
            'analytics_metadata_provisioning': 'analyticsMetadataProvisioning'
        }

        self._analytics_aggregation = analytics_aggregation
        self._analytics_metadata_provisioning = analytics_metadata_provisioning

    @classmethod
    def from_dict(cls, dikt) -> 'NwdafCapability':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NwdafCapability of this NwdafCapability.  # noqa: E501
        :rtype: NwdafCapability
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analytics_aggregation(self):
        """Gets the analytics_aggregation of this NwdafCapability.


        :return: The analytics_aggregation of this NwdafCapability.
        :rtype: bool
        """
        return self._analytics_aggregation

    @analytics_aggregation.setter
    def analytics_aggregation(self, analytics_aggregation):
        """Sets the analytics_aggregation of this NwdafCapability.


        :param analytics_aggregation: The analytics_aggregation of this NwdafCapability.
        :type analytics_aggregation: bool
        """

        self._analytics_aggregation = analytics_aggregation

    @property
    def analytics_metadata_provisioning(self):
        """Gets the analytics_metadata_provisioning of this NwdafCapability.


        :return: The analytics_metadata_provisioning of this NwdafCapability.
        :rtype: bool
        """
        return self._analytics_metadata_provisioning

    @analytics_metadata_provisioning.setter
    def analytics_metadata_provisioning(self, analytics_metadata_provisioning):
        """Sets the analytics_metadata_provisioning of this NwdafCapability.


        :param analytics_metadata_provisioning: The analytics_metadata_provisioning of this NwdafCapability.
        :type analytics_metadata_provisioning: bool
        """

        self._analytics_metadata_provisioning = analytics_metadata_provisioning
