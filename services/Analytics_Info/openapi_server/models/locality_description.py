# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.locality_description_item import LocalityDescriptionItem
from openapi_server.models.locality_type import LocalityType
from openapi_server import util

from openapi_server.models.locality_description_item import LocalityDescriptionItem  # noqa: E501
from openapi_server.models.locality_type import LocalityType  # noqa: E501

class LocalityDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, locality_type=None, locality_value=None, addl_loc_descr_items=None):  # noqa: E501
        """LocalityDescription - a model defined in OpenAPI

        :param locality_type: The locality_type of this LocalityDescription.  # noqa: E501
        :type locality_type: LocalityType
        :param locality_value: The locality_value of this LocalityDescription.  # noqa: E501
        :type locality_value: str
        :param addl_loc_descr_items: The addl_loc_descr_items of this LocalityDescription.  # noqa: E501
        :type addl_loc_descr_items: List[LocalityDescriptionItem]
        """
        self.openapi_types = {
            'locality_type': LocalityType,
            'locality_value': str,
            'addl_loc_descr_items': List[LocalityDescriptionItem]
        }

        self.attribute_map = {
            'locality_type': 'localityType',
            'locality_value': 'localityValue',
            'addl_loc_descr_items': 'addlLocDescrItems'
        }

        self._locality_type = locality_type
        self._locality_value = locality_value
        self._addl_loc_descr_items = addl_loc_descr_items

    @classmethod
    def from_dict(cls, dikt) -> 'LocalityDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LocalityDescription of this LocalityDescription.  # noqa: E501
        :rtype: LocalityDescription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def locality_type(self):
        """Gets the locality_type of this LocalityDescription.


        :return: The locality_type of this LocalityDescription.
        :rtype: LocalityType
        """
        return self._locality_type

    @locality_type.setter
    def locality_type(self, locality_type):
        """Sets the locality_type of this LocalityDescription.


        :param locality_type: The locality_type of this LocalityDescription.
        :type locality_type: LocalityType
        """
        if locality_type is None:
            raise ValueError("Invalid value for `locality_type`, must not be `None`")  # noqa: E501

        self._locality_type = locality_type

    @property
    def locality_value(self):
        """Gets the locality_value of this LocalityDescription.


        :return: The locality_value of this LocalityDescription.
        :rtype: str
        """
        return self._locality_value

    @locality_value.setter
    def locality_value(self, locality_value):
        """Sets the locality_value of this LocalityDescription.


        :param locality_value: The locality_value of this LocalityDescription.
        :type locality_value: str
        """
        if locality_value is None:
            raise ValueError("Invalid value for `locality_value`, must not be `None`")  # noqa: E501

        self._locality_value = locality_value

    @property
    def addl_loc_descr_items(self):
        """Gets the addl_loc_descr_items of this LocalityDescription.


        :return: The addl_loc_descr_items of this LocalityDescription.
        :rtype: List[LocalityDescriptionItem]
        """
        return self._addl_loc_descr_items

    @addl_loc_descr_items.setter
    def addl_loc_descr_items(self, addl_loc_descr_items):
        """Sets the addl_loc_descr_items of this LocalityDescription.


        :param addl_loc_descr_items: The addl_loc_descr_items of this LocalityDescription.
        :type addl_loc_descr_items: List[LocalityDescriptionItem]
        """
        if addl_loc_descr_items is not None and len(addl_loc_descr_items) < 1:
            raise ValueError("Invalid value for `addl_loc_descr_items`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._addl_loc_descr_items = addl_loc_descr_items
