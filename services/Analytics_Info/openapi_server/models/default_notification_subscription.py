# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.def_sub_service_info import DefSubServiceInfo
from openapi_server.models.n1_message_class import N1MessageClass
from openapi_server.models.n2_information_class import N2InformationClass
from openapi_server.models.notification_type import NotificationType
import re
from openapi_server import util

from openapi_server.models.def_sub_service_info import DefSubServiceInfo  # noqa: E501
from openapi_server.models.n1_message_class import N1MessageClass  # noqa: E501
from openapi_server.models.n2_information_class import N2InformationClass  # noqa: E501
from openapi_server.models.notification_type import NotificationType  # noqa: E501
import re  # noqa: E501

class DefaultNotificationSubscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notification_type=None, callback_uri=None, n1_message_class=None, n2_information_class=None, versions=None, binding=None, accepted_encoding=None, supported_features=None, service_info_list=None):  # noqa: E501
        """DefaultNotificationSubscription - a model defined in OpenAPI

        :param notification_type: The notification_type of this DefaultNotificationSubscription.  # noqa: E501
        :type notification_type: NotificationType
        :param callback_uri: The callback_uri of this DefaultNotificationSubscription.  # noqa: E501
        :type callback_uri: str
        :param n1_message_class: The n1_message_class of this DefaultNotificationSubscription.  # noqa: E501
        :type n1_message_class: N1MessageClass
        :param n2_information_class: The n2_information_class of this DefaultNotificationSubscription.  # noqa: E501
        :type n2_information_class: N2InformationClass
        :param versions: The versions of this DefaultNotificationSubscription.  # noqa: E501
        :type versions: List[str]
        :param binding: The binding of this DefaultNotificationSubscription.  # noqa: E501
        :type binding: str
        :param accepted_encoding: The accepted_encoding of this DefaultNotificationSubscription.  # noqa: E501
        :type accepted_encoding: str
        :param supported_features: The supported_features of this DefaultNotificationSubscription.  # noqa: E501
        :type supported_features: str
        :param service_info_list: The service_info_list of this DefaultNotificationSubscription.  # noqa: E501
        :type service_info_list: Dict[str, DefSubServiceInfo]
        """
        self.openapi_types = {
            'notification_type': NotificationType,
            'callback_uri': str,
            'n1_message_class': N1MessageClass,
            'n2_information_class': N2InformationClass,
            'versions': List[str],
            'binding': str,
            'accepted_encoding': str,
            'supported_features': str,
            'service_info_list': Dict[str, DefSubServiceInfo]
        }

        self.attribute_map = {
            'notification_type': 'notificationType',
            'callback_uri': 'callbackUri',
            'n1_message_class': 'n1MessageClass',
            'n2_information_class': 'n2InformationClass',
            'versions': 'versions',
            'binding': 'binding',
            'accepted_encoding': 'acceptedEncoding',
            'supported_features': 'supportedFeatures',
            'service_info_list': 'serviceInfoList'
        }

        self._notification_type = notification_type
        self._callback_uri = callback_uri
        self._n1_message_class = n1_message_class
        self._n2_information_class = n2_information_class
        self._versions = versions
        self._binding = binding
        self._accepted_encoding = accepted_encoding
        self._supported_features = supported_features
        self._service_info_list = service_info_list

    @classmethod
    def from_dict(cls, dikt) -> 'DefaultNotificationSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DefaultNotificationSubscription of this DefaultNotificationSubscription.  # noqa: E501
        :rtype: DefaultNotificationSubscription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notification_type(self):
        """Gets the notification_type of this DefaultNotificationSubscription.


        :return: The notification_type of this DefaultNotificationSubscription.
        :rtype: NotificationType
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this DefaultNotificationSubscription.


        :param notification_type: The notification_type of this DefaultNotificationSubscription.
        :type notification_type: NotificationType
        """
        if notification_type is None:
            raise ValueError("Invalid value for `notification_type`, must not be `None`")  # noqa: E501

        self._notification_type = notification_type

    @property
    def callback_uri(self):
        """Gets the callback_uri of this DefaultNotificationSubscription.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :return: The callback_uri of this DefaultNotificationSubscription.
        :rtype: str
        """
        return self._callback_uri

    @callback_uri.setter
    def callback_uri(self, callback_uri):
        """Sets the callback_uri of this DefaultNotificationSubscription.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :param callback_uri: The callback_uri of this DefaultNotificationSubscription.
        :type callback_uri: str
        """
        if callback_uri is None:
            raise ValueError("Invalid value for `callback_uri`, must not be `None`")  # noqa: E501

        self._callback_uri = callback_uri

    @property
    def n1_message_class(self):
        """Gets the n1_message_class of this DefaultNotificationSubscription.


        :return: The n1_message_class of this DefaultNotificationSubscription.
        :rtype: N1MessageClass
        """
        return self._n1_message_class

    @n1_message_class.setter
    def n1_message_class(self, n1_message_class):
        """Sets the n1_message_class of this DefaultNotificationSubscription.


        :param n1_message_class: The n1_message_class of this DefaultNotificationSubscription.
        :type n1_message_class: N1MessageClass
        """

        self._n1_message_class = n1_message_class

    @property
    def n2_information_class(self):
        """Gets the n2_information_class of this DefaultNotificationSubscription.


        :return: The n2_information_class of this DefaultNotificationSubscription.
        :rtype: N2InformationClass
        """
        return self._n2_information_class

    @n2_information_class.setter
    def n2_information_class(self, n2_information_class):
        """Sets the n2_information_class of this DefaultNotificationSubscription.


        :param n2_information_class: The n2_information_class of this DefaultNotificationSubscription.
        :type n2_information_class: N2InformationClass
        """

        self._n2_information_class = n2_information_class

    @property
    def versions(self):
        """Gets the versions of this DefaultNotificationSubscription.


        :return: The versions of this DefaultNotificationSubscription.
        :rtype: List[str]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this DefaultNotificationSubscription.


        :param versions: The versions of this DefaultNotificationSubscription.
        :type versions: List[str]
        """
        if versions is not None and len(versions) < 1:
            raise ValueError("Invalid value for `versions`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._versions = versions

    @property
    def binding(self):
        """Gets the binding of this DefaultNotificationSubscription.


        :return: The binding of this DefaultNotificationSubscription.
        :rtype: str
        """
        return self._binding

    @binding.setter
    def binding(self, binding):
        """Sets the binding of this DefaultNotificationSubscription.


        :param binding: The binding of this DefaultNotificationSubscription.
        :type binding: str
        """

        self._binding = binding

    @property
    def accepted_encoding(self):
        """Gets the accepted_encoding of this DefaultNotificationSubscription.


        :return: The accepted_encoding of this DefaultNotificationSubscription.
        :rtype: str
        """
        return self._accepted_encoding

    @accepted_encoding.setter
    def accepted_encoding(self, accepted_encoding):
        """Sets the accepted_encoding of this DefaultNotificationSubscription.


        :param accepted_encoding: The accepted_encoding of this DefaultNotificationSubscription.
        :type accepted_encoding: str
        """

        self._accepted_encoding = accepted_encoding

    @property
    def supported_features(self):
        """Gets the supported_features of this DefaultNotificationSubscription.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  tableÂ 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :return: The supported_features of this DefaultNotificationSubscription.
        :rtype: str
        """
        return self._supported_features

    @supported_features.setter
    def supported_features(self, supported_features):
        """Sets the supported_features of this DefaultNotificationSubscription.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  tableÂ 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :param supported_features: The supported_features of this DefaultNotificationSubscription.
        :type supported_features: str
        """
        if supported_features is not None and not re.search(r'^[A-Fa-f0-9]*$', supported_features):  # noqa: E501
            raise ValueError("Invalid value for `supported_features`, must be a follow pattern or equal to `/^[A-Fa-f0-9]*$/`")  # noqa: E501

        self._supported_features = supported_features

    @property
    def service_info_list(self):
        """Gets the service_info_list of this DefaultNotificationSubscription.

        A map of service specific information. The name of the corresponding service (as specified in ServiceName data type) is the key.   # noqa: E501

        :return: The service_info_list of this DefaultNotificationSubscription.
        :rtype: Dict[str, DefSubServiceInfo]
        """
        return self._service_info_list

    @service_info_list.setter
    def service_info_list(self, service_info_list):
        """Sets the service_info_list of this DefaultNotificationSubscription.

        A map of service specific information. The name of the corresponding service (as specified in ServiceName data type) is the key.   # noqa: E501

        :param service_info_list: The service_info_list of this DefaultNotificationSubscription.
        :type service_info_list: Dict[str, DefSubServiceInfo]
        """
        if service_info_list is not None and len(service_info_list) < 1:
            raise ValueError("Invalid value for `service_info_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._service_info_list = service_info_list
