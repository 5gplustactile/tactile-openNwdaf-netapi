# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.ip_end_point import IpEndPoint
import re
from openapi_server import util

from openapi_server.models.ip_end_point import IpEndPoint  # noqa: E501
import re  # noqa: E501

class ScpDomainInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scp_fqdn=None, scp_ip_end_points=None, scp_prefix=None, scp_ports=None):  # noqa: E501
        """ScpDomainInfo - a model defined in OpenAPI

        :param scp_fqdn: The scp_fqdn of this ScpDomainInfo.  # noqa: E501
        :type scp_fqdn: str
        :param scp_ip_end_points: The scp_ip_end_points of this ScpDomainInfo.  # noqa: E501
        :type scp_ip_end_points: List[IpEndPoint]
        :param scp_prefix: The scp_prefix of this ScpDomainInfo.  # noqa: E501
        :type scp_prefix: str
        :param scp_ports: The scp_ports of this ScpDomainInfo.  # noqa: E501
        :type scp_ports: Dict[str, int]
        """
        self.openapi_types = {
            'scp_fqdn': str,
            'scp_ip_end_points': List[IpEndPoint],
            'scp_prefix': str,
            'scp_ports': Dict[str, int]
        }

        self.attribute_map = {
            'scp_fqdn': 'scpFqdn',
            'scp_ip_end_points': 'scpIpEndPoints',
            'scp_prefix': 'scpPrefix',
            'scp_ports': 'scpPorts'
        }

        self._scp_fqdn = scp_fqdn
        self._scp_ip_end_points = scp_ip_end_points
        self._scp_prefix = scp_prefix
        self._scp_ports = scp_ports

    @classmethod
    def from_dict(cls, dikt) -> 'ScpDomainInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ScpDomainInfo of this ScpDomainInfo.  # noqa: E501
        :rtype: ScpDomainInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scp_fqdn(self):
        """Gets the scp_fqdn of this ScpDomainInfo.

        Fully Qualified Domain Name  # noqa: E501

        :return: The scp_fqdn of this ScpDomainInfo.
        :rtype: str
        """
        return self._scp_fqdn

    @scp_fqdn.setter
    def scp_fqdn(self, scp_fqdn):
        """Sets the scp_fqdn of this ScpDomainInfo.

        Fully Qualified Domain Name  # noqa: E501

        :param scp_fqdn: The scp_fqdn of this ScpDomainInfo.
        :type scp_fqdn: str
        """
        if scp_fqdn is not None and len(scp_fqdn) > 253:
            raise ValueError("Invalid value for `scp_fqdn`, length must be less than or equal to `253`")  # noqa: E501
        if scp_fqdn is not None and len(scp_fqdn) < 4:
            raise ValueError("Invalid value for `scp_fqdn`, length must be greater than or equal to `4`")  # noqa: E501
        if scp_fqdn is not None and not re.search(r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$', scp_fqdn):  # noqa: E501
            raise ValueError("Invalid value for `scp_fqdn`, must be a follow pattern or equal to `/^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$/`")  # noqa: E501

        self._scp_fqdn = scp_fqdn

    @property
    def scp_ip_end_points(self):
        """Gets the scp_ip_end_points of this ScpDomainInfo.


        :return: The scp_ip_end_points of this ScpDomainInfo.
        :rtype: List[IpEndPoint]
        """
        return self._scp_ip_end_points

    @scp_ip_end_points.setter
    def scp_ip_end_points(self, scp_ip_end_points):
        """Sets the scp_ip_end_points of this ScpDomainInfo.


        :param scp_ip_end_points: The scp_ip_end_points of this ScpDomainInfo.
        :type scp_ip_end_points: List[IpEndPoint]
        """
        if scp_ip_end_points is not None and len(scp_ip_end_points) < 1:
            raise ValueError("Invalid value for `scp_ip_end_points`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._scp_ip_end_points = scp_ip_end_points

    @property
    def scp_prefix(self):
        """Gets the scp_prefix of this ScpDomainInfo.


        :return: The scp_prefix of this ScpDomainInfo.
        :rtype: str
        """
        return self._scp_prefix

    @scp_prefix.setter
    def scp_prefix(self, scp_prefix):
        """Sets the scp_prefix of this ScpDomainInfo.


        :param scp_prefix: The scp_prefix of this ScpDomainInfo.
        :type scp_prefix: str
        """

        self._scp_prefix = scp_prefix

    @property
    def scp_ports(self):
        """Gets the scp_ports of this ScpDomainInfo.

        Port numbers for HTTP and HTTPS. The key of the map shall be \"http\" or \"https\".   # noqa: E501

        :return: The scp_ports of this ScpDomainInfo.
        :rtype: Dict[str, int]
        """
        return self._scp_ports

    @scp_ports.setter
    def scp_ports(self, scp_ports):
        """Sets the scp_ports of this ScpDomainInfo.

        Port numbers for HTTP and HTTPS. The key of the map shall be \"http\" or \"https\".   # noqa: E501

        :param scp_ports: The scp_ports of this ScpDomainInfo.
        :type scp_ports: Dict[str, int]
        """
        if scp_ports is not None and len(scp_ports) < 1:
            raise ValueError("Invalid value for `scp_ports`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._scp_ports = scp_ports
