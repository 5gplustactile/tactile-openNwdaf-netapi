# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.service_name import ServiceName
from openapi_server import util

from openapi_server.models.service_name import ServiceName  # noqa: E501

class ServiceNameCond(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_name=None):  # noqa: E501
        """ServiceNameCond - a model defined in OpenAPI

        :param service_name: The service_name of this ServiceNameCond.  # noqa: E501
        :type service_name: ServiceName
        """
        self.openapi_types = {
            'service_name': ServiceName
        }

        self.attribute_map = {
            'service_name': 'serviceName'
        }

        self._service_name = service_name

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceNameCond':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceNameCond of this ServiceNameCond.  # noqa: E501
        :rtype: ServiceNameCond
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_name(self):
        """Gets the service_name of this ServiceNameCond.


        :return: The service_name of this ServiceNameCond.
        :rtype: ServiceName
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this ServiceNameCond.


        :param service_name: The service_name of this ServiceNameCond.
        :type service_name: ServiceName
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")  # noqa: E501

        self._service_name = service_name
