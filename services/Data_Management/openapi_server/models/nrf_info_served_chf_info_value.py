# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.chf_info import ChfInfo
from openapi_server.models.identity_range import IdentityRange
from openapi_server.models.plmn_range import PlmnRange
from openapi_server.models.supi_range import SupiRange
from openapi_server import util

from openapi_server.models.chf_info import ChfInfo  # noqa: E501
from openapi_server.models.identity_range import IdentityRange  # noqa: E501
from openapi_server.models.plmn_range import PlmnRange  # noqa: E501
from openapi_server.models.supi_range import SupiRange  # noqa: E501

class NrfInfoServedChfInfoValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, supi_range_list=None, gpsi_range_list=None, plmn_range_list=None, group_id=None, primary_chf_instance=None, secondary_chf_instance=None):  # noqa: E501
        """NrfInfoServedChfInfoValue - a model defined in OpenAPI

        :param supi_range_list: The supi_range_list of this NrfInfoServedChfInfoValue.  # noqa: E501
        :type supi_range_list: List[SupiRange]
        :param gpsi_range_list: The gpsi_range_list of this NrfInfoServedChfInfoValue.  # noqa: E501
        :type gpsi_range_list: List[IdentityRange]
        :param plmn_range_list: The plmn_range_list of this NrfInfoServedChfInfoValue.  # noqa: E501
        :type plmn_range_list: List[PlmnRange]
        :param group_id: The group_id of this NrfInfoServedChfInfoValue.  # noqa: E501
        :type group_id: str
        :param primary_chf_instance: The primary_chf_instance of this NrfInfoServedChfInfoValue.  # noqa: E501
        :type primary_chf_instance: str
        :param secondary_chf_instance: The secondary_chf_instance of this NrfInfoServedChfInfoValue.  # noqa: E501
        :type secondary_chf_instance: str
        """
        self.openapi_types = {
            'supi_range_list': List[SupiRange],
            'gpsi_range_list': List[IdentityRange],
            'plmn_range_list': List[PlmnRange],
            'group_id': str,
            'primary_chf_instance': str,
            'secondary_chf_instance': str
        }

        self.attribute_map = {
            'supi_range_list': 'supiRangeList',
            'gpsi_range_list': 'gpsiRangeList',
            'plmn_range_list': 'plmnRangeList',
            'group_id': 'groupId',
            'primary_chf_instance': 'primaryChfInstance',
            'secondary_chf_instance': 'secondaryChfInstance'
        }

        self._supi_range_list = supi_range_list
        self._gpsi_range_list = gpsi_range_list
        self._plmn_range_list = plmn_range_list
        self._group_id = group_id
        self._primary_chf_instance = primary_chf_instance
        self._secondary_chf_instance = secondary_chf_instance

    @classmethod
    def from_dict(cls, dikt) -> 'NrfInfoServedChfInfoValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NrfInfo_servedChfInfo_value of this NrfInfoServedChfInfoValue.  # noqa: E501
        :rtype: NrfInfoServedChfInfoValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def supi_range_list(self):
        """Gets the supi_range_list of this NrfInfoServedChfInfoValue.


        :return: The supi_range_list of this NrfInfoServedChfInfoValue.
        :rtype: List[SupiRange]
        """
        return self._supi_range_list

    @supi_range_list.setter
    def supi_range_list(self, supi_range_list):
        """Sets the supi_range_list of this NrfInfoServedChfInfoValue.


        :param supi_range_list: The supi_range_list of this NrfInfoServedChfInfoValue.
        :type supi_range_list: List[SupiRange]
        """
        if supi_range_list is not None and len(supi_range_list) < 1:
            raise ValueError("Invalid value for `supi_range_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._supi_range_list = supi_range_list

    @property
    def gpsi_range_list(self):
        """Gets the gpsi_range_list of this NrfInfoServedChfInfoValue.


        :return: The gpsi_range_list of this NrfInfoServedChfInfoValue.
        :rtype: List[IdentityRange]
        """
        return self._gpsi_range_list

    @gpsi_range_list.setter
    def gpsi_range_list(self, gpsi_range_list):
        """Sets the gpsi_range_list of this NrfInfoServedChfInfoValue.


        :param gpsi_range_list: The gpsi_range_list of this NrfInfoServedChfInfoValue.
        :type gpsi_range_list: List[IdentityRange]
        """
        if gpsi_range_list is not None and len(gpsi_range_list) < 1:
            raise ValueError("Invalid value for `gpsi_range_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._gpsi_range_list = gpsi_range_list

    @property
    def plmn_range_list(self):
        """Gets the plmn_range_list of this NrfInfoServedChfInfoValue.


        :return: The plmn_range_list of this NrfInfoServedChfInfoValue.
        :rtype: List[PlmnRange]
        """
        return self._plmn_range_list

    @plmn_range_list.setter
    def plmn_range_list(self, plmn_range_list):
        """Sets the plmn_range_list of this NrfInfoServedChfInfoValue.


        :param plmn_range_list: The plmn_range_list of this NrfInfoServedChfInfoValue.
        :type plmn_range_list: List[PlmnRange]
        """
        if plmn_range_list is not None and len(plmn_range_list) < 1:
            raise ValueError("Invalid value for `plmn_range_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._plmn_range_list = plmn_range_list

    @property
    def group_id(self):
        """Gets the group_id of this NrfInfoServedChfInfoValue.

        Identifier of a group of NFs.  # noqa: E501

        :return: The group_id of this NrfInfoServedChfInfoValue.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this NrfInfoServedChfInfoValue.

        Identifier of a group of NFs.  # noqa: E501

        :param group_id: The group_id of this NrfInfoServedChfInfoValue.
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def primary_chf_instance(self):
        """Gets the primary_chf_instance of this NrfInfoServedChfInfoValue.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :return: The primary_chf_instance of this NrfInfoServedChfInfoValue.
        :rtype: str
        """
        return self._primary_chf_instance

    @primary_chf_instance.setter
    def primary_chf_instance(self, primary_chf_instance):
        """Sets the primary_chf_instance of this NrfInfoServedChfInfoValue.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :param primary_chf_instance: The primary_chf_instance of this NrfInfoServedChfInfoValue.
        :type primary_chf_instance: str
        """

        self._primary_chf_instance = primary_chf_instance

    @property
    def secondary_chf_instance(self):
        """Gets the secondary_chf_instance of this NrfInfoServedChfInfoValue.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :return: The secondary_chf_instance of this NrfInfoServedChfInfoValue.
        :rtype: str
        """
        return self._secondary_chf_instance

    @secondary_chf_instance.setter
    def secondary_chf_instance(self, secondary_chf_instance):
        """Sets the secondary_chf_instance of this NrfInfoServedChfInfoValue.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :param secondary_chf_instance: The secondary_chf_instance of this NrfInfoServedChfInfoValue.
        :type secondary_chf_instance: str
        """

        self._secondary_chf_instance = secondary_chf_instance
