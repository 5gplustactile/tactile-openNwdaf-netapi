# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class NetworkNodeDiameterAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, realm=None):  # noqa: E501
        """NetworkNodeDiameterAddress - a model defined in OpenAPI

        :param name: The name of this NetworkNodeDiameterAddress.  # noqa: E501
        :type name: str
        :param realm: The realm of this NetworkNodeDiameterAddress.  # noqa: E501
        :type realm: str
        """
        self.openapi_types = {
            'name': str,
            'realm': str
        }

        self.attribute_map = {
            'name': 'name',
            'realm': 'realm'
        }

        self._name = name
        self._realm = realm

    @classmethod
    def from_dict(cls, dikt) -> 'NetworkNodeDiameterAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NetworkNodeDiameterAddress of this NetworkNodeDiameterAddress.  # noqa: E501
        :rtype: NetworkNodeDiameterAddress
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this NetworkNodeDiameterAddress.

        Fully Qualified Domain Name  # noqa: E501

        :return: The name of this NetworkNodeDiameterAddress.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetworkNodeDiameterAddress.

        Fully Qualified Domain Name  # noqa: E501

        :param name: The name of this NetworkNodeDiameterAddress.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 253:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `253`")  # noqa: E501
        if name is not None and len(name) < 4:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `4`")  # noqa: E501
        if name is not None and not re.search(r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$', name):  # noqa: E501
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$/`")  # noqa: E501

        self._name = name

    @property
    def realm(self):
        """Gets the realm of this NetworkNodeDiameterAddress.

        Fully Qualified Domain Name  # noqa: E501

        :return: The realm of this NetworkNodeDiameterAddress.
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """Sets the realm of this NetworkNodeDiameterAddress.

        Fully Qualified Domain Name  # noqa: E501

        :param realm: The realm of this NetworkNodeDiameterAddress.
        :type realm: str
        """
        if realm is None:
            raise ValueError("Invalid value for `realm`, must not be `None`")  # noqa: E501
        if realm is not None and len(realm) > 253:
            raise ValueError("Invalid value for `realm`, length must be less than or equal to `253`")  # noqa: E501
        if realm is not None and len(realm) < 4:
            raise ValueError("Invalid value for `realm`, length must be greater than or equal to `4`")  # noqa: E501
        if realm is not None and not re.search(r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$', realm):  # noqa: E501
            raise ValueError("Invalid value for `realm`, must be a follow pattern or equal to `/^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$/`")  # noqa: E501

        self._realm = realm
