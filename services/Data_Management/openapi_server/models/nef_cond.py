# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.af_event import AfEvent
from openapi_server.models.identity_range import IdentityRange
from openapi_server.models.pfd_data import PfdData
from openapi_server.models.snssai import Snssai
from openapi_server import util

from openapi_server.models.af_event import AfEvent  # noqa: E501
from openapi_server.models.identity_range import IdentityRange  # noqa: E501
from openapi_server.models.pfd_data import PfdData  # noqa: E501
from openapi_server.models.snssai import Snssai  # noqa: E501

class NefCond(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition_type=None, af_events=None, snssai_list=None, pfd_data=None, gpsi_ranges=None, external_group_identifiers_ranges=None, served_fqdn_list=None):  # noqa: E501
        """NefCond - a model defined in OpenAPI

        :param condition_type: The condition_type of this NefCond.  # noqa: E501
        :type condition_type: str
        :param af_events: The af_events of this NefCond.  # noqa: E501
        :type af_events: List[AfEvent]
        :param snssai_list: The snssai_list of this NefCond.  # noqa: E501
        :type snssai_list: List[Snssai]
        :param pfd_data: The pfd_data of this NefCond.  # noqa: E501
        :type pfd_data: PfdData
        :param gpsi_ranges: The gpsi_ranges of this NefCond.  # noqa: E501
        :type gpsi_ranges: List[IdentityRange]
        :param external_group_identifiers_ranges: The external_group_identifiers_ranges of this NefCond.  # noqa: E501
        :type external_group_identifiers_ranges: List[IdentityRange]
        :param served_fqdn_list: The served_fqdn_list of this NefCond.  # noqa: E501
        :type served_fqdn_list: List[str]
        """
        self.openapi_types = {
            'condition_type': str,
            'af_events': List[AfEvent],
            'snssai_list': List[Snssai],
            'pfd_data': PfdData,
            'gpsi_ranges': List[IdentityRange],
            'external_group_identifiers_ranges': List[IdentityRange],
            'served_fqdn_list': List[str]
        }

        self.attribute_map = {
            'condition_type': 'conditionType',
            'af_events': 'afEvents',
            'snssai_list': 'snssaiList',
            'pfd_data': 'pfdData',
            'gpsi_ranges': 'gpsiRanges',
            'external_group_identifiers_ranges': 'externalGroupIdentifiersRanges',
            'served_fqdn_list': 'servedFqdnList'
        }

        self._condition_type = condition_type
        self._af_events = af_events
        self._snssai_list = snssai_list
        self._pfd_data = pfd_data
        self._gpsi_ranges = gpsi_ranges
        self._external_group_identifiers_ranges = external_group_identifiers_ranges
        self._served_fqdn_list = served_fqdn_list

    @classmethod
    def from_dict(cls, dikt) -> 'NefCond':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NefCond of this NefCond.  # noqa: E501
        :rtype: NefCond
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition_type(self):
        """Gets the condition_type of this NefCond.


        :return: The condition_type of this NefCond.
        :rtype: str
        """
        return self._condition_type

    @condition_type.setter
    def condition_type(self, condition_type):
        """Sets the condition_type of this NefCond.


        :param condition_type: The condition_type of this NefCond.
        :type condition_type: str
        """
        allowed_values = ["NEF_COND"]  # noqa: E501
        if condition_type not in allowed_values:
            raise ValueError(
                "Invalid value for `condition_type` ({0}), must be one of {1}"
                .format(condition_type, allowed_values)
            )

        self._condition_type = condition_type

    @property
    def af_events(self):
        """Gets the af_events of this NefCond.


        :return: The af_events of this NefCond.
        :rtype: List[AfEvent]
        """
        return self._af_events

    @af_events.setter
    def af_events(self, af_events):
        """Sets the af_events of this NefCond.


        :param af_events: The af_events of this NefCond.
        :type af_events: List[AfEvent]
        """
        if af_events is not None and len(af_events) < 1:
            raise ValueError("Invalid value for `af_events`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._af_events = af_events

    @property
    def snssai_list(self):
        """Gets the snssai_list of this NefCond.


        :return: The snssai_list of this NefCond.
        :rtype: List[Snssai]
        """
        return self._snssai_list

    @snssai_list.setter
    def snssai_list(self, snssai_list):
        """Sets the snssai_list of this NefCond.


        :param snssai_list: The snssai_list of this NefCond.
        :type snssai_list: List[Snssai]
        """
        if snssai_list is not None and len(snssai_list) < 1:
            raise ValueError("Invalid value for `snssai_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._snssai_list = snssai_list

    @property
    def pfd_data(self):
        """Gets the pfd_data of this NefCond.


        :return: The pfd_data of this NefCond.
        :rtype: PfdData
        """
        return self._pfd_data

    @pfd_data.setter
    def pfd_data(self, pfd_data):
        """Sets the pfd_data of this NefCond.


        :param pfd_data: The pfd_data of this NefCond.
        :type pfd_data: PfdData
        """

        self._pfd_data = pfd_data

    @property
    def gpsi_ranges(self):
        """Gets the gpsi_ranges of this NefCond.


        :return: The gpsi_ranges of this NefCond.
        :rtype: List[IdentityRange]
        """
        return self._gpsi_ranges

    @gpsi_ranges.setter
    def gpsi_ranges(self, gpsi_ranges):
        """Sets the gpsi_ranges of this NefCond.


        :param gpsi_ranges: The gpsi_ranges of this NefCond.
        :type gpsi_ranges: List[IdentityRange]
        """
        if gpsi_ranges is not None and len(gpsi_ranges) < 1:
            raise ValueError("Invalid value for `gpsi_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._gpsi_ranges = gpsi_ranges

    @property
    def external_group_identifiers_ranges(self):
        """Gets the external_group_identifiers_ranges of this NefCond.


        :return: The external_group_identifiers_ranges of this NefCond.
        :rtype: List[IdentityRange]
        """
        return self._external_group_identifiers_ranges

    @external_group_identifiers_ranges.setter
    def external_group_identifiers_ranges(self, external_group_identifiers_ranges):
        """Sets the external_group_identifiers_ranges of this NefCond.


        :param external_group_identifiers_ranges: The external_group_identifiers_ranges of this NefCond.
        :type external_group_identifiers_ranges: List[IdentityRange]
        """
        if external_group_identifiers_ranges is not None and len(external_group_identifiers_ranges) < 1:
            raise ValueError("Invalid value for `external_group_identifiers_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._external_group_identifiers_ranges = external_group_identifiers_ranges

    @property
    def served_fqdn_list(self):
        """Gets the served_fqdn_list of this NefCond.


        :return: The served_fqdn_list of this NefCond.
        :rtype: List[str]
        """
        return self._served_fqdn_list

    @served_fqdn_list.setter
    def served_fqdn_list(self, served_fqdn_list):
        """Sets the served_fqdn_list of this NefCond.


        :param served_fqdn_list: The served_fqdn_list of this NefCond.
        :type served_fqdn_list: List[str]
        """
        if served_fqdn_list is not None and len(served_fqdn_list) < 1:
            raise ValueError("Invalid value for `served_fqdn_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._served_fqdn_list = served_fqdn_list
