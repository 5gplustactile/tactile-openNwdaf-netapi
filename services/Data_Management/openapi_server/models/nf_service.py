# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.default_notification_subscription import DefaultNotificationSubscription
from openapi_server.models.ext_snssai import ExtSnssai
from openapi_server.models.ip_end_point import IpEndPoint
from openapi_server.models.nf_service_status import NFServiceStatus
from openapi_server.models.nf_service_version import NFServiceVersion
from openapi_server.models.nf_type import NFType
from openapi_server.models.plmn_id import PlmnId
from openapi_server.models.plmn_id_nid import PlmnIdNid
from openapi_server.models.plmn_oauth2 import PlmnOauth2
from openapi_server.models.plmn_snssai import PlmnSnssai
from openapi_server.models.service_name import ServiceName
from openapi_server.models.uri_scheme import UriScheme
from openapi_server.models.vendor_specific_feature import VendorSpecificFeature
import re
from openapi_server import util

from openapi_server.models.default_notification_subscription import DefaultNotificationSubscription  # noqa: E501
from openapi_server.models.ext_snssai import ExtSnssai  # noqa: E501
from openapi_server.models.ip_end_point import IpEndPoint  # noqa: E501
from openapi_server.models.nf_service_status import NFServiceStatus  # noqa: E501
from openapi_server.models.nf_service_version import NFServiceVersion  # noqa: E501
from openapi_server.models.nf_type import NFType  # noqa: E501
from openapi_server.models.plmn_id import PlmnId  # noqa: E501
from openapi_server.models.plmn_id_nid import PlmnIdNid  # noqa: E501
from openapi_server.models.plmn_oauth2 import PlmnOauth2  # noqa: E501
from openapi_server.models.plmn_snssai import PlmnSnssai  # noqa: E501
from openapi_server.models.service_name import ServiceName  # noqa: E501
from openapi_server.models.uri_scheme import UriScheme  # noqa: E501
from openapi_server.models.vendor_specific_feature import VendorSpecificFeature  # noqa: E501
import re  # noqa: E501

class NFService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_instance_id=None, service_name=None, versions=None, scheme=None, nf_service_status=None, fqdn=None, inter_plmn_fqdn=None, ip_end_points=None, api_prefix=None, default_notification_subscriptions=None, allowed_plmns=None, allowed_snpns=None, allowed_nf_types=None, allowed_nf_domains=None, allowed_nssais=None, allowed_operations_per_nf_type=None, allowed_operations_per_nf_instance=None, allowed_operations_per_nf_instance_overrides=False, priority=None, capacity=None, load=None, load_time_stamp=None, recovery_time=None, supported_features=None, nf_service_set_id_list=None, s_nssais=None, per_plmn_snssai_list=None, vendor_id=None, supported_vendor_specific_features=None, oauth2_required=None, per_plmn_oauth2_req_list=None):  # noqa: E501
        """NFService - a model defined in OpenAPI

        :param service_instance_id: The service_instance_id of this NFService.  # noqa: E501
        :type service_instance_id: str
        :param service_name: The service_name of this NFService.  # noqa: E501
        :type service_name: ServiceName
        :param versions: The versions of this NFService.  # noqa: E501
        :type versions: List[NFServiceVersion]
        :param scheme: The scheme of this NFService.  # noqa: E501
        :type scheme: UriScheme
        :param nf_service_status: The nf_service_status of this NFService.  # noqa: E501
        :type nf_service_status: NFServiceStatus
        :param fqdn: The fqdn of this NFService.  # noqa: E501
        :type fqdn: str
        :param inter_plmn_fqdn: The inter_plmn_fqdn of this NFService.  # noqa: E501
        :type inter_plmn_fqdn: str
        :param ip_end_points: The ip_end_points of this NFService.  # noqa: E501
        :type ip_end_points: List[IpEndPoint]
        :param api_prefix: The api_prefix of this NFService.  # noqa: E501
        :type api_prefix: str
        :param default_notification_subscriptions: The default_notification_subscriptions of this NFService.  # noqa: E501
        :type default_notification_subscriptions: List[DefaultNotificationSubscription]
        :param allowed_plmns: The allowed_plmns of this NFService.  # noqa: E501
        :type allowed_plmns: List[PlmnId]
        :param allowed_snpns: The allowed_snpns of this NFService.  # noqa: E501
        :type allowed_snpns: List[PlmnIdNid]
        :param allowed_nf_types: The allowed_nf_types of this NFService.  # noqa: E501
        :type allowed_nf_types: List[NFType]
        :param allowed_nf_domains: The allowed_nf_domains of this NFService.  # noqa: E501
        :type allowed_nf_domains: List[str]
        :param allowed_nssais: The allowed_nssais of this NFService.  # noqa: E501
        :type allowed_nssais: List[ExtSnssai]
        :param allowed_operations_per_nf_type: The allowed_operations_per_nf_type of this NFService.  # noqa: E501
        :type allowed_operations_per_nf_type: Dict[str, List[str]]
        :param allowed_operations_per_nf_instance: The allowed_operations_per_nf_instance of this NFService.  # noqa: E501
        :type allowed_operations_per_nf_instance: Dict[str, List[str]]
        :param allowed_operations_per_nf_instance_overrides: The allowed_operations_per_nf_instance_overrides of this NFService.  # noqa: E501
        :type allowed_operations_per_nf_instance_overrides: bool
        :param priority: The priority of this NFService.  # noqa: E501
        :type priority: int
        :param capacity: The capacity of this NFService.  # noqa: E501
        :type capacity: int
        :param load: The load of this NFService.  # noqa: E501
        :type load: int
        :param load_time_stamp: The load_time_stamp of this NFService.  # noqa: E501
        :type load_time_stamp: datetime
        :param recovery_time: The recovery_time of this NFService.  # noqa: E501
        :type recovery_time: datetime
        :param supported_features: The supported_features of this NFService.  # noqa: E501
        :type supported_features: str
        :param nf_service_set_id_list: The nf_service_set_id_list of this NFService.  # noqa: E501
        :type nf_service_set_id_list: List[str]
        :param s_nssais: The s_nssais of this NFService.  # noqa: E501
        :type s_nssais: List[ExtSnssai]
        :param per_plmn_snssai_list: The per_plmn_snssai_list of this NFService.  # noqa: E501
        :type per_plmn_snssai_list: List[PlmnSnssai]
        :param vendor_id: The vendor_id of this NFService.  # noqa: E501
        :type vendor_id: str
        :param supported_vendor_specific_features: The supported_vendor_specific_features of this NFService.  # noqa: E501
        :type supported_vendor_specific_features: Dict[str, List[VendorSpecificFeature]]
        :param oauth2_required: The oauth2_required of this NFService.  # noqa: E501
        :type oauth2_required: bool
        :param per_plmn_oauth2_req_list: The per_plmn_oauth2_req_list of this NFService.  # noqa: E501
        :type per_plmn_oauth2_req_list: PlmnOauth2
        """
        self.openapi_types = {
            'service_instance_id': str,
            'service_name': ServiceName,
            'versions': List[NFServiceVersion],
            'scheme': UriScheme,
            'nf_service_status': NFServiceStatus,
            'fqdn': str,
            'inter_plmn_fqdn': str,
            'ip_end_points': List[IpEndPoint],
            'api_prefix': str,
            'default_notification_subscriptions': List[DefaultNotificationSubscription],
            'allowed_plmns': List[PlmnId],
            'allowed_snpns': List[PlmnIdNid],
            'allowed_nf_types': List[NFType],
            'allowed_nf_domains': List[str],
            'allowed_nssais': List[ExtSnssai],
            'allowed_operations_per_nf_type': Dict[str, List[str]],
            'allowed_operations_per_nf_instance': Dict[str, List[str]],
            'allowed_operations_per_nf_instance_overrides': bool,
            'priority': int,
            'capacity': int,
            'load': int,
            'load_time_stamp': datetime,
            'recovery_time': datetime,
            'supported_features': str,
            'nf_service_set_id_list': List[str],
            's_nssais': List[ExtSnssai],
            'per_plmn_snssai_list': List[PlmnSnssai],
            'vendor_id': str,
            'supported_vendor_specific_features': Dict[str, List[VendorSpecificFeature]],
            'oauth2_required': bool,
            'per_plmn_oauth2_req_list': PlmnOauth2
        }

        self.attribute_map = {
            'service_instance_id': 'serviceInstanceId',
            'service_name': 'serviceName',
            'versions': 'versions',
            'scheme': 'scheme',
            'nf_service_status': 'nfServiceStatus',
            'fqdn': 'fqdn',
            'inter_plmn_fqdn': 'interPlmnFqdn',
            'ip_end_points': 'ipEndPoints',
            'api_prefix': 'apiPrefix',
            'default_notification_subscriptions': 'defaultNotificationSubscriptions',
            'allowed_plmns': 'allowedPlmns',
            'allowed_snpns': 'allowedSnpns',
            'allowed_nf_types': 'allowedNfTypes',
            'allowed_nf_domains': 'allowedNfDomains',
            'allowed_nssais': 'allowedNssais',
            'allowed_operations_per_nf_type': 'allowedOperationsPerNfType',
            'allowed_operations_per_nf_instance': 'allowedOperationsPerNfInstance',
            'allowed_operations_per_nf_instance_overrides': 'allowedOperationsPerNfInstanceOverrides',
            'priority': 'priority',
            'capacity': 'capacity',
            'load': 'load',
            'load_time_stamp': 'loadTimeStamp',
            'recovery_time': 'recoveryTime',
            'supported_features': 'supportedFeatures',
            'nf_service_set_id_list': 'nfServiceSetIdList',
            's_nssais': 'sNssais',
            'per_plmn_snssai_list': 'perPlmnSnssaiList',
            'vendor_id': 'vendorId',
            'supported_vendor_specific_features': 'supportedVendorSpecificFeatures',
            'oauth2_required': 'oauth2Required',
            'per_plmn_oauth2_req_list': 'perPlmnOauth2ReqList'
        }

        self._service_instance_id = service_instance_id
        self._service_name = service_name
        self._versions = versions
        self._scheme = scheme
        self._nf_service_status = nf_service_status
        self._fqdn = fqdn
        self._inter_plmn_fqdn = inter_plmn_fqdn
        self._ip_end_points = ip_end_points
        self._api_prefix = api_prefix
        self._default_notification_subscriptions = default_notification_subscriptions
        self._allowed_plmns = allowed_plmns
        self._allowed_snpns = allowed_snpns
        self._allowed_nf_types = allowed_nf_types
        self._allowed_nf_domains = allowed_nf_domains
        self._allowed_nssais = allowed_nssais
        self._allowed_operations_per_nf_type = allowed_operations_per_nf_type
        self._allowed_operations_per_nf_instance = allowed_operations_per_nf_instance
        self._allowed_operations_per_nf_instance_overrides = allowed_operations_per_nf_instance_overrides
        self._priority = priority
        self._capacity = capacity
        self._load = load
        self._load_time_stamp = load_time_stamp
        self._recovery_time = recovery_time
        self._supported_features = supported_features
        self._nf_service_set_id_list = nf_service_set_id_list
        self._s_nssais = s_nssais
        self._per_plmn_snssai_list = per_plmn_snssai_list
        self._vendor_id = vendor_id
        self._supported_vendor_specific_features = supported_vendor_specific_features
        self._oauth2_required = oauth2_required
        self._per_plmn_oauth2_req_list = per_plmn_oauth2_req_list

    @classmethod
    def from_dict(cls, dikt) -> 'NFService':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NFService of this NFService.  # noqa: E501
        :rtype: NFService
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_instance_id(self):
        """Gets the service_instance_id of this NFService.


        :return: The service_instance_id of this NFService.
        :rtype: str
        """
        return self._service_instance_id

    @service_instance_id.setter
    def service_instance_id(self, service_instance_id):
        """Sets the service_instance_id of this NFService.


        :param service_instance_id: The service_instance_id of this NFService.
        :type service_instance_id: str
        """
        if service_instance_id is None:
            raise ValueError("Invalid value for `service_instance_id`, must not be `None`")  # noqa: E501

        self._service_instance_id = service_instance_id

    @property
    def service_name(self):
        """Gets the service_name of this NFService.


        :return: The service_name of this NFService.
        :rtype: ServiceName
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this NFService.


        :param service_name: The service_name of this NFService.
        :type service_name: ServiceName
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")  # noqa: E501

        self._service_name = service_name

    @property
    def versions(self):
        """Gets the versions of this NFService.


        :return: The versions of this NFService.
        :rtype: List[NFServiceVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this NFService.


        :param versions: The versions of this NFService.
        :type versions: List[NFServiceVersion]
        """
        if versions is None:
            raise ValueError("Invalid value for `versions`, must not be `None`")  # noqa: E501
        if versions is not None and len(versions) < 1:
            raise ValueError("Invalid value for `versions`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._versions = versions

    @property
    def scheme(self):
        """Gets the scheme of this NFService.


        :return: The scheme of this NFService.
        :rtype: UriScheme
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this NFService.


        :param scheme: The scheme of this NFService.
        :type scheme: UriScheme
        """
        if scheme is None:
            raise ValueError("Invalid value for `scheme`, must not be `None`")  # noqa: E501

        self._scheme = scheme

    @property
    def nf_service_status(self):
        """Gets the nf_service_status of this NFService.


        :return: The nf_service_status of this NFService.
        :rtype: NFServiceStatus
        """
        return self._nf_service_status

    @nf_service_status.setter
    def nf_service_status(self, nf_service_status):
        """Sets the nf_service_status of this NFService.


        :param nf_service_status: The nf_service_status of this NFService.
        :type nf_service_status: NFServiceStatus
        """
        if nf_service_status is None:
            raise ValueError("Invalid value for `nf_service_status`, must not be `None`")  # noqa: E501

        self._nf_service_status = nf_service_status

    @property
    def fqdn(self):
        """Gets the fqdn of this NFService.

        Fully Qualified Domain Name  # noqa: E501

        :return: The fqdn of this NFService.
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this NFService.

        Fully Qualified Domain Name  # noqa: E501

        :param fqdn: The fqdn of this NFService.
        :type fqdn: str
        """
        if fqdn is not None and len(fqdn) > 253:
            raise ValueError("Invalid value for `fqdn`, length must be less than or equal to `253`")  # noqa: E501
        if fqdn is not None and len(fqdn) < 4:
            raise ValueError("Invalid value for `fqdn`, length must be greater than or equal to `4`")  # noqa: E501
        if fqdn is not None and not re.search(r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$', fqdn):  # noqa: E501
            raise ValueError("Invalid value for `fqdn`, must be a follow pattern or equal to `/^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$/`")  # noqa: E501

        self._fqdn = fqdn

    @property
    def inter_plmn_fqdn(self):
        """Gets the inter_plmn_fqdn of this NFService.

        Fully Qualified Domain Name  # noqa: E501

        :return: The inter_plmn_fqdn of this NFService.
        :rtype: str
        """
        return self._inter_plmn_fqdn

    @inter_plmn_fqdn.setter
    def inter_plmn_fqdn(self, inter_plmn_fqdn):
        """Sets the inter_plmn_fqdn of this NFService.

        Fully Qualified Domain Name  # noqa: E501

        :param inter_plmn_fqdn: The inter_plmn_fqdn of this NFService.
        :type inter_plmn_fqdn: str
        """
        if inter_plmn_fqdn is not None and len(inter_plmn_fqdn) > 253:
            raise ValueError("Invalid value for `inter_plmn_fqdn`, length must be less than or equal to `253`")  # noqa: E501
        if inter_plmn_fqdn is not None and len(inter_plmn_fqdn) < 4:
            raise ValueError("Invalid value for `inter_plmn_fqdn`, length must be greater than or equal to `4`")  # noqa: E501
        if inter_plmn_fqdn is not None and not re.search(r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$', inter_plmn_fqdn):  # noqa: E501
            raise ValueError("Invalid value for `inter_plmn_fqdn`, must be a follow pattern or equal to `/^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$/`")  # noqa: E501

        self._inter_plmn_fqdn = inter_plmn_fqdn

    @property
    def ip_end_points(self):
        """Gets the ip_end_points of this NFService.


        :return: The ip_end_points of this NFService.
        :rtype: List[IpEndPoint]
        """
        return self._ip_end_points

    @ip_end_points.setter
    def ip_end_points(self, ip_end_points):
        """Sets the ip_end_points of this NFService.


        :param ip_end_points: The ip_end_points of this NFService.
        :type ip_end_points: List[IpEndPoint]
        """
        if ip_end_points is not None and len(ip_end_points) < 1:
            raise ValueError("Invalid value for `ip_end_points`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ip_end_points = ip_end_points

    @property
    def api_prefix(self):
        """Gets the api_prefix of this NFService.


        :return: The api_prefix of this NFService.
        :rtype: str
        """
        return self._api_prefix

    @api_prefix.setter
    def api_prefix(self, api_prefix):
        """Sets the api_prefix of this NFService.


        :param api_prefix: The api_prefix of this NFService.
        :type api_prefix: str
        """

        self._api_prefix = api_prefix

    @property
    def default_notification_subscriptions(self):
        """Gets the default_notification_subscriptions of this NFService.


        :return: The default_notification_subscriptions of this NFService.
        :rtype: List[DefaultNotificationSubscription]
        """
        return self._default_notification_subscriptions

    @default_notification_subscriptions.setter
    def default_notification_subscriptions(self, default_notification_subscriptions):
        """Sets the default_notification_subscriptions of this NFService.


        :param default_notification_subscriptions: The default_notification_subscriptions of this NFService.
        :type default_notification_subscriptions: List[DefaultNotificationSubscription]
        """
        if default_notification_subscriptions is not None and len(default_notification_subscriptions) < 1:
            raise ValueError("Invalid value for `default_notification_subscriptions`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._default_notification_subscriptions = default_notification_subscriptions

    @property
    def allowed_plmns(self):
        """Gets the allowed_plmns of this NFService.


        :return: The allowed_plmns of this NFService.
        :rtype: List[PlmnId]
        """
        return self._allowed_plmns

    @allowed_plmns.setter
    def allowed_plmns(self, allowed_plmns):
        """Sets the allowed_plmns of this NFService.


        :param allowed_plmns: The allowed_plmns of this NFService.
        :type allowed_plmns: List[PlmnId]
        """
        if allowed_plmns is not None and len(allowed_plmns) < 1:
            raise ValueError("Invalid value for `allowed_plmns`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._allowed_plmns = allowed_plmns

    @property
    def allowed_snpns(self):
        """Gets the allowed_snpns of this NFService.


        :return: The allowed_snpns of this NFService.
        :rtype: List[PlmnIdNid]
        """
        return self._allowed_snpns

    @allowed_snpns.setter
    def allowed_snpns(self, allowed_snpns):
        """Sets the allowed_snpns of this NFService.


        :param allowed_snpns: The allowed_snpns of this NFService.
        :type allowed_snpns: List[PlmnIdNid]
        """
        if allowed_snpns is not None and len(allowed_snpns) < 1:
            raise ValueError("Invalid value for `allowed_snpns`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._allowed_snpns = allowed_snpns

    @property
    def allowed_nf_types(self):
        """Gets the allowed_nf_types of this NFService.


        :return: The allowed_nf_types of this NFService.
        :rtype: List[NFType]
        """
        return self._allowed_nf_types

    @allowed_nf_types.setter
    def allowed_nf_types(self, allowed_nf_types):
        """Sets the allowed_nf_types of this NFService.


        :param allowed_nf_types: The allowed_nf_types of this NFService.
        :type allowed_nf_types: List[NFType]
        """
        if allowed_nf_types is not None and len(allowed_nf_types) < 1:
            raise ValueError("Invalid value for `allowed_nf_types`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._allowed_nf_types = allowed_nf_types

    @property
    def allowed_nf_domains(self):
        """Gets the allowed_nf_domains of this NFService.


        :return: The allowed_nf_domains of this NFService.
        :rtype: List[str]
        """
        return self._allowed_nf_domains

    @allowed_nf_domains.setter
    def allowed_nf_domains(self, allowed_nf_domains):
        """Sets the allowed_nf_domains of this NFService.


        :param allowed_nf_domains: The allowed_nf_domains of this NFService.
        :type allowed_nf_domains: List[str]
        """
        if allowed_nf_domains is not None and len(allowed_nf_domains) < 1:
            raise ValueError("Invalid value for `allowed_nf_domains`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._allowed_nf_domains = allowed_nf_domains

    @property
    def allowed_nssais(self):
        """Gets the allowed_nssais of this NFService.


        :return: The allowed_nssais of this NFService.
        :rtype: List[ExtSnssai]
        """
        return self._allowed_nssais

    @allowed_nssais.setter
    def allowed_nssais(self, allowed_nssais):
        """Sets the allowed_nssais of this NFService.


        :param allowed_nssais: The allowed_nssais of this NFService.
        :type allowed_nssais: List[ExtSnssai]
        """
        if allowed_nssais is not None and len(allowed_nssais) < 1:
            raise ValueError("Invalid value for `allowed_nssais`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._allowed_nssais = allowed_nssais

    @property
    def allowed_operations_per_nf_type(self):
        """Gets the allowed_operations_per_nf_type of this NFService.

        A map (list of key-value pairs) where NF Type serves as key  # noqa: E501

        :return: The allowed_operations_per_nf_type of this NFService.
        :rtype: Dict[str, List[str]]
        """
        return self._allowed_operations_per_nf_type

    @allowed_operations_per_nf_type.setter
    def allowed_operations_per_nf_type(self, allowed_operations_per_nf_type):
        """Sets the allowed_operations_per_nf_type of this NFService.

        A map (list of key-value pairs) where NF Type serves as key  # noqa: E501

        :param allowed_operations_per_nf_type: The allowed_operations_per_nf_type of this NFService.
        :type allowed_operations_per_nf_type: Dict[str, List[str]]
        """
        if allowed_operations_per_nf_type is not None and len(allowed_operations_per_nf_type) < 1:
            raise ValueError("Invalid value for `allowed_operations_per_nf_type`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._allowed_operations_per_nf_type = allowed_operations_per_nf_type

    @property
    def allowed_operations_per_nf_instance(self):
        """Gets the allowed_operations_per_nf_instance of this NFService.

        A map (list of key-value pairs) where NF Instance Id serves as key  # noqa: E501

        :return: The allowed_operations_per_nf_instance of this NFService.
        :rtype: Dict[str, List[str]]
        """
        return self._allowed_operations_per_nf_instance

    @allowed_operations_per_nf_instance.setter
    def allowed_operations_per_nf_instance(self, allowed_operations_per_nf_instance):
        """Sets the allowed_operations_per_nf_instance of this NFService.

        A map (list of key-value pairs) where NF Instance Id serves as key  # noqa: E501

        :param allowed_operations_per_nf_instance: The allowed_operations_per_nf_instance of this NFService.
        :type allowed_operations_per_nf_instance: Dict[str, List[str]]
        """
        if allowed_operations_per_nf_instance is not None and len(allowed_operations_per_nf_instance) < 1:
            raise ValueError("Invalid value for `allowed_operations_per_nf_instance`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._allowed_operations_per_nf_instance = allowed_operations_per_nf_instance

    @property
    def allowed_operations_per_nf_instance_overrides(self):
        """Gets the allowed_operations_per_nf_instance_overrides of this NFService.


        :return: The allowed_operations_per_nf_instance_overrides of this NFService.
        :rtype: bool
        """
        return self._allowed_operations_per_nf_instance_overrides

    @allowed_operations_per_nf_instance_overrides.setter
    def allowed_operations_per_nf_instance_overrides(self, allowed_operations_per_nf_instance_overrides):
        """Sets the allowed_operations_per_nf_instance_overrides of this NFService.


        :param allowed_operations_per_nf_instance_overrides: The allowed_operations_per_nf_instance_overrides of this NFService.
        :type allowed_operations_per_nf_instance_overrides: bool
        """

        self._allowed_operations_per_nf_instance_overrides = allowed_operations_per_nf_instance_overrides

    @property
    def priority(self):
        """Gets the priority of this NFService.


        :return: The priority of this NFService.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this NFService.


        :param priority: The priority of this NFService.
        :type priority: int
        """
        if priority is not None and priority > 65535:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `65535`")  # noqa: E501
        if priority is not None and priority < 0:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `0`")  # noqa: E501

        self._priority = priority

    @property
    def capacity(self):
        """Gets the capacity of this NFService.


        :return: The capacity of this NFService.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this NFService.


        :param capacity: The capacity of this NFService.
        :type capacity: int
        """
        if capacity is not None and capacity > 65535:  # noqa: E501
            raise ValueError("Invalid value for `capacity`, must be a value less than or equal to `65535`")  # noqa: E501
        if capacity is not None and capacity < 0:  # noqa: E501
            raise ValueError("Invalid value for `capacity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._capacity = capacity

    @property
    def load(self):
        """Gets the load of this NFService.


        :return: The load of this NFService.
        :rtype: int
        """
        return self._load

    @load.setter
    def load(self, load):
        """Sets the load of this NFService.


        :param load: The load of this NFService.
        :type load: int
        """
        if load is not None and load > 100:  # noqa: E501
            raise ValueError("Invalid value for `load`, must be a value less than or equal to `100`")  # noqa: E501
        if load is not None and load < 0:  # noqa: E501
            raise ValueError("Invalid value for `load`, must be a value greater than or equal to `0`")  # noqa: E501

        self._load = load

    @property
    def load_time_stamp(self):
        """Gets the load_time_stamp of this NFService.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The load_time_stamp of this NFService.
        :rtype: datetime
        """
        return self._load_time_stamp

    @load_time_stamp.setter
    def load_time_stamp(self, load_time_stamp):
        """Sets the load_time_stamp of this NFService.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param load_time_stamp: The load_time_stamp of this NFService.
        :type load_time_stamp: datetime
        """

        self._load_time_stamp = load_time_stamp

    @property
    def recovery_time(self):
        """Gets the recovery_time of this NFService.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The recovery_time of this NFService.
        :rtype: datetime
        """
        return self._recovery_time

    @recovery_time.setter
    def recovery_time(self, recovery_time):
        """Sets the recovery_time of this NFService.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param recovery_time: The recovery_time of this NFService.
        :type recovery_time: datetime
        """

        self._recovery_time = recovery_time

    @property
    def supported_features(self):
        """Gets the supported_features of this NFService.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :return: The supported_features of this NFService.
        :rtype: str
        """
        return self._supported_features

    @supported_features.setter
    def supported_features(self, supported_features):
        """Sets the supported_features of this NFService.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :param supported_features: The supported_features of this NFService.
        :type supported_features: str
        """
        if supported_features is not None and not re.search(r'^[A-Fa-f0-9]*$', supported_features):  # noqa: E501
            raise ValueError("Invalid value for `supported_features`, must be a follow pattern or equal to `/^[A-Fa-f0-9]*$/`")  # noqa: E501

        self._supported_features = supported_features

    @property
    def nf_service_set_id_list(self):
        """Gets the nf_service_set_id_list of this NFService.


        :return: The nf_service_set_id_list of this NFService.
        :rtype: List[str]
        """
        return self._nf_service_set_id_list

    @nf_service_set_id_list.setter
    def nf_service_set_id_list(self, nf_service_set_id_list):
        """Sets the nf_service_set_id_list of this NFService.


        :param nf_service_set_id_list: The nf_service_set_id_list of this NFService.
        :type nf_service_set_id_list: List[str]
        """
        if nf_service_set_id_list is not None and len(nf_service_set_id_list) < 1:
            raise ValueError("Invalid value for `nf_service_set_id_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._nf_service_set_id_list = nf_service_set_id_list

    @property
    def s_nssais(self):
        """Gets the s_nssais of this NFService.


        :return: The s_nssais of this NFService.
        :rtype: List[ExtSnssai]
        """
        return self._s_nssais

    @s_nssais.setter
    def s_nssais(self, s_nssais):
        """Sets the s_nssais of this NFService.


        :param s_nssais: The s_nssais of this NFService.
        :type s_nssais: List[ExtSnssai]
        """
        if s_nssais is not None and len(s_nssais) < 1:
            raise ValueError("Invalid value for `s_nssais`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._s_nssais = s_nssais

    @property
    def per_plmn_snssai_list(self):
        """Gets the per_plmn_snssai_list of this NFService.


        :return: The per_plmn_snssai_list of this NFService.
        :rtype: List[PlmnSnssai]
        """
        return self._per_plmn_snssai_list

    @per_plmn_snssai_list.setter
    def per_plmn_snssai_list(self, per_plmn_snssai_list):
        """Sets the per_plmn_snssai_list of this NFService.


        :param per_plmn_snssai_list: The per_plmn_snssai_list of this NFService.
        :type per_plmn_snssai_list: List[PlmnSnssai]
        """
        if per_plmn_snssai_list is not None and len(per_plmn_snssai_list) < 1:
            raise ValueError("Invalid value for `per_plmn_snssai_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._per_plmn_snssai_list = per_plmn_snssai_list

    @property
    def vendor_id(self):
        """Gets the vendor_id of this NFService.

        Vendor ID of the NF Service instance (Private Enterprise Number assigned by IANA)  # noqa: E501

        :return: The vendor_id of this NFService.
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this NFService.

        Vendor ID of the NF Service instance (Private Enterprise Number assigned by IANA)  # noqa: E501

        :param vendor_id: The vendor_id of this NFService.
        :type vendor_id: str
        """
        if vendor_id is not None and not re.search(r'^[0-9]{6}$', vendor_id):  # noqa: E501
            raise ValueError("Invalid value for `vendor_id`, must be a follow pattern or equal to `/^[0-9]{6}$/`")  # noqa: E501

        self._vendor_id = vendor_id

    @property
    def supported_vendor_specific_features(self):
        """Gets the supported_vendor_specific_features of this NFService.

        A map (list of key-value pairs) where IANA-assigned SMI Network Management Private Enterprise Codes serves as key   # noqa: E501

        :return: The supported_vendor_specific_features of this NFService.
        :rtype: Dict[str, List[VendorSpecificFeature]]
        """
        return self._supported_vendor_specific_features

    @supported_vendor_specific_features.setter
    def supported_vendor_specific_features(self, supported_vendor_specific_features):
        """Sets the supported_vendor_specific_features of this NFService.

        A map (list of key-value pairs) where IANA-assigned SMI Network Management Private Enterprise Codes serves as key   # noqa: E501

        :param supported_vendor_specific_features: The supported_vendor_specific_features of this NFService.
        :type supported_vendor_specific_features: Dict[str, List[VendorSpecificFeature]]
        """
        if supported_vendor_specific_features is not None and len(supported_vendor_specific_features) < 1:
            raise ValueError("Invalid value for `supported_vendor_specific_features`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._supported_vendor_specific_features = supported_vendor_specific_features

    @property
    def oauth2_required(self):
        """Gets the oauth2_required of this NFService.


        :return: The oauth2_required of this NFService.
        :rtype: bool
        """
        return self._oauth2_required

    @oauth2_required.setter
    def oauth2_required(self, oauth2_required):
        """Sets the oauth2_required of this NFService.


        :param oauth2_required: The oauth2_required of this NFService.
        :type oauth2_required: bool
        """

        self._oauth2_required = oauth2_required

    @property
    def per_plmn_oauth2_req_list(self):
        """Gets the per_plmn_oauth2_req_list of this NFService.


        :return: The per_plmn_oauth2_req_list of this NFService.
        :rtype: PlmnOauth2
        """
        return self._per_plmn_oauth2_req_list

    @per_plmn_oauth2_req_list.setter
    def per_plmn_oauth2_req_list(self, per_plmn_oauth2_req_list):
        """Sets the per_plmn_oauth2_req_list of this NFService.


        :param per_plmn_oauth2_req_list: The per_plmn_oauth2_req_list of this NFService.
        :type per_plmn_oauth2_req_list: PlmnOauth2
        """

        self._per_plmn_oauth2_req_list = per_plmn_oauth2_req_list
