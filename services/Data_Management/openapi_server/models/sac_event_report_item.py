# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.sac_event_state import SACEventState
from openapi_server.models.sac_event_status import SACEventStatus
from openapi_server.models.sac_event_type import SACEventType
from openapi_server.models.snssai import Snssai
from openapi_server import util

from openapi_server.models.sac_event_state import SACEventState  # noqa: E501
from openapi_server.models.sac_event_status import SACEventStatus  # noqa: E501
from openapi_server.models.sac_event_type import SACEventType  # noqa: E501
from openapi_server.models.snssai import Snssai  # noqa: E501

class SACEventReportItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_type=None, event_state=None, time_stamp=None, event_filter=None, slice_stauts_info=None):  # noqa: E501
        """SACEventReportItem - a model defined in OpenAPI

        :param event_type: The event_type of this SACEventReportItem.  # noqa: E501
        :type event_type: SACEventType
        :param event_state: The event_state of this SACEventReportItem.  # noqa: E501
        :type event_state: SACEventState
        :param time_stamp: The time_stamp of this SACEventReportItem.  # noqa: E501
        :type time_stamp: datetime
        :param event_filter: The event_filter of this SACEventReportItem.  # noqa: E501
        :type event_filter: Snssai
        :param slice_stauts_info: The slice_stauts_info of this SACEventReportItem.  # noqa: E501
        :type slice_stauts_info: SACEventStatus
        """
        self.openapi_types = {
            'event_type': SACEventType,
            'event_state': SACEventState,
            'time_stamp': datetime,
            'event_filter': Snssai,
            'slice_stauts_info': SACEventStatus
        }

        self.attribute_map = {
            'event_type': 'eventType',
            'event_state': 'eventState',
            'time_stamp': 'timeStamp',
            'event_filter': 'eventFilter',
            'slice_stauts_info': 'sliceStautsInfo'
        }

        self._event_type = event_type
        self._event_state = event_state
        self._time_stamp = time_stamp
        self._event_filter = event_filter
        self._slice_stauts_info = slice_stauts_info

    @classmethod
    def from_dict(cls, dikt) -> 'SACEventReportItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SACEventReportItem of this SACEventReportItem.  # noqa: E501
        :rtype: SACEventReportItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_type(self):
        """Gets the event_type of this SACEventReportItem.


        :return: The event_type of this SACEventReportItem.
        :rtype: SACEventType
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this SACEventReportItem.


        :param event_type: The event_type of this SACEventReportItem.
        :type event_type: SACEventType
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501

        self._event_type = event_type

    @property
    def event_state(self):
        """Gets the event_state of this SACEventReportItem.


        :return: The event_state of this SACEventReportItem.
        :rtype: SACEventState
        """
        return self._event_state

    @event_state.setter
    def event_state(self, event_state):
        """Sets the event_state of this SACEventReportItem.


        :param event_state: The event_state of this SACEventReportItem.
        :type event_state: SACEventState
        """
        if event_state is None:
            raise ValueError("Invalid value for `event_state`, must not be `None`")  # noqa: E501

        self._event_state = event_state

    @property
    def time_stamp(self):
        """Gets the time_stamp of this SACEventReportItem.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The time_stamp of this SACEventReportItem.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this SACEventReportItem.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param time_stamp: The time_stamp of this SACEventReportItem.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")  # noqa: E501

        self._time_stamp = time_stamp

    @property
    def event_filter(self):
        """Gets the event_filter of this SACEventReportItem.


        :return: The event_filter of this SACEventReportItem.
        :rtype: Snssai
        """
        return self._event_filter

    @event_filter.setter
    def event_filter(self, event_filter):
        """Sets the event_filter of this SACEventReportItem.


        :param event_filter: The event_filter of this SACEventReportItem.
        :type event_filter: Snssai
        """
        if event_filter is None:
            raise ValueError("Invalid value for `event_filter`, must not be `None`")  # noqa: E501

        self._event_filter = event_filter

    @property
    def slice_stauts_info(self):
        """Gets the slice_stauts_info of this SACEventReportItem.


        :return: The slice_stauts_info of this SACEventReportItem.
        :rtype: SACEventStatus
        """
        return self._slice_stauts_info

    @slice_stauts_info.setter
    def slice_stauts_info(self, slice_stauts_info):
        """Sets the slice_stauts_info of this SACEventReportItem.


        :param slice_stauts_info: The slice_stauts_info of this SACEventReportItem.
        :type slice_stauts_info: SACEventStatus
        """

        self._slice_stauts_info = slice_stauts_info
