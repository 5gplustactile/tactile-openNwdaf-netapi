# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.dccf_event import DccfEvent
from openapi_server.models.event_param_report import EventParamReport
from openapi_server import util

from openapi_server.models.dccf_event import DccfEvent  # noqa: E501
from openapi_server.models.event_param_report import EventParamReport  # noqa: E501

class NotifSummaryReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_id=None, proc_interval=None, event_reports=None):  # noqa: E501
        """NotifSummaryReport - a model defined in OpenAPI

        :param event_id: The event_id of this NotifSummaryReport.  # noqa: E501
        :type event_id: DccfEvent
        :param proc_interval: The proc_interval of this NotifSummaryReport.  # noqa: E501
        :type proc_interval: int
        :param event_reports: The event_reports of this NotifSummaryReport.  # noqa: E501
        :type event_reports: List[EventParamReport]
        """
        self.openapi_types = {
            'event_id': DccfEvent,
            'proc_interval': int,
            'event_reports': List[EventParamReport]
        }

        self.attribute_map = {
            'event_id': 'eventId',
            'proc_interval': 'procInterval',
            'event_reports': 'eventReports'
        }

        self._event_id = event_id
        self._proc_interval = proc_interval
        self._event_reports = event_reports

    @classmethod
    def from_dict(cls, dikt) -> 'NotifSummaryReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NotifSummaryReport of this NotifSummaryReport.  # noqa: E501
        :rtype: NotifSummaryReport
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_id(self):
        """Gets the event_id of this NotifSummaryReport.


        :return: The event_id of this NotifSummaryReport.
        :rtype: DccfEvent
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this NotifSummaryReport.


        :param event_id: The event_id of this NotifSummaryReport.
        :type event_id: DccfEvent
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")  # noqa: E501

        self._event_id = event_id

    @property
    def proc_interval(self):
        """Gets the proc_interval of this NotifSummaryReport.

        indicating a time in seconds.  # noqa: E501

        :return: The proc_interval of this NotifSummaryReport.
        :rtype: int
        """
        return self._proc_interval

    @proc_interval.setter
    def proc_interval(self, proc_interval):
        """Sets the proc_interval of this NotifSummaryReport.

        indicating a time in seconds.  # noqa: E501

        :param proc_interval: The proc_interval of this NotifSummaryReport.
        :type proc_interval: int
        """
        if proc_interval is None:
            raise ValueError("Invalid value for `proc_interval`, must not be `None`")  # noqa: E501

        self._proc_interval = proc_interval

    @property
    def event_reports(self):
        """Gets the event_reports of this NotifSummaryReport.

        List of event parameter reports.  # noqa: E501

        :return: The event_reports of this NotifSummaryReport.
        :rtype: List[EventParamReport]
        """
        return self._event_reports

    @event_reports.setter
    def event_reports(self, event_reports):
        """Sets the event_reports of this NotifSummaryReport.

        List of event parameter reports.  # noqa: E501

        :param event_reports: The event_reports of this NotifSummaryReport.
        :type event_reports: List[EventParamReport]
        """
        if event_reports is None:
            raise ValueError("Invalid value for `event_reports`, must not be `None`")  # noqa: E501
        if event_reports is not None and len(event_reports) < 1:
            raise ValueError("Invalid value for `event_reports`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._event_reports = event_reports
