# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.ausf_info import AusfInfo
from openapi_server.models.suci_info import SuciInfo
from openapi_server.models.supi_range import SupiRange
from openapi_server import util

from openapi_server.models.ausf_info import AusfInfo  # noqa: E501
from openapi_server.models.suci_info import SuciInfo  # noqa: E501
from openapi_server.models.supi_range import SupiRange  # noqa: E501

class NrfInfoServedAusfInfoValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_id=None, supi_ranges=None, routing_indicators=None, suci_infos=None):  # noqa: E501
        """NrfInfoServedAusfInfoValue - a model defined in OpenAPI

        :param group_id: The group_id of this NrfInfoServedAusfInfoValue.  # noqa: E501
        :type group_id: str
        :param supi_ranges: The supi_ranges of this NrfInfoServedAusfInfoValue.  # noqa: E501
        :type supi_ranges: List[SupiRange]
        :param routing_indicators: The routing_indicators of this NrfInfoServedAusfInfoValue.  # noqa: E501
        :type routing_indicators: List[str]
        :param suci_infos: The suci_infos of this NrfInfoServedAusfInfoValue.  # noqa: E501
        :type suci_infos: List[SuciInfo]
        """
        self.openapi_types = {
            'group_id': str,
            'supi_ranges': List[SupiRange],
            'routing_indicators': List[str],
            'suci_infos': List[SuciInfo]
        }

        self.attribute_map = {
            'group_id': 'groupId',
            'supi_ranges': 'supiRanges',
            'routing_indicators': 'routingIndicators',
            'suci_infos': 'suciInfos'
        }

        self._group_id = group_id
        self._supi_ranges = supi_ranges
        self._routing_indicators = routing_indicators
        self._suci_infos = suci_infos

    @classmethod
    def from_dict(cls, dikt) -> 'NrfInfoServedAusfInfoValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NrfInfo_servedAusfInfo_value of this NrfInfoServedAusfInfoValue.  # noqa: E501
        :rtype: NrfInfoServedAusfInfoValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id(self):
        """Gets the group_id of this NrfInfoServedAusfInfoValue.

        Identifier of a group of NFs.  # noqa: E501

        :return: The group_id of this NrfInfoServedAusfInfoValue.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this NrfInfoServedAusfInfoValue.

        Identifier of a group of NFs.  # noqa: E501

        :param group_id: The group_id of this NrfInfoServedAusfInfoValue.
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def supi_ranges(self):
        """Gets the supi_ranges of this NrfInfoServedAusfInfoValue.


        :return: The supi_ranges of this NrfInfoServedAusfInfoValue.
        :rtype: List[SupiRange]
        """
        return self._supi_ranges

    @supi_ranges.setter
    def supi_ranges(self, supi_ranges):
        """Sets the supi_ranges of this NrfInfoServedAusfInfoValue.


        :param supi_ranges: The supi_ranges of this NrfInfoServedAusfInfoValue.
        :type supi_ranges: List[SupiRange]
        """
        if supi_ranges is not None and len(supi_ranges) < 1:
            raise ValueError("Invalid value for `supi_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._supi_ranges = supi_ranges

    @property
    def routing_indicators(self):
        """Gets the routing_indicators of this NrfInfoServedAusfInfoValue.


        :return: The routing_indicators of this NrfInfoServedAusfInfoValue.
        :rtype: List[str]
        """
        return self._routing_indicators

    @routing_indicators.setter
    def routing_indicators(self, routing_indicators):
        """Sets the routing_indicators of this NrfInfoServedAusfInfoValue.


        :param routing_indicators: The routing_indicators of this NrfInfoServedAusfInfoValue.
        :type routing_indicators: List[str]
        """
        if routing_indicators is not None and len(routing_indicators) < 1:
            raise ValueError("Invalid value for `routing_indicators`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._routing_indicators = routing_indicators

    @property
    def suci_infos(self):
        """Gets the suci_infos of this NrfInfoServedAusfInfoValue.


        :return: The suci_infos of this NrfInfoServedAusfInfoValue.
        :rtype: List[SuciInfo]
        """
        return self._suci_infos

    @suci_infos.setter
    def suci_infos(self, suci_infos):
        """Sets the suci_infos of this NrfInfoServedAusfInfoValue.


        :param suci_infos: The suci_infos of this NrfInfoServedAusfInfoValue.
        :type suci_infos: List[SuciInfo]
        """
        if suci_infos is not None and len(suci_infos) < 1:
            raise ValueError("Invalid value for `suci_infos`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._suci_infos = suci_infos
