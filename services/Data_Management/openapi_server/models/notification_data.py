# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.change_item import ChangeItem
from openapi_server.models.condition_event_type import ConditionEventType
from openapi_server.models.nf_profile import NFProfile
from openapi_server.models.notification_event_type import NotificationEventType
from openapi_server.models.subscription_context import SubscriptionContext
from openapi_server import util

from openapi_server.models.change_item import ChangeItem  # noqa: E501
from openapi_server.models.condition_event_type import ConditionEventType  # noqa: E501
from openapi_server.models.nf_profile import NFProfile  # noqa: E501
from openapi_server.models.notification_event_type import NotificationEventType  # noqa: E501
from openapi_server.models.subscription_context import SubscriptionContext  # noqa: E501

class NotificationData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event=None, nf_instance_uri=None, nf_profile=None, profile_changes=None, condition_event=None, subscription_context=None, complete_nf_profile=None):  # noqa: E501
        """NotificationData - a model defined in OpenAPI

        :param event: The event of this NotificationData.  # noqa: E501
        :type event: NotificationEventType
        :param nf_instance_uri: The nf_instance_uri of this NotificationData.  # noqa: E501
        :type nf_instance_uri: str
        :param nf_profile: The nf_profile of this NotificationData.  # noqa: E501
        :type nf_profile: NFProfile
        :param profile_changes: The profile_changes of this NotificationData.  # noqa: E501
        :type profile_changes: List[ChangeItem]
        :param condition_event: The condition_event of this NotificationData.  # noqa: E501
        :type condition_event: ConditionEventType
        :param subscription_context: The subscription_context of this NotificationData.  # noqa: E501
        :type subscription_context: SubscriptionContext
        :param complete_nf_profile: The complete_nf_profile of this NotificationData.  # noqa: E501
        :type complete_nf_profile: NFProfile
        """
        self.openapi_types = {
            'event': NotificationEventType,
            'nf_instance_uri': str,
            'nf_profile': NFProfile,
            'profile_changes': List[ChangeItem],
            'condition_event': ConditionEventType,
            'subscription_context': SubscriptionContext,
            'complete_nf_profile': NFProfile
        }

        self.attribute_map = {
            'event': 'event',
            'nf_instance_uri': 'nfInstanceUri',
            'nf_profile': 'nfProfile',
            'profile_changes': 'profileChanges',
            'condition_event': 'conditionEvent',
            'subscription_context': 'subscriptionContext',
            'complete_nf_profile': 'completeNfProfile'
        }

        self._event = event
        self._nf_instance_uri = nf_instance_uri
        self._nf_profile = nf_profile
        self._profile_changes = profile_changes
        self._condition_event = condition_event
        self._subscription_context = subscription_context
        self._complete_nf_profile = complete_nf_profile

    @classmethod
    def from_dict(cls, dikt) -> 'NotificationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NotificationData of this NotificationData.  # noqa: E501
        :rtype: NotificationData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event(self):
        """Gets the event of this NotificationData.


        :return: The event of this NotificationData.
        :rtype: NotificationEventType
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this NotificationData.


        :param event: The event of this NotificationData.
        :type event: NotificationEventType
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")  # noqa: E501

        self._event = event

    @property
    def nf_instance_uri(self):
        """Gets the nf_instance_uri of this NotificationData.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :return: The nf_instance_uri of this NotificationData.
        :rtype: str
        """
        return self._nf_instance_uri

    @nf_instance_uri.setter
    def nf_instance_uri(self, nf_instance_uri):
        """Sets the nf_instance_uri of this NotificationData.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :param nf_instance_uri: The nf_instance_uri of this NotificationData.
        :type nf_instance_uri: str
        """
        if nf_instance_uri is None:
            raise ValueError("Invalid value for `nf_instance_uri`, must not be `None`")  # noqa: E501

        self._nf_instance_uri = nf_instance_uri

    @property
    def nf_profile(self):
        """Gets the nf_profile of this NotificationData.


        :return: The nf_profile of this NotificationData.
        :rtype: NFProfile
        """
        return self._nf_profile

    @nf_profile.setter
    def nf_profile(self, nf_profile):
        """Sets the nf_profile of this NotificationData.


        :param nf_profile: The nf_profile of this NotificationData.
        :type nf_profile: NFProfile
        """

        self._nf_profile = nf_profile

    @property
    def profile_changes(self):
        """Gets the profile_changes of this NotificationData.


        :return: The profile_changes of this NotificationData.
        :rtype: List[ChangeItem]
        """
        return self._profile_changes

    @profile_changes.setter
    def profile_changes(self, profile_changes):
        """Sets the profile_changes of this NotificationData.


        :param profile_changes: The profile_changes of this NotificationData.
        :type profile_changes: List[ChangeItem]
        """
        if profile_changes is not None and len(profile_changes) < 1:
            raise ValueError("Invalid value for `profile_changes`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._profile_changes = profile_changes

    @property
    def condition_event(self):
        """Gets the condition_event of this NotificationData.


        :return: The condition_event of this NotificationData.
        :rtype: ConditionEventType
        """
        return self._condition_event

    @condition_event.setter
    def condition_event(self, condition_event):
        """Sets the condition_event of this NotificationData.


        :param condition_event: The condition_event of this NotificationData.
        :type condition_event: ConditionEventType
        """

        self._condition_event = condition_event

    @property
    def subscription_context(self):
        """Gets the subscription_context of this NotificationData.


        :return: The subscription_context of this NotificationData.
        :rtype: SubscriptionContext
        """
        return self._subscription_context

    @subscription_context.setter
    def subscription_context(self, subscription_context):
        """Sets the subscription_context of this NotificationData.


        :param subscription_context: The subscription_context of this NotificationData.
        :type subscription_context: SubscriptionContext
        """

        self._subscription_context = subscription_context

    @property
    def complete_nf_profile(self):
        """Gets the complete_nf_profile of this NotificationData.


        :return: The complete_nf_profile of this NotificationData.
        :rtype: NFProfile
        """
        return self._complete_nf_profile

    @complete_nf_profile.setter
    def complete_nf_profile(self, complete_nf_profile):
        """Sets the complete_nf_profile of this NotificationData.


        :param complete_nf_profile: The complete_nf_profile of this NotificationData.
        :type complete_nf_profile: NFProfile
        """

        self._complete_nf_profile = complete_nf_profile
