# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.af_event import AfEvent
from openapi_server.models.snssai_info_item import SnssaiInfoItem
from openapi_server import util

from openapi_server.models.af_event import AfEvent  # noqa: E501
from openapi_server.models.snssai_info_item import SnssaiInfoItem  # noqa: E501

class TrustAfInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s_nssai_info_list=None, af_events=None, app_ids=None, internal_group_id=None, mapping_ind=False):  # noqa: E501
        """TrustAfInfo - a model defined in OpenAPI

        :param s_nssai_info_list: The s_nssai_info_list of this TrustAfInfo.  # noqa: E501
        :type s_nssai_info_list: List[SnssaiInfoItem]
        :param af_events: The af_events of this TrustAfInfo.  # noqa: E501
        :type af_events: List[AfEvent]
        :param app_ids: The app_ids of this TrustAfInfo.  # noqa: E501
        :type app_ids: List[str]
        :param internal_group_id: The internal_group_id of this TrustAfInfo.  # noqa: E501
        :type internal_group_id: List[str]
        :param mapping_ind: The mapping_ind of this TrustAfInfo.  # noqa: E501
        :type mapping_ind: bool
        """
        self.openapi_types = {
            's_nssai_info_list': List[SnssaiInfoItem],
            'af_events': List[AfEvent],
            'app_ids': List[str],
            'internal_group_id': List[str],
            'mapping_ind': bool
        }

        self.attribute_map = {
            's_nssai_info_list': 'sNssaiInfoList',
            'af_events': 'afEvents',
            'app_ids': 'appIds',
            'internal_group_id': 'internalGroupId',
            'mapping_ind': 'mappingInd'
        }

        self._s_nssai_info_list = s_nssai_info_list
        self._af_events = af_events
        self._app_ids = app_ids
        self._internal_group_id = internal_group_id
        self._mapping_ind = mapping_ind

    @classmethod
    def from_dict(cls, dikt) -> 'TrustAfInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TrustAfInfo of this TrustAfInfo.  # noqa: E501
        :rtype: TrustAfInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s_nssai_info_list(self):
        """Gets the s_nssai_info_list of this TrustAfInfo.


        :return: The s_nssai_info_list of this TrustAfInfo.
        :rtype: List[SnssaiInfoItem]
        """
        return self._s_nssai_info_list

    @s_nssai_info_list.setter
    def s_nssai_info_list(self, s_nssai_info_list):
        """Sets the s_nssai_info_list of this TrustAfInfo.


        :param s_nssai_info_list: The s_nssai_info_list of this TrustAfInfo.
        :type s_nssai_info_list: List[SnssaiInfoItem]
        """
        if s_nssai_info_list is not None and len(s_nssai_info_list) < 1:
            raise ValueError("Invalid value for `s_nssai_info_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._s_nssai_info_list = s_nssai_info_list

    @property
    def af_events(self):
        """Gets the af_events of this TrustAfInfo.


        :return: The af_events of this TrustAfInfo.
        :rtype: List[AfEvent]
        """
        return self._af_events

    @af_events.setter
    def af_events(self, af_events):
        """Sets the af_events of this TrustAfInfo.


        :param af_events: The af_events of this TrustAfInfo.
        :type af_events: List[AfEvent]
        """
        if af_events is not None and len(af_events) < 1:
            raise ValueError("Invalid value for `af_events`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._af_events = af_events

    @property
    def app_ids(self):
        """Gets the app_ids of this TrustAfInfo.


        :return: The app_ids of this TrustAfInfo.
        :rtype: List[str]
        """
        return self._app_ids

    @app_ids.setter
    def app_ids(self, app_ids):
        """Sets the app_ids of this TrustAfInfo.


        :param app_ids: The app_ids of this TrustAfInfo.
        :type app_ids: List[str]
        """
        if app_ids is not None and len(app_ids) < 1:
            raise ValueError("Invalid value for `app_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._app_ids = app_ids

    @property
    def internal_group_id(self):
        """Gets the internal_group_id of this TrustAfInfo.


        :return: The internal_group_id of this TrustAfInfo.
        :rtype: List[str]
        """
        return self._internal_group_id

    @internal_group_id.setter
    def internal_group_id(self, internal_group_id):
        """Sets the internal_group_id of this TrustAfInfo.


        :param internal_group_id: The internal_group_id of this TrustAfInfo.
        :type internal_group_id: List[str]
        """
        if internal_group_id is not None and len(internal_group_id) < 1:
            raise ValueError("Invalid value for `internal_group_id`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._internal_group_id = internal_group_id

    @property
    def mapping_ind(self):
        """Gets the mapping_ind of this TrustAfInfo.


        :return: The mapping_ind of this TrustAfInfo.
        :rtype: bool
        """
        return self._mapping_ind

    @mapping_ind.setter
    def mapping_ind(self, mapping_ind):
        """Sets the mapping_ind of this TrustAfInfo.


        :param mapping_ind: The mapping_ind of this TrustAfInfo.
        :type mapping_ind: bool
        """

        self._mapping_ind = mapping_ind
