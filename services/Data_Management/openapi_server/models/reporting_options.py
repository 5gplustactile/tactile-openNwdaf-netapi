# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.time_window import TimeWindow
from openapi_server import util

from openapi_server.models.time_window import TimeWindow  # noqa: E501

class ReportingOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notify_window=None, notify_period=None, notify_period_inc=None, dep_event_sub_id=None, min_clubbed_notif=None, max_clubbed_notif=None):  # noqa: E501
        """ReportingOptions - a model defined in OpenAPI

        :param notify_window: The notify_window of this ReportingOptions.  # noqa: E501
        :type notify_window: TimeWindow
        :param notify_period: The notify_period of this ReportingOptions.  # noqa: E501
        :type notify_period: int
        :param notify_period_inc: The notify_period_inc of this ReportingOptions.  # noqa: E501
        :type notify_period_inc: int
        :param dep_event_sub_id: The dep_event_sub_id of this ReportingOptions.  # noqa: E501
        :type dep_event_sub_id: str
        :param min_clubbed_notif: The min_clubbed_notif of this ReportingOptions.  # noqa: E501
        :type min_clubbed_notif: int
        :param max_clubbed_notif: The max_clubbed_notif of this ReportingOptions.  # noqa: E501
        :type max_clubbed_notif: int
        """
        self.openapi_types = {
            'notify_window': TimeWindow,
            'notify_period': int,
            'notify_period_inc': int,
            'dep_event_sub_id': str,
            'min_clubbed_notif': int,
            'max_clubbed_notif': int
        }

        self.attribute_map = {
            'notify_window': 'notifyWindow',
            'notify_period': 'notifyPeriod',
            'notify_period_inc': 'notifyPeriodInc',
            'dep_event_sub_id': 'depEventSubId',
            'min_clubbed_notif': 'minClubbedNotif',
            'max_clubbed_notif': 'maxClubbedNotif'
        }

        self._notify_window = notify_window
        self._notify_period = notify_period
        self._notify_period_inc = notify_period_inc
        self._dep_event_sub_id = dep_event_sub_id
        self._min_clubbed_notif = min_clubbed_notif
        self._max_clubbed_notif = max_clubbed_notif

    @classmethod
    def from_dict(cls, dikt) -> 'ReportingOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReportingOptions of this ReportingOptions.  # noqa: E501
        :rtype: ReportingOptions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notify_window(self):
        """Gets the notify_window of this ReportingOptions.


        :return: The notify_window of this ReportingOptions.
        :rtype: TimeWindow
        """
        return self._notify_window

    @notify_window.setter
    def notify_window(self, notify_window):
        """Sets the notify_window of this ReportingOptions.


        :param notify_window: The notify_window of this ReportingOptions.
        :type notify_window: TimeWindow
        """

        self._notify_window = notify_window

    @property
    def notify_period(self):
        """Gets the notify_period of this ReportingOptions.

        indicating a time in seconds.  # noqa: E501

        :return: The notify_period of this ReportingOptions.
        :rtype: int
        """
        return self._notify_period

    @notify_period.setter
    def notify_period(self, notify_period):
        """Sets the notify_period of this ReportingOptions.

        indicating a time in seconds.  # noqa: E501

        :param notify_period: The notify_period of this ReportingOptions.
        :type notify_period: int
        """

        self._notify_period = notify_period

    @property
    def notify_period_inc(self):
        """Gets the notify_period_inc of this ReportingOptions.

        indicating a time in seconds.  # noqa: E501

        :return: The notify_period_inc of this ReportingOptions.
        :rtype: int
        """
        return self._notify_period_inc

    @notify_period_inc.setter
    def notify_period_inc(self, notify_period_inc):
        """Sets the notify_period_inc of this ReportingOptions.

        indicating a time in seconds.  # noqa: E501

        :param notify_period_inc: The notify_period_inc of this ReportingOptions.
        :type notify_period_inc: int
        """

        self._notify_period_inc = notify_period_inc

    @property
    def dep_event_sub_id(self):
        """Gets the dep_event_sub_id of this ReportingOptions.

        Notifications for the present subscription are sent only upon occurrence of events of the subscription with identifier that matches this attribute.   # noqa: E501

        :return: The dep_event_sub_id of this ReportingOptions.
        :rtype: str
        """
        return self._dep_event_sub_id

    @dep_event_sub_id.setter
    def dep_event_sub_id(self, dep_event_sub_id):
        """Sets the dep_event_sub_id of this ReportingOptions.

        Notifications for the present subscription are sent only upon occurrence of events of the subscription with identifier that matches this attribute.   # noqa: E501

        :param dep_event_sub_id: The dep_event_sub_id of this ReportingOptions.
        :type dep_event_sub_id: str
        """

        self._dep_event_sub_id = dep_event_sub_id

    @property
    def min_clubbed_notif(self):
        """Gets the min_clubbed_notif of this ReportingOptions.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The min_clubbed_notif of this ReportingOptions.
        :rtype: int
        """
        return self._min_clubbed_notif

    @min_clubbed_notif.setter
    def min_clubbed_notif(self, min_clubbed_notif):
        """Sets the min_clubbed_notif of this ReportingOptions.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param min_clubbed_notif: The min_clubbed_notif of this ReportingOptions.
        :type min_clubbed_notif: int
        """
        if min_clubbed_notif is not None and min_clubbed_notif < 0:  # noqa: E501
            raise ValueError("Invalid value for `min_clubbed_notif`, must be a value greater than or equal to `0`")  # noqa: E501

        self._min_clubbed_notif = min_clubbed_notif

    @property
    def max_clubbed_notif(self):
        """Gets the max_clubbed_notif of this ReportingOptions.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The max_clubbed_notif of this ReportingOptions.
        :rtype: int
        """
        return self._max_clubbed_notif

    @max_clubbed_notif.setter
    def max_clubbed_notif(self, max_clubbed_notif):
        """Sets the max_clubbed_notif of this ReportingOptions.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param max_clubbed_notif: The max_clubbed_notif of this ReportingOptions.
        :type max_clubbed_notif: int
        """
        if max_clubbed_notif is not None and max_clubbed_notif < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_clubbed_notif`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_clubbed_notif = max_clubbed_notif
