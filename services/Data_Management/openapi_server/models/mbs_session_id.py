# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.ssm import Ssm
from openapi_server.models.tmgi import Tmgi
import re
from openapi_server import util

from openapi_server.models.ssm import Ssm  # noqa: E501
from openapi_server.models.tmgi import Tmgi  # noqa: E501
import re  # noqa: E501

class MbsSessionId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tmgi=None, ssm=None, nid=None):  # noqa: E501
        """MbsSessionId - a model defined in OpenAPI

        :param tmgi: The tmgi of this MbsSessionId.  # noqa: E501
        :type tmgi: Tmgi
        :param ssm: The ssm of this MbsSessionId.  # noqa: E501
        :type ssm: Ssm
        :param nid: The nid of this MbsSessionId.  # noqa: E501
        :type nid: str
        """
        self.openapi_types = {
            'tmgi': Tmgi,
            'ssm': Ssm,
            'nid': str
        }

        self.attribute_map = {
            'tmgi': 'tmgi',
            'ssm': 'ssm',
            'nid': 'nid'
        }

        self._tmgi = tmgi
        self._ssm = ssm
        self._nid = nid

    @classmethod
    def from_dict(cls, dikt) -> 'MbsSessionId':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MbsSessionId of this MbsSessionId.  # noqa: E501
        :rtype: MbsSessionId
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tmgi(self):
        """Gets the tmgi of this MbsSessionId.


        :return: The tmgi of this MbsSessionId.
        :rtype: Tmgi
        """
        return self._tmgi

    @tmgi.setter
    def tmgi(self, tmgi):
        """Sets the tmgi of this MbsSessionId.


        :param tmgi: The tmgi of this MbsSessionId.
        :type tmgi: Tmgi
        """

        self._tmgi = tmgi

    @property
    def ssm(self):
        """Gets the ssm of this MbsSessionId.


        :return: The ssm of this MbsSessionId.
        :rtype: Ssm
        """
        return self._ssm

    @ssm.setter
    def ssm(self, ssm):
        """Sets the ssm of this MbsSessionId.


        :param ssm: The ssm of this MbsSessionId.
        :type ssm: Ssm
        """

        self._ssm = ssm

    @property
    def nid(self):
        """Gets the nid of this MbsSessionId.

        This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1).    # noqa: E501

        :return: The nid of this MbsSessionId.
        :rtype: str
        """
        return self._nid

    @nid.setter
    def nid(self, nid):
        """Sets the nid of this MbsSessionId.

        This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1).    # noqa: E501

        :param nid: The nid of this MbsSessionId.
        :type nid: str
        """
        if nid is not None and not re.search(r'^[A-Fa-f0-9]{11}$', nid):  # noqa: E501
            raise ValueError("Invalid value for `nid`, must be a follow pattern or equal to `/^[A-Fa-f0-9]{11}$/`")  # noqa: E501

        self._nid = nid
