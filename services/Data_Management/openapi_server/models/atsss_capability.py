# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class AtsssCapability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, atsss_ll=False, mptcp=False, rtt_without_pmf=False):  # noqa: E501
        """AtsssCapability - a model defined in OpenAPI

        :param atsss_ll: The atsss_ll of this AtsssCapability.  # noqa: E501
        :type atsss_ll: bool
        :param mptcp: The mptcp of this AtsssCapability.  # noqa: E501
        :type mptcp: bool
        :param rtt_without_pmf: The rtt_without_pmf of this AtsssCapability.  # noqa: E501
        :type rtt_without_pmf: bool
        """
        self.openapi_types = {
            'atsss_ll': bool,
            'mptcp': bool,
            'rtt_without_pmf': bool
        }

        self.attribute_map = {
            'atsss_ll': 'atsssLL',
            'mptcp': 'mptcp',
            'rtt_without_pmf': 'rttWithoutPmf'
        }

        self._atsss_ll = atsss_ll
        self._mptcp = mptcp
        self._rtt_without_pmf = rtt_without_pmf

    @classmethod
    def from_dict(cls, dikt) -> 'AtsssCapability':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AtsssCapability of this AtsssCapability.  # noqa: E501
        :rtype: AtsssCapability
        """
        return util.deserialize_model(dikt, cls)

    @property
    def atsss_ll(self):
        """Gets the atsss_ll of this AtsssCapability.

        Indicates the ATSSS-LL capability to support procedures related to Access Traffic Steering, Switching, Splitting (see clauses 4.2.10, 5.32 of 3GPP TS 23.501). true: Supported false (default): Not Supported   # noqa: E501

        :return: The atsss_ll of this AtsssCapability.
        :rtype: bool
        """
        return self._atsss_ll

    @atsss_ll.setter
    def atsss_ll(self, atsss_ll):
        """Sets the atsss_ll of this AtsssCapability.

        Indicates the ATSSS-LL capability to support procedures related to Access Traffic Steering, Switching, Splitting (see clauses 4.2.10, 5.32 of 3GPP TS 23.501). true: Supported false (default): Not Supported   # noqa: E501

        :param atsss_ll: The atsss_ll of this AtsssCapability.
        :type atsss_ll: bool
        """

        self._atsss_ll = atsss_ll

    @property
    def mptcp(self):
        """Gets the mptcp of this AtsssCapability.

        Indicates the MPTCP capability to support procedures related to Access Traffic Steering, Switching, Splitting (see clauses 4.2.10, 5.32 of 3GPP TS 23.501 true: Supported false (default): Not Supported   # noqa: E501

        :return: The mptcp of this AtsssCapability.
        :rtype: bool
        """
        return self._mptcp

    @mptcp.setter
    def mptcp(self, mptcp):
        """Sets the mptcp of this AtsssCapability.

        Indicates the MPTCP capability to support procedures related to Access Traffic Steering, Switching, Splitting (see clauses 4.2.10, 5.32 of 3GPP TS 23.501 true: Supported false (default): Not Supported   # noqa: E501

        :param mptcp: The mptcp of this AtsssCapability.
        :type mptcp: bool
        """

        self._mptcp = mptcp

    @property
    def rtt_without_pmf(self):
        """Gets the rtt_without_pmf of this AtsssCapability.

        This IE is only used by the UPF to indicate whether the UPF supports RTT measurement without PMF (see clauses 5.32.2, 6.3.3.3 of 3GPP TS 23.501 true: Supported false (default): Not Supported   # noqa: E501

        :return: The rtt_without_pmf of this AtsssCapability.
        :rtype: bool
        """
        return self._rtt_without_pmf

    @rtt_without_pmf.setter
    def rtt_without_pmf(self, rtt_without_pmf):
        """Sets the rtt_without_pmf of this AtsssCapability.

        This IE is only used by the UPF to indicate whether the UPF supports RTT measurement without PMF (see clauses 5.32.2, 6.3.3.3 of 3GPP TS 23.501 true: Supported false (default): Not Supported   # noqa: E501

        :param rtt_without_pmf: The rtt_without_pmf of this AtsssCapability.
        :type rtt_without_pmf: bool
        """

        self._rtt_without_pmf = rtt_without_pmf
