# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class FetchInstruction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fetch_uri=None, fetch_corr_ids=None, expiry=None):  # noqa: E501
        """FetchInstruction - a model defined in OpenAPI

        :param fetch_uri: The fetch_uri of this FetchInstruction.  # noqa: E501
        :type fetch_uri: str
        :param fetch_corr_ids: The fetch_corr_ids of this FetchInstruction.  # noqa: E501
        :type fetch_corr_ids: List[str]
        :param expiry: The expiry of this FetchInstruction.  # noqa: E501
        :type expiry: datetime
        """
        self.openapi_types = {
            'fetch_uri': str,
            'fetch_corr_ids': List[str],
            'expiry': datetime
        }

        self.attribute_map = {
            'fetch_uri': 'fetchUri',
            'fetch_corr_ids': 'fetchCorrIds',
            'expiry': 'expiry'
        }

        self._fetch_uri = fetch_uri
        self._fetch_corr_ids = fetch_corr_ids
        self._expiry = expiry

    @classmethod
    def from_dict(cls, dikt) -> 'FetchInstruction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FetchInstruction of this FetchInstruction.  # noqa: E501
        :rtype: FetchInstruction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fetch_uri(self):
        """Gets the fetch_uri of this FetchInstruction.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :return: The fetch_uri of this FetchInstruction.
        :rtype: str
        """
        return self._fetch_uri

    @fetch_uri.setter
    def fetch_uri(self, fetch_uri):
        """Sets the fetch_uri of this FetchInstruction.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :param fetch_uri: The fetch_uri of this FetchInstruction.
        :type fetch_uri: str
        """
        if fetch_uri is None:
            raise ValueError("Invalid value for `fetch_uri`, must not be `None`")  # noqa: E501

        self._fetch_uri = fetch_uri

    @property
    def fetch_corr_ids(self):
        """Gets the fetch_corr_ids of this FetchInstruction.

        The fetch correlation identifier(s) of the MFAF Data or Analytics.  # noqa: E501

        :return: The fetch_corr_ids of this FetchInstruction.
        :rtype: List[str]
        """
        return self._fetch_corr_ids

    @fetch_corr_ids.setter
    def fetch_corr_ids(self, fetch_corr_ids):
        """Sets the fetch_corr_ids of this FetchInstruction.

        The fetch correlation identifier(s) of the MFAF Data or Analytics.  # noqa: E501

        :param fetch_corr_ids: The fetch_corr_ids of this FetchInstruction.
        :type fetch_corr_ids: List[str]
        """
        if fetch_corr_ids is None:
            raise ValueError("Invalid value for `fetch_corr_ids`, must not be `None`")  # noqa: E501
        if fetch_corr_ids is not None and len(fetch_corr_ids) < 1:
            raise ValueError("Invalid value for `fetch_corr_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._fetch_corr_ids = fetch_corr_ids

    @property
    def expiry(self):
        """Gets the expiry of this FetchInstruction.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The expiry of this FetchInstruction.
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this FetchInstruction.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param expiry: The expiry of this FetchInstruction.
        :type expiry: datetime
        """

        self._expiry = expiry
