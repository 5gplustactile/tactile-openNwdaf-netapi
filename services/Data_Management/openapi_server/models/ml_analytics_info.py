# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.nwdaf_event import NwdafEvent
from openapi_server.models.snssai import Snssai
from openapi_server.models.tai import Tai
from openapi_server import util

from openapi_server.models.nwdaf_event import NwdafEvent  # noqa: E501
from openapi_server.models.snssai import Snssai  # noqa: E501
from openapi_server.models.tai import Tai  # noqa: E501

class MlAnalyticsInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ml_analytics_ids=None, snssai_list=None, tracking_area_list=None):  # noqa: E501
        """MlAnalyticsInfo - a model defined in OpenAPI

        :param ml_analytics_ids: The ml_analytics_ids of this MlAnalyticsInfo.  # noqa: E501
        :type ml_analytics_ids: List[NwdafEvent]
        :param snssai_list: The snssai_list of this MlAnalyticsInfo.  # noqa: E501
        :type snssai_list: List[Snssai]
        :param tracking_area_list: The tracking_area_list of this MlAnalyticsInfo.  # noqa: E501
        :type tracking_area_list: List[Tai]
        """
        self.openapi_types = {
            'ml_analytics_ids': List[NwdafEvent],
            'snssai_list': List[Snssai],
            'tracking_area_list': List[Tai]
        }

        self.attribute_map = {
            'ml_analytics_ids': 'mlAnalyticsIds',
            'snssai_list': 'snssaiList',
            'tracking_area_list': 'trackingAreaList'
        }

        self._ml_analytics_ids = ml_analytics_ids
        self._snssai_list = snssai_list
        self._tracking_area_list = tracking_area_list

    @classmethod
    def from_dict(cls, dikt) -> 'MlAnalyticsInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MlAnalyticsInfo of this MlAnalyticsInfo.  # noqa: E501
        :rtype: MlAnalyticsInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ml_analytics_ids(self):
        """Gets the ml_analytics_ids of this MlAnalyticsInfo.


        :return: The ml_analytics_ids of this MlAnalyticsInfo.
        :rtype: List[NwdafEvent]
        """
        return self._ml_analytics_ids

    @ml_analytics_ids.setter
    def ml_analytics_ids(self, ml_analytics_ids):
        """Sets the ml_analytics_ids of this MlAnalyticsInfo.


        :param ml_analytics_ids: The ml_analytics_ids of this MlAnalyticsInfo.
        :type ml_analytics_ids: List[NwdafEvent]
        """
        if ml_analytics_ids is not None and len(ml_analytics_ids) < 1:
            raise ValueError("Invalid value for `ml_analytics_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ml_analytics_ids = ml_analytics_ids

    @property
    def snssai_list(self):
        """Gets the snssai_list of this MlAnalyticsInfo.


        :return: The snssai_list of this MlAnalyticsInfo.
        :rtype: List[Snssai]
        """
        return self._snssai_list

    @snssai_list.setter
    def snssai_list(self, snssai_list):
        """Sets the snssai_list of this MlAnalyticsInfo.


        :param snssai_list: The snssai_list of this MlAnalyticsInfo.
        :type snssai_list: List[Snssai]
        """
        if snssai_list is not None and len(snssai_list) < 1:
            raise ValueError("Invalid value for `snssai_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._snssai_list = snssai_list

    @property
    def tracking_area_list(self):
        """Gets the tracking_area_list of this MlAnalyticsInfo.


        :return: The tracking_area_list of this MlAnalyticsInfo.
        :rtype: List[Tai]
        """
        return self._tracking_area_list

    @tracking_area_list.setter
    def tracking_area_list(self, tracking_area_list):
        """Sets the tracking_area_list of this MlAnalyticsInfo.


        :param tracking_area_list: The tracking_area_list of this MlAnalyticsInfo.
        :type tracking_area_list: List[Tai]
        """
        if tracking_area_list is not None and len(tracking_area_list) < 1:
            raise ValueError("Invalid value for `tracking_area_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._tracking_area_list = tracking_area_list
