# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.collective_behaviour_info import CollectiveBehaviourInfo
from openapi_server.models.dispersion_collection1 import DispersionCollection1
from openapi_server.models.exception_info import ExceptionInfo
from openapi_server.models.ms_access_activity_collection import MSAccessActivityCollection
from openapi_server.models.ms_consumption_collection import MsConsumptionCollection
from openapi_server.models.ms_dyn_policy_invocation_collection import MsDynPolicyInvocationCollection
from openapi_server.models.ms_net_ass_invocation_collection import MsNetAssInvocationCollection
from openapi_server.models.ms_qoe_metrics_collection import MsQoeMetricsCollection
from openapi_server.models.nef_event import NefEvent
from openapi_server.models.performance_data_info import PerformanceDataInfo
from openapi_server.models.service_experience_info1 import ServiceExperienceInfo1
from openapi_server.models.ue_communication_info import UeCommunicationInfo
from openapi_server.models.ue_mobility_info import UeMobilityInfo
from openapi_server.models.user_data_congestion_collection import UserDataCongestionCollection
from openapi_server import util

from openapi_server.models.collective_behaviour_info import CollectiveBehaviourInfo  # noqa: E501
from openapi_server.models.dispersion_collection1 import DispersionCollection1  # noqa: E501
from openapi_server.models.exception_info import ExceptionInfo  # noqa: E501
from openapi_server.models.ms_access_activity_collection import MSAccessActivityCollection  # noqa: E501
from openapi_server.models.ms_consumption_collection import MsConsumptionCollection  # noqa: E501
from openapi_server.models.ms_dyn_policy_invocation_collection import MsDynPolicyInvocationCollection  # noqa: E501
from openapi_server.models.ms_net_ass_invocation_collection import MsNetAssInvocationCollection  # noqa: E501
from openapi_server.models.ms_qoe_metrics_collection import MsQoeMetricsCollection  # noqa: E501
from openapi_server.models.nef_event import NefEvent  # noqa: E501
from openapi_server.models.performance_data_info import PerformanceDataInfo  # noqa: E501
from openapi_server.models.service_experience_info1 import ServiceExperienceInfo1  # noqa: E501
from openapi_server.models.ue_communication_info import UeCommunicationInfo  # noqa: E501
from openapi_server.models.ue_mobility_info import UeMobilityInfo  # noqa: E501
from openapi_server.models.user_data_congestion_collection import UserDataCongestionCollection  # noqa: E501

class NefEventNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event=None, time_stamp=None, svc_exprc_infos=None, ue_mobility_infos=None, ue_comm_infos=None, excep_infos=None, congestion_infos=None, perf_data_infos=None, dispersion_infos=None, coll_bhvr_infs=None, ms_qoe_metr_infos=None, ms_consump_infos=None, ms_net_ass_inv_infos=None, ms_dyn_ply_inv_infos=None, ms_acc_act_infos=None):  # noqa: E501
        """NefEventNotification - a model defined in OpenAPI

        :param event: The event of this NefEventNotification.  # noqa: E501
        :type event: NefEvent
        :param time_stamp: The time_stamp of this NefEventNotification.  # noqa: E501
        :type time_stamp: datetime
        :param svc_exprc_infos: The svc_exprc_infos of this NefEventNotification.  # noqa: E501
        :type svc_exprc_infos: List[ServiceExperienceInfo1]
        :param ue_mobility_infos: The ue_mobility_infos of this NefEventNotification.  # noqa: E501
        :type ue_mobility_infos: List[UeMobilityInfo]
        :param ue_comm_infos: The ue_comm_infos of this NefEventNotification.  # noqa: E501
        :type ue_comm_infos: List[UeCommunicationInfo]
        :param excep_infos: The excep_infos of this NefEventNotification.  # noqa: E501
        :type excep_infos: List[ExceptionInfo]
        :param congestion_infos: The congestion_infos of this NefEventNotification.  # noqa: E501
        :type congestion_infos: List[UserDataCongestionCollection]
        :param perf_data_infos: The perf_data_infos of this NefEventNotification.  # noqa: E501
        :type perf_data_infos: List[PerformanceDataInfo]
        :param dispersion_infos: The dispersion_infos of this NefEventNotification.  # noqa: E501
        :type dispersion_infos: List[DispersionCollection1]
        :param coll_bhvr_infs: The coll_bhvr_infs of this NefEventNotification.  # noqa: E501
        :type coll_bhvr_infs: List[CollectiveBehaviourInfo]
        :param ms_qoe_metr_infos: The ms_qoe_metr_infos of this NefEventNotification.  # noqa: E501
        :type ms_qoe_metr_infos: List[MsQoeMetricsCollection]
        :param ms_consump_infos: The ms_consump_infos of this NefEventNotification.  # noqa: E501
        :type ms_consump_infos: List[MsConsumptionCollection]
        :param ms_net_ass_inv_infos: The ms_net_ass_inv_infos of this NefEventNotification.  # noqa: E501
        :type ms_net_ass_inv_infos: List[MsNetAssInvocationCollection]
        :param ms_dyn_ply_inv_infos: The ms_dyn_ply_inv_infos of this NefEventNotification.  # noqa: E501
        :type ms_dyn_ply_inv_infos: List[MsDynPolicyInvocationCollection]
        :param ms_acc_act_infos: The ms_acc_act_infos of this NefEventNotification.  # noqa: E501
        :type ms_acc_act_infos: List[MSAccessActivityCollection]
        """
        self.openapi_types = {
            'event': NefEvent,
            'time_stamp': datetime,
            'svc_exprc_infos': List[ServiceExperienceInfo1],
            'ue_mobility_infos': List[UeMobilityInfo],
            'ue_comm_infos': List[UeCommunicationInfo],
            'excep_infos': List[ExceptionInfo],
            'congestion_infos': List[UserDataCongestionCollection],
            'perf_data_infos': List[PerformanceDataInfo],
            'dispersion_infos': List[DispersionCollection1],
            'coll_bhvr_infs': List[CollectiveBehaviourInfo],
            'ms_qoe_metr_infos': List[MsQoeMetricsCollection],
            'ms_consump_infos': List[MsConsumptionCollection],
            'ms_net_ass_inv_infos': List[MsNetAssInvocationCollection],
            'ms_dyn_ply_inv_infos': List[MsDynPolicyInvocationCollection],
            'ms_acc_act_infos': List[MSAccessActivityCollection]
        }

        self.attribute_map = {
            'event': 'event',
            'time_stamp': 'timeStamp',
            'svc_exprc_infos': 'svcExprcInfos',
            'ue_mobility_infos': 'ueMobilityInfos',
            'ue_comm_infos': 'ueCommInfos',
            'excep_infos': 'excepInfos',
            'congestion_infos': 'congestionInfos',
            'perf_data_infos': 'perfDataInfos',
            'dispersion_infos': 'dispersionInfos',
            'coll_bhvr_infs': 'collBhvrInfs',
            'ms_qoe_metr_infos': 'msQoeMetrInfos',
            'ms_consump_infos': 'msConsumpInfos',
            'ms_net_ass_inv_infos': 'msNetAssInvInfos',
            'ms_dyn_ply_inv_infos': 'msDynPlyInvInfos',
            'ms_acc_act_infos': 'msAccActInfos'
        }

        self._event = event
        self._time_stamp = time_stamp
        self._svc_exprc_infos = svc_exprc_infos
        self._ue_mobility_infos = ue_mobility_infos
        self._ue_comm_infos = ue_comm_infos
        self._excep_infos = excep_infos
        self._congestion_infos = congestion_infos
        self._perf_data_infos = perf_data_infos
        self._dispersion_infos = dispersion_infos
        self._coll_bhvr_infs = coll_bhvr_infs
        self._ms_qoe_metr_infos = ms_qoe_metr_infos
        self._ms_consump_infos = ms_consump_infos
        self._ms_net_ass_inv_infos = ms_net_ass_inv_infos
        self._ms_dyn_ply_inv_infos = ms_dyn_ply_inv_infos
        self._ms_acc_act_infos = ms_acc_act_infos

    @classmethod
    def from_dict(cls, dikt) -> 'NefEventNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NefEventNotification of this NefEventNotification.  # noqa: E501
        :rtype: NefEventNotification
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event(self):
        """Gets the event of this NefEventNotification.


        :return: The event of this NefEventNotification.
        :rtype: NefEvent
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this NefEventNotification.


        :param event: The event of this NefEventNotification.
        :type event: NefEvent
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")  # noqa: E501

        self._event = event

    @property
    def time_stamp(self):
        """Gets the time_stamp of this NefEventNotification.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The time_stamp of this NefEventNotification.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this NefEventNotification.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param time_stamp: The time_stamp of this NefEventNotification.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")  # noqa: E501

        self._time_stamp = time_stamp

    @property
    def svc_exprc_infos(self):
        """Gets the svc_exprc_infos of this NefEventNotification.


        :return: The svc_exprc_infos of this NefEventNotification.
        :rtype: List[ServiceExperienceInfo1]
        """
        return self._svc_exprc_infos

    @svc_exprc_infos.setter
    def svc_exprc_infos(self, svc_exprc_infos):
        """Sets the svc_exprc_infos of this NefEventNotification.


        :param svc_exprc_infos: The svc_exprc_infos of this NefEventNotification.
        :type svc_exprc_infos: List[ServiceExperienceInfo1]
        """
        if svc_exprc_infos is not None and len(svc_exprc_infos) < 1:
            raise ValueError("Invalid value for `svc_exprc_infos`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._svc_exprc_infos = svc_exprc_infos

    @property
    def ue_mobility_infos(self):
        """Gets the ue_mobility_infos of this NefEventNotification.


        :return: The ue_mobility_infos of this NefEventNotification.
        :rtype: List[UeMobilityInfo]
        """
        return self._ue_mobility_infos

    @ue_mobility_infos.setter
    def ue_mobility_infos(self, ue_mobility_infos):
        """Sets the ue_mobility_infos of this NefEventNotification.


        :param ue_mobility_infos: The ue_mobility_infos of this NefEventNotification.
        :type ue_mobility_infos: List[UeMobilityInfo]
        """
        if ue_mobility_infos is not None and len(ue_mobility_infos) < 1:
            raise ValueError("Invalid value for `ue_mobility_infos`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ue_mobility_infos = ue_mobility_infos

    @property
    def ue_comm_infos(self):
        """Gets the ue_comm_infos of this NefEventNotification.


        :return: The ue_comm_infos of this NefEventNotification.
        :rtype: List[UeCommunicationInfo]
        """
        return self._ue_comm_infos

    @ue_comm_infos.setter
    def ue_comm_infos(self, ue_comm_infos):
        """Sets the ue_comm_infos of this NefEventNotification.


        :param ue_comm_infos: The ue_comm_infos of this NefEventNotification.
        :type ue_comm_infos: List[UeCommunicationInfo]
        """
        if ue_comm_infos is not None and len(ue_comm_infos) < 1:
            raise ValueError("Invalid value for `ue_comm_infos`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ue_comm_infos = ue_comm_infos

    @property
    def excep_infos(self):
        """Gets the excep_infos of this NefEventNotification.


        :return: The excep_infos of this NefEventNotification.
        :rtype: List[ExceptionInfo]
        """
        return self._excep_infos

    @excep_infos.setter
    def excep_infos(self, excep_infos):
        """Sets the excep_infos of this NefEventNotification.


        :param excep_infos: The excep_infos of this NefEventNotification.
        :type excep_infos: List[ExceptionInfo]
        """
        if excep_infos is not None and len(excep_infos) < 1:
            raise ValueError("Invalid value for `excep_infos`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._excep_infos = excep_infos

    @property
    def congestion_infos(self):
        """Gets the congestion_infos of this NefEventNotification.


        :return: The congestion_infos of this NefEventNotification.
        :rtype: List[UserDataCongestionCollection]
        """
        return self._congestion_infos

    @congestion_infos.setter
    def congestion_infos(self, congestion_infos):
        """Sets the congestion_infos of this NefEventNotification.


        :param congestion_infos: The congestion_infos of this NefEventNotification.
        :type congestion_infos: List[UserDataCongestionCollection]
        """
        if congestion_infos is not None and len(congestion_infos) < 1:
            raise ValueError("Invalid value for `congestion_infos`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._congestion_infos = congestion_infos

    @property
    def perf_data_infos(self):
        """Gets the perf_data_infos of this NefEventNotification.


        :return: The perf_data_infos of this NefEventNotification.
        :rtype: List[PerformanceDataInfo]
        """
        return self._perf_data_infos

    @perf_data_infos.setter
    def perf_data_infos(self, perf_data_infos):
        """Sets the perf_data_infos of this NefEventNotification.


        :param perf_data_infos: The perf_data_infos of this NefEventNotification.
        :type perf_data_infos: List[PerformanceDataInfo]
        """
        if perf_data_infos is not None and len(perf_data_infos) < 1:
            raise ValueError("Invalid value for `perf_data_infos`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._perf_data_infos = perf_data_infos

    @property
    def dispersion_infos(self):
        """Gets the dispersion_infos of this NefEventNotification.


        :return: The dispersion_infos of this NefEventNotification.
        :rtype: List[DispersionCollection1]
        """
        return self._dispersion_infos

    @dispersion_infos.setter
    def dispersion_infos(self, dispersion_infos):
        """Sets the dispersion_infos of this NefEventNotification.


        :param dispersion_infos: The dispersion_infos of this NefEventNotification.
        :type dispersion_infos: List[DispersionCollection1]
        """
        if dispersion_infos is not None and len(dispersion_infos) < 1:
            raise ValueError("Invalid value for `dispersion_infos`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._dispersion_infos = dispersion_infos

    @property
    def coll_bhvr_infs(self):
        """Gets the coll_bhvr_infs of this NefEventNotification.


        :return: The coll_bhvr_infs of this NefEventNotification.
        :rtype: List[CollectiveBehaviourInfo]
        """
        return self._coll_bhvr_infs

    @coll_bhvr_infs.setter
    def coll_bhvr_infs(self, coll_bhvr_infs):
        """Sets the coll_bhvr_infs of this NefEventNotification.


        :param coll_bhvr_infs: The coll_bhvr_infs of this NefEventNotification.
        :type coll_bhvr_infs: List[CollectiveBehaviourInfo]
        """
        if coll_bhvr_infs is not None and len(coll_bhvr_infs) < 1:
            raise ValueError("Invalid value for `coll_bhvr_infs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._coll_bhvr_infs = coll_bhvr_infs

    @property
    def ms_qoe_metr_infos(self):
        """Gets the ms_qoe_metr_infos of this NefEventNotification.


        :return: The ms_qoe_metr_infos of this NefEventNotification.
        :rtype: List[MsQoeMetricsCollection]
        """
        return self._ms_qoe_metr_infos

    @ms_qoe_metr_infos.setter
    def ms_qoe_metr_infos(self, ms_qoe_metr_infos):
        """Sets the ms_qoe_metr_infos of this NefEventNotification.


        :param ms_qoe_metr_infos: The ms_qoe_metr_infos of this NefEventNotification.
        :type ms_qoe_metr_infos: List[MsQoeMetricsCollection]
        """
        if ms_qoe_metr_infos is not None and len(ms_qoe_metr_infos) < 1:
            raise ValueError("Invalid value for `ms_qoe_metr_infos`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ms_qoe_metr_infos = ms_qoe_metr_infos

    @property
    def ms_consump_infos(self):
        """Gets the ms_consump_infos of this NefEventNotification.


        :return: The ms_consump_infos of this NefEventNotification.
        :rtype: List[MsConsumptionCollection]
        """
        return self._ms_consump_infos

    @ms_consump_infos.setter
    def ms_consump_infos(self, ms_consump_infos):
        """Sets the ms_consump_infos of this NefEventNotification.


        :param ms_consump_infos: The ms_consump_infos of this NefEventNotification.
        :type ms_consump_infos: List[MsConsumptionCollection]
        """
        if ms_consump_infos is not None and len(ms_consump_infos) < 1:
            raise ValueError("Invalid value for `ms_consump_infos`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ms_consump_infos = ms_consump_infos

    @property
    def ms_net_ass_inv_infos(self):
        """Gets the ms_net_ass_inv_infos of this NefEventNotification.


        :return: The ms_net_ass_inv_infos of this NefEventNotification.
        :rtype: List[MsNetAssInvocationCollection]
        """
        return self._ms_net_ass_inv_infos

    @ms_net_ass_inv_infos.setter
    def ms_net_ass_inv_infos(self, ms_net_ass_inv_infos):
        """Sets the ms_net_ass_inv_infos of this NefEventNotification.


        :param ms_net_ass_inv_infos: The ms_net_ass_inv_infos of this NefEventNotification.
        :type ms_net_ass_inv_infos: List[MsNetAssInvocationCollection]
        """
        if ms_net_ass_inv_infos is not None and len(ms_net_ass_inv_infos) < 1:
            raise ValueError("Invalid value for `ms_net_ass_inv_infos`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ms_net_ass_inv_infos = ms_net_ass_inv_infos

    @property
    def ms_dyn_ply_inv_infos(self):
        """Gets the ms_dyn_ply_inv_infos of this NefEventNotification.


        :return: The ms_dyn_ply_inv_infos of this NefEventNotification.
        :rtype: List[MsDynPolicyInvocationCollection]
        """
        return self._ms_dyn_ply_inv_infos

    @ms_dyn_ply_inv_infos.setter
    def ms_dyn_ply_inv_infos(self, ms_dyn_ply_inv_infos):
        """Sets the ms_dyn_ply_inv_infos of this NefEventNotification.


        :param ms_dyn_ply_inv_infos: The ms_dyn_ply_inv_infos of this NefEventNotification.
        :type ms_dyn_ply_inv_infos: List[MsDynPolicyInvocationCollection]
        """
        if ms_dyn_ply_inv_infos is not None and len(ms_dyn_ply_inv_infos) < 1:
            raise ValueError("Invalid value for `ms_dyn_ply_inv_infos`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ms_dyn_ply_inv_infos = ms_dyn_ply_inv_infos

    @property
    def ms_acc_act_infos(self):
        """Gets the ms_acc_act_infos of this NefEventNotification.


        :return: The ms_acc_act_infos of this NefEventNotification.
        :rtype: List[MSAccessActivityCollection]
        """
        return self._ms_acc_act_infos

    @ms_acc_act_infos.setter
    def ms_acc_act_infos(self, ms_acc_act_infos):
        """Sets the ms_acc_act_infos of this NefEventNotification.


        :param ms_acc_act_infos: The ms_acc_act_infos of this NefEventNotification.
        :type ms_acc_act_infos: List[MSAccessActivityCollection]
        """
        if ms_acc_act_infos is not None and len(ms_acc_act_infos) < 1:
            raise ValueError("Invalid value for `ms_acc_act_infos`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ms_acc_act_infos = ms_acc_act_infos
