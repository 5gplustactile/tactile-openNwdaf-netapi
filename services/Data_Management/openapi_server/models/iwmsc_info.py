# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.identity_range import IdentityRange
from openapi_server.models.supi_range import SupiRange
from openapi_server.models.tai_range import TaiRange
import re
from openapi_server import util

from openapi_server.models.identity_range import IdentityRange  # noqa: E501
from openapi_server.models.supi_range import SupiRange  # noqa: E501
from openapi_server.models.tai_range import TaiRange  # noqa: E501
import re  # noqa: E501

class IwmscInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, msisdn_ranges=None, supi_ranges=None, tai_range_list=None, sc_number=None):  # noqa: E501
        """IwmscInfo - a model defined in OpenAPI

        :param msisdn_ranges: The msisdn_ranges of this IwmscInfo.  # noqa: E501
        :type msisdn_ranges: List[IdentityRange]
        :param supi_ranges: The supi_ranges of this IwmscInfo.  # noqa: E501
        :type supi_ranges: List[SupiRange]
        :param tai_range_list: The tai_range_list of this IwmscInfo.  # noqa: E501
        :type tai_range_list: List[TaiRange]
        :param sc_number: The sc_number of this IwmscInfo.  # noqa: E501
        :type sc_number: str
        """
        self.openapi_types = {
            'msisdn_ranges': List[IdentityRange],
            'supi_ranges': List[SupiRange],
            'tai_range_list': List[TaiRange],
            'sc_number': str
        }

        self.attribute_map = {
            'msisdn_ranges': 'msisdnRanges',
            'supi_ranges': 'supiRanges',
            'tai_range_list': 'taiRangeList',
            'sc_number': 'scNumber'
        }

        self._msisdn_ranges = msisdn_ranges
        self._supi_ranges = supi_ranges
        self._tai_range_list = tai_range_list
        self._sc_number = sc_number

    @classmethod
    def from_dict(cls, dikt) -> 'IwmscInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IwmscInfo of this IwmscInfo.  # noqa: E501
        :rtype: IwmscInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def msisdn_ranges(self):
        """Gets the msisdn_ranges of this IwmscInfo.


        :return: The msisdn_ranges of this IwmscInfo.
        :rtype: List[IdentityRange]
        """
        return self._msisdn_ranges

    @msisdn_ranges.setter
    def msisdn_ranges(self, msisdn_ranges):
        """Sets the msisdn_ranges of this IwmscInfo.


        :param msisdn_ranges: The msisdn_ranges of this IwmscInfo.
        :type msisdn_ranges: List[IdentityRange]
        """
        if msisdn_ranges is not None and len(msisdn_ranges) < 1:
            raise ValueError("Invalid value for `msisdn_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._msisdn_ranges = msisdn_ranges

    @property
    def supi_ranges(self):
        """Gets the supi_ranges of this IwmscInfo.


        :return: The supi_ranges of this IwmscInfo.
        :rtype: List[SupiRange]
        """
        return self._supi_ranges

    @supi_ranges.setter
    def supi_ranges(self, supi_ranges):
        """Sets the supi_ranges of this IwmscInfo.


        :param supi_ranges: The supi_ranges of this IwmscInfo.
        :type supi_ranges: List[SupiRange]
        """
        if supi_ranges is not None and len(supi_ranges) < 1:
            raise ValueError("Invalid value for `supi_ranges`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._supi_ranges = supi_ranges

    @property
    def tai_range_list(self):
        """Gets the tai_range_list of this IwmscInfo.


        :return: The tai_range_list of this IwmscInfo.
        :rtype: List[TaiRange]
        """
        return self._tai_range_list

    @tai_range_list.setter
    def tai_range_list(self, tai_range_list):
        """Sets the tai_range_list of this IwmscInfo.


        :param tai_range_list: The tai_range_list of this IwmscInfo.
        :type tai_range_list: List[TaiRange]
        """
        if tai_range_list is not None and len(tai_range_list) < 1:
            raise ValueError("Invalid value for `tai_range_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._tai_range_list = tai_range_list

    @property
    def sc_number(self):
        """Gets the sc_number of this IwmscInfo.


        :return: The sc_number of this IwmscInfo.
        :rtype: str
        """
        return self._sc_number

    @sc_number.setter
    def sc_number(self, sc_number):
        """Sets the sc_number of this IwmscInfo.


        :param sc_number: The sc_number of this IwmscInfo.
        :type sc_number: str
        """
        if sc_number is not None and not re.search(r'^[0-9]{5,15}$', sc_number):  # noqa: E501
            raise ValueError("Invalid value for `sc_number`, must be a follow pattern or equal to `/^[0-9]{5,15}$/`")  # noqa: E501

        self._sc_number = sc_number
