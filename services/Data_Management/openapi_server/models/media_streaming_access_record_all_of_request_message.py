# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class MediaStreamingAccessRecordAllOfRequestMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, method=None, url=None, protocol_version=None, range=None, size=None, body_size=None, content_type=None, user_agent=None, user_identity=None, referer=None):  # noqa: E501
        """MediaStreamingAccessRecordAllOfRequestMessage - a model defined in OpenAPI

        :param method: The method of this MediaStreamingAccessRecordAllOfRequestMessage.  # noqa: E501
        :type method: str
        :param url: The url of this MediaStreamingAccessRecordAllOfRequestMessage.  # noqa: E501
        :type url: str
        :param protocol_version: The protocol_version of this MediaStreamingAccessRecordAllOfRequestMessage.  # noqa: E501
        :type protocol_version: str
        :param range: The range of this MediaStreamingAccessRecordAllOfRequestMessage.  # noqa: E501
        :type range: str
        :param size: The size of this MediaStreamingAccessRecordAllOfRequestMessage.  # noqa: E501
        :type size: int
        :param body_size: The body_size of this MediaStreamingAccessRecordAllOfRequestMessage.  # noqa: E501
        :type body_size: int
        :param content_type: The content_type of this MediaStreamingAccessRecordAllOfRequestMessage.  # noqa: E501
        :type content_type: str
        :param user_agent: The user_agent of this MediaStreamingAccessRecordAllOfRequestMessage.  # noqa: E501
        :type user_agent: str
        :param user_identity: The user_identity of this MediaStreamingAccessRecordAllOfRequestMessage.  # noqa: E501
        :type user_identity: str
        :param referer: The referer of this MediaStreamingAccessRecordAllOfRequestMessage.  # noqa: E501
        :type referer: str
        """
        self.openapi_types = {
            'method': str,
            'url': str,
            'protocol_version': str,
            'range': str,
            'size': int,
            'body_size': int,
            'content_type': str,
            'user_agent': str,
            'user_identity': str,
            'referer': str
        }

        self.attribute_map = {
            'method': 'method',
            'url': 'url',
            'protocol_version': 'protocolVersion',
            'range': 'range',
            'size': 'size',
            'body_size': 'bodySize',
            'content_type': 'contentType',
            'user_agent': 'userAgent',
            'user_identity': 'userIdentity',
            'referer': 'referer'
        }

        self._method = method
        self._url = url
        self._protocol_version = protocol_version
        self._range = range
        self._size = size
        self._body_size = body_size
        self._content_type = content_type
        self._user_agent = user_agent
        self._user_identity = user_identity
        self._referer = referer

    @classmethod
    def from_dict(cls, dikt) -> 'MediaStreamingAccessRecordAllOfRequestMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MediaStreamingAccessRecord_allOf_requestMessage of this MediaStreamingAccessRecordAllOfRequestMessage.  # noqa: E501
        :rtype: MediaStreamingAccessRecordAllOfRequestMessage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self):
        """Gets the method of this MediaStreamingAccessRecordAllOfRequestMessage.


        :return: The method of this MediaStreamingAccessRecordAllOfRequestMessage.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this MediaStreamingAccessRecordAllOfRequestMessage.


        :param method: The method of this MediaStreamingAccessRecordAllOfRequestMessage.
        :type method: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501

        self._method = method

    @property
    def url(self):
        """Gets the url of this MediaStreamingAccessRecordAllOfRequestMessage.

        Uniform Resource Locator, comforming with the URI Generic Syntax specified in IETF RFC 3986.  # noqa: E501

        :return: The url of this MediaStreamingAccessRecordAllOfRequestMessage.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MediaStreamingAccessRecordAllOfRequestMessage.

        Uniform Resource Locator, comforming with the URI Generic Syntax specified in IETF RFC 3986.  # noqa: E501

        :param url: The url of this MediaStreamingAccessRecordAllOfRequestMessage.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def protocol_version(self):
        """Gets the protocol_version of this MediaStreamingAccessRecordAllOfRequestMessage.


        :return: The protocol_version of this MediaStreamingAccessRecordAllOfRequestMessage.
        :rtype: str
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """Sets the protocol_version of this MediaStreamingAccessRecordAllOfRequestMessage.


        :param protocol_version: The protocol_version of this MediaStreamingAccessRecordAllOfRequestMessage.
        :type protocol_version: str
        """
        if protocol_version is None:
            raise ValueError("Invalid value for `protocol_version`, must not be `None`")  # noqa: E501

        self._protocol_version = protocol_version

    @property
    def range(self):
        """Gets the range of this MediaStreamingAccessRecordAllOfRequestMessage.


        :return: The range of this MediaStreamingAccessRecordAllOfRequestMessage.
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this MediaStreamingAccessRecordAllOfRequestMessage.


        :param range: The range of this MediaStreamingAccessRecordAllOfRequestMessage.
        :type range: str
        """

        self._range = range

    @property
    def size(self):
        """Gets the size of this MediaStreamingAccessRecordAllOfRequestMessage.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The size of this MediaStreamingAccessRecordAllOfRequestMessage.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this MediaStreamingAccessRecordAllOfRequestMessage.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param size: The size of this MediaStreamingAccessRecordAllOfRequestMessage.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501
        if size is not None and size < 0:  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._size = size

    @property
    def body_size(self):
        """Gets the body_size of this MediaStreamingAccessRecordAllOfRequestMessage.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The body_size of this MediaStreamingAccessRecordAllOfRequestMessage.
        :rtype: int
        """
        return self._body_size

    @body_size.setter
    def body_size(self, body_size):
        """Sets the body_size of this MediaStreamingAccessRecordAllOfRequestMessage.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param body_size: The body_size of this MediaStreamingAccessRecordAllOfRequestMessage.
        :type body_size: int
        """
        if body_size is None:
            raise ValueError("Invalid value for `body_size`, must not be `None`")  # noqa: E501
        if body_size is not None and body_size < 0:  # noqa: E501
            raise ValueError("Invalid value for `body_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._body_size = body_size

    @property
    def content_type(self):
        """Gets the content_type of this MediaStreamingAccessRecordAllOfRequestMessage.


        :return: The content_type of this MediaStreamingAccessRecordAllOfRequestMessage.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this MediaStreamingAccessRecordAllOfRequestMessage.


        :param content_type: The content_type of this MediaStreamingAccessRecordAllOfRequestMessage.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def user_agent(self):
        """Gets the user_agent of this MediaStreamingAccessRecordAllOfRequestMessage.


        :return: The user_agent of this MediaStreamingAccessRecordAllOfRequestMessage.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this MediaStreamingAccessRecordAllOfRequestMessage.


        :param user_agent: The user_agent of this MediaStreamingAccessRecordAllOfRequestMessage.
        :type user_agent: str
        """

        self._user_agent = user_agent

    @property
    def user_identity(self):
        """Gets the user_identity of this MediaStreamingAccessRecordAllOfRequestMessage.


        :return: The user_identity of this MediaStreamingAccessRecordAllOfRequestMessage.
        :rtype: str
        """
        return self._user_identity

    @user_identity.setter
    def user_identity(self, user_identity):
        """Sets the user_identity of this MediaStreamingAccessRecordAllOfRequestMessage.


        :param user_identity: The user_identity of this MediaStreamingAccessRecordAllOfRequestMessage.
        :type user_identity: str
        """

        self._user_identity = user_identity

    @property
    def referer(self):
        """Gets the referer of this MediaStreamingAccessRecordAllOfRequestMessage.

        Uniform Resource Locator, comforming with the URI Generic Syntax specified in IETF RFC 3986.  # noqa: E501

        :return: The referer of this MediaStreamingAccessRecordAllOfRequestMessage.
        :rtype: str
        """
        return self._referer

    @referer.setter
    def referer(self, referer):
        """Sets the referer of this MediaStreamingAccessRecordAllOfRequestMessage.

        Uniform Resource Locator, comforming with the URI Generic Syntax specified in IETF RFC 3986.  # noqa: E501

        :param referer: The referer of this MediaStreamingAccessRecordAllOfRequestMessage.
        :type referer: str
        """

        self._referer = referer
