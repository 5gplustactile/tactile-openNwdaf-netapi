# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.reporting_options import ReportingOptions
from openapi_server import util

from openapi_server.models.reporting_options import ReportingOptions  # noqa: E501

class FormattingInstruction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cons_trig_notif=None, reporting_options=None):  # noqa: E501
        """FormattingInstruction - a model defined in OpenAPI

        :param cons_trig_notif: The cons_trig_notif of this FormattingInstruction.  # noqa: E501
        :type cons_trig_notif: bool
        :param reporting_options: The reporting_options of this FormattingInstruction.  # noqa: E501
        :type reporting_options: ReportingOptions
        """
        self.openapi_types = {
            'cons_trig_notif': bool,
            'reporting_options': ReportingOptions
        }

        self.attribute_map = {
            'cons_trig_notif': 'consTrigNotif',
            'reporting_options': 'reportingOptions'
        }

        self._cons_trig_notif = cons_trig_notif
        self._reporting_options = reporting_options

    @classmethod
    def from_dict(cls, dikt) -> 'FormattingInstruction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FormattingInstruction of this FormattingInstruction.  # noqa: E501
        :rtype: FormattingInstruction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cons_trig_notif(self):
        """Gets the cons_trig_notif of this FormattingInstruction.

        Indicates that notifications shall be buffered until the NF service consumer requests their delivery.   # noqa: E501

        :return: The cons_trig_notif of this FormattingInstruction.
        :rtype: bool
        """
        return self._cons_trig_notif

    @cons_trig_notif.setter
    def cons_trig_notif(self, cons_trig_notif):
        """Sets the cons_trig_notif of this FormattingInstruction.

        Indicates that notifications shall be buffered until the NF service consumer requests their delivery.   # noqa: E501

        :param cons_trig_notif: The cons_trig_notif of this FormattingInstruction.
        :type cons_trig_notif: bool
        """

        self._cons_trig_notif = cons_trig_notif

    @property
    def reporting_options(self):
        """Gets the reporting_options of this FormattingInstruction.


        :return: The reporting_options of this FormattingInstruction.
        :rtype: ReportingOptions
        """
        return self._reporting_options

    @reporting_options.setter
    def reporting_options(self, reporting_options):
        """Sets the reporting_options of this FormattingInstruction.


        :param reporting_options: The reporting_options of this FormattingInstruction.
        :type reporting_options: ReportingOptions
        """

        self._reporting_options = reporting_options
