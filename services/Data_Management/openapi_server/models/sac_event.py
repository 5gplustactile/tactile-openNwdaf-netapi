# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.sac_event_trigger import SACEventTrigger
from openapi_server.models.sac_event_type import SACEventType
from openapi_server.models.sac_info import SACInfo
from openapi_server.models.snssai import Snssai
from openapi_server import util

from openapi_server.models.sac_event_trigger import SACEventTrigger  # noqa: E501
from openapi_server.models.sac_event_type import SACEventType  # noqa: E501
from openapi_server.models.sac_info import SACInfo  # noqa: E501
from openapi_server.models.snssai import Snssai  # noqa: E501

class SACEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_type=None, event_trigger=None, event_filter=None, notification_period=None, notif_threshold=None, immediate_flag=False):  # noqa: E501
        """SACEvent - a model defined in OpenAPI

        :param event_type: The event_type of this SACEvent.  # noqa: E501
        :type event_type: SACEventType
        :param event_trigger: The event_trigger of this SACEvent.  # noqa: E501
        :type event_trigger: SACEventTrigger
        :param event_filter: The event_filter of this SACEvent.  # noqa: E501
        :type event_filter: List[Snssai]
        :param notification_period: The notification_period of this SACEvent.  # noqa: E501
        :type notification_period: int
        :param notif_threshold: The notif_threshold of this SACEvent.  # noqa: E501
        :type notif_threshold: SACInfo
        :param immediate_flag: The immediate_flag of this SACEvent.  # noqa: E501
        :type immediate_flag: bool
        """
        self.openapi_types = {
            'event_type': SACEventType,
            'event_trigger': SACEventTrigger,
            'event_filter': List[Snssai],
            'notification_period': int,
            'notif_threshold': SACInfo,
            'immediate_flag': bool
        }

        self.attribute_map = {
            'event_type': 'eventType',
            'event_trigger': 'eventTrigger',
            'event_filter': 'eventFilter',
            'notification_period': 'notificationPeriod',
            'notif_threshold': 'notifThreshold',
            'immediate_flag': 'immediateFlag'
        }

        self._event_type = event_type
        self._event_trigger = event_trigger
        self._event_filter = event_filter
        self._notification_period = notification_period
        self._notif_threshold = notif_threshold
        self._immediate_flag = immediate_flag

    @classmethod
    def from_dict(cls, dikt) -> 'SACEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SACEvent of this SACEvent.  # noqa: E501
        :rtype: SACEvent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_type(self):
        """Gets the event_type of this SACEvent.


        :return: The event_type of this SACEvent.
        :rtype: SACEventType
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this SACEvent.


        :param event_type: The event_type of this SACEvent.
        :type event_type: SACEventType
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501

        self._event_type = event_type

    @property
    def event_trigger(self):
        """Gets the event_trigger of this SACEvent.


        :return: The event_trigger of this SACEvent.
        :rtype: SACEventTrigger
        """
        return self._event_trigger

    @event_trigger.setter
    def event_trigger(self, event_trigger):
        """Sets the event_trigger of this SACEvent.


        :param event_trigger: The event_trigger of this SACEvent.
        :type event_trigger: SACEventTrigger
        """

        self._event_trigger = event_trigger

    @property
    def event_filter(self):
        """Gets the event_filter of this SACEvent.


        :return: The event_filter of this SACEvent.
        :rtype: List[Snssai]
        """
        return self._event_filter

    @event_filter.setter
    def event_filter(self, event_filter):
        """Sets the event_filter of this SACEvent.


        :param event_filter: The event_filter of this SACEvent.
        :type event_filter: List[Snssai]
        """
        if event_filter is None:
            raise ValueError("Invalid value for `event_filter`, must not be `None`")  # noqa: E501
        if event_filter is not None and len(event_filter) < 1:
            raise ValueError("Invalid value for `event_filter`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._event_filter = event_filter

    @property
    def notification_period(self):
        """Gets the notification_period of this SACEvent.

        indicating a time in seconds.  # noqa: E501

        :return: The notification_period of this SACEvent.
        :rtype: int
        """
        return self._notification_period

    @notification_period.setter
    def notification_period(self, notification_period):
        """Sets the notification_period of this SACEvent.

        indicating a time in seconds.  # noqa: E501

        :param notification_period: The notification_period of this SACEvent.
        :type notification_period: int
        """

        self._notification_period = notification_period

    @property
    def notif_threshold(self):
        """Gets the notif_threshold of this SACEvent.


        :return: The notif_threshold of this SACEvent.
        :rtype: SACInfo
        """
        return self._notif_threshold

    @notif_threshold.setter
    def notif_threshold(self, notif_threshold):
        """Sets the notif_threshold of this SACEvent.


        :param notif_threshold: The notif_threshold of this SACEvent.
        :type notif_threshold: SACInfo
        """

        self._notif_threshold = notif_threshold

    @property
    def immediate_flag(self):
        """Gets the immediate_flag of this SACEvent.


        :return: The immediate_flag of this SACEvent.
        :rtype: bool
        """
        return self._immediate_flag

    @immediate_flag.setter
    def immediate_flag(self, immediate_flag):
        """Sets the immediate_flag of this SACEvent.


        :param immediate_flag: The immediate_flag of this SACEvent.
        :type immediate_flag: bool
        """

        self._immediate_flag = immediate_flag
