# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class MediaStreamingAccessRecordAllOfConnectionMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mean_network_round_trip_time=None, network_round_trip_time_variation=None, congestion_window_size=None):  # noqa: E501
        """MediaStreamingAccessRecordAllOfConnectionMetrics - a model defined in OpenAPI

        :param mean_network_round_trip_time: The mean_network_round_trip_time of this MediaStreamingAccessRecordAllOfConnectionMetrics.  # noqa: E501
        :type mean_network_round_trip_time: float
        :param network_round_trip_time_variation: The network_round_trip_time_variation of this MediaStreamingAccessRecordAllOfConnectionMetrics.  # noqa: E501
        :type network_round_trip_time_variation: float
        :param congestion_window_size: The congestion_window_size of this MediaStreamingAccessRecordAllOfConnectionMetrics.  # noqa: E501
        :type congestion_window_size: int
        """
        self.openapi_types = {
            'mean_network_round_trip_time': float,
            'network_round_trip_time_variation': float,
            'congestion_window_size': int
        }

        self.attribute_map = {
            'mean_network_round_trip_time': 'meanNetworkRoundTripTime',
            'network_round_trip_time_variation': 'networkRoundTripTimeVariation',
            'congestion_window_size': 'congestionWindowSize'
        }

        self._mean_network_round_trip_time = mean_network_round_trip_time
        self._network_round_trip_time_variation = network_round_trip_time_variation
        self._congestion_window_size = congestion_window_size

    @classmethod
    def from_dict(cls, dikt) -> 'MediaStreamingAccessRecordAllOfConnectionMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MediaStreamingAccessRecord_allOf_connectionMetrics of this MediaStreamingAccessRecordAllOfConnectionMetrics.  # noqa: E501
        :rtype: MediaStreamingAccessRecordAllOfConnectionMetrics
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mean_network_round_trip_time(self):
        """Gets the mean_network_round_trip_time of this MediaStreamingAccessRecordAllOfConnectionMetrics.

        string with format 'float' as defined in OpenAPI.  # noqa: E501

        :return: The mean_network_round_trip_time of this MediaStreamingAccessRecordAllOfConnectionMetrics.
        :rtype: float
        """
        return self._mean_network_round_trip_time

    @mean_network_round_trip_time.setter
    def mean_network_round_trip_time(self, mean_network_round_trip_time):
        """Sets the mean_network_round_trip_time of this MediaStreamingAccessRecordAllOfConnectionMetrics.

        string with format 'float' as defined in OpenAPI.  # noqa: E501

        :param mean_network_round_trip_time: The mean_network_round_trip_time of this MediaStreamingAccessRecordAllOfConnectionMetrics.
        :type mean_network_round_trip_time: float
        """
        if mean_network_round_trip_time is None:
            raise ValueError("Invalid value for `mean_network_round_trip_time`, must not be `None`")  # noqa: E501

        self._mean_network_round_trip_time = mean_network_round_trip_time

    @property
    def network_round_trip_time_variation(self):
        """Gets the network_round_trip_time_variation of this MediaStreamingAccessRecordAllOfConnectionMetrics.

        string with format 'float' as defined in OpenAPI.  # noqa: E501

        :return: The network_round_trip_time_variation of this MediaStreamingAccessRecordAllOfConnectionMetrics.
        :rtype: float
        """
        return self._network_round_trip_time_variation

    @network_round_trip_time_variation.setter
    def network_round_trip_time_variation(self, network_round_trip_time_variation):
        """Sets the network_round_trip_time_variation of this MediaStreamingAccessRecordAllOfConnectionMetrics.

        string with format 'float' as defined in OpenAPI.  # noqa: E501

        :param network_round_trip_time_variation: The network_round_trip_time_variation of this MediaStreamingAccessRecordAllOfConnectionMetrics.
        :type network_round_trip_time_variation: float
        """
        if network_round_trip_time_variation is None:
            raise ValueError("Invalid value for `network_round_trip_time_variation`, must not be `None`")  # noqa: E501

        self._network_round_trip_time_variation = network_round_trip_time_variation

    @property
    def congestion_window_size(self):
        """Gets the congestion_window_size of this MediaStreamingAccessRecordAllOfConnectionMetrics.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :return: The congestion_window_size of this MediaStreamingAccessRecordAllOfConnectionMetrics.
        :rtype: int
        """
        return self._congestion_window_size

    @congestion_window_size.setter
    def congestion_window_size(self, congestion_window_size):
        """Sets the congestion_window_size of this MediaStreamingAccessRecordAllOfConnectionMetrics.

        Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.  # noqa: E501

        :param congestion_window_size: The congestion_window_size of this MediaStreamingAccessRecordAllOfConnectionMetrics.
        :type congestion_window_size: int
        """
        if congestion_window_size is None:
            raise ValueError("Invalid value for `congestion_window_size`, must not be `None`")  # noqa: E501
        if congestion_window_size is not None and congestion_window_size < 0:  # noqa: E501
            raise ValueError("Invalid value for `congestion_window_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._congestion_window_size = congestion_window_size
