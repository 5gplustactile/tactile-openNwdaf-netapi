# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.interface_upf_info_item import InterfaceUpfInfoItem
from openapi_server.models.snssai_upf_info_item import SnssaiUpfInfoItem
from openapi_server.models.tai import Tai
from openapi_server.models.tai_range import TaiRange
from openapi_server import util

from openapi_server.models.interface_upf_info_item import InterfaceUpfInfoItem  # noqa: E501
from openapi_server.models.snssai_upf_info_item import SnssaiUpfInfoItem  # noqa: E501
from openapi_server.models.tai import Tai  # noqa: E501
from openapi_server.models.tai_range import TaiRange  # noqa: E501

class MbUpfInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s_nssai_mb_upf_info_list=None, mb_smf_serving_area=None, interface_mb_upf_info_list=None, tai_list=None, tai_range_list=None, priority=None, supported_pfcp_features=None):  # noqa: E501
        """MbUpfInfo - a model defined in OpenAPI

        :param s_nssai_mb_upf_info_list: The s_nssai_mb_upf_info_list of this MbUpfInfo.  # noqa: E501
        :type s_nssai_mb_upf_info_list: List[SnssaiUpfInfoItem]
        :param mb_smf_serving_area: The mb_smf_serving_area of this MbUpfInfo.  # noqa: E501
        :type mb_smf_serving_area: List[str]
        :param interface_mb_upf_info_list: The interface_mb_upf_info_list of this MbUpfInfo.  # noqa: E501
        :type interface_mb_upf_info_list: List[InterfaceUpfInfoItem]
        :param tai_list: The tai_list of this MbUpfInfo.  # noqa: E501
        :type tai_list: List[Tai]
        :param tai_range_list: The tai_range_list of this MbUpfInfo.  # noqa: E501
        :type tai_range_list: List[TaiRange]
        :param priority: The priority of this MbUpfInfo.  # noqa: E501
        :type priority: int
        :param supported_pfcp_features: The supported_pfcp_features of this MbUpfInfo.  # noqa: E501
        :type supported_pfcp_features: str
        """
        self.openapi_types = {
            's_nssai_mb_upf_info_list': List[SnssaiUpfInfoItem],
            'mb_smf_serving_area': List[str],
            'interface_mb_upf_info_list': List[InterfaceUpfInfoItem],
            'tai_list': List[Tai],
            'tai_range_list': List[TaiRange],
            'priority': int,
            'supported_pfcp_features': str
        }

        self.attribute_map = {
            's_nssai_mb_upf_info_list': 'sNssaiMbUpfInfoList',
            'mb_smf_serving_area': 'mbSmfServingArea',
            'interface_mb_upf_info_list': 'interfaceMbUpfInfoList',
            'tai_list': 'taiList',
            'tai_range_list': 'taiRangeList',
            'priority': 'priority',
            'supported_pfcp_features': 'supportedPfcpFeatures'
        }

        self._s_nssai_mb_upf_info_list = s_nssai_mb_upf_info_list
        self._mb_smf_serving_area = mb_smf_serving_area
        self._interface_mb_upf_info_list = interface_mb_upf_info_list
        self._tai_list = tai_list
        self._tai_range_list = tai_range_list
        self._priority = priority
        self._supported_pfcp_features = supported_pfcp_features

    @classmethod
    def from_dict(cls, dikt) -> 'MbUpfInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MbUpfInfo of this MbUpfInfo.  # noqa: E501
        :rtype: MbUpfInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s_nssai_mb_upf_info_list(self):
        """Gets the s_nssai_mb_upf_info_list of this MbUpfInfo.


        :return: The s_nssai_mb_upf_info_list of this MbUpfInfo.
        :rtype: List[SnssaiUpfInfoItem]
        """
        return self._s_nssai_mb_upf_info_list

    @s_nssai_mb_upf_info_list.setter
    def s_nssai_mb_upf_info_list(self, s_nssai_mb_upf_info_list):
        """Sets the s_nssai_mb_upf_info_list of this MbUpfInfo.


        :param s_nssai_mb_upf_info_list: The s_nssai_mb_upf_info_list of this MbUpfInfo.
        :type s_nssai_mb_upf_info_list: List[SnssaiUpfInfoItem]
        """
        if s_nssai_mb_upf_info_list is None:
            raise ValueError("Invalid value for `s_nssai_mb_upf_info_list`, must not be `None`")  # noqa: E501
        if s_nssai_mb_upf_info_list is not None and len(s_nssai_mb_upf_info_list) < 1:
            raise ValueError("Invalid value for `s_nssai_mb_upf_info_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._s_nssai_mb_upf_info_list = s_nssai_mb_upf_info_list

    @property
    def mb_smf_serving_area(self):
        """Gets the mb_smf_serving_area of this MbUpfInfo.


        :return: The mb_smf_serving_area of this MbUpfInfo.
        :rtype: List[str]
        """
        return self._mb_smf_serving_area

    @mb_smf_serving_area.setter
    def mb_smf_serving_area(self, mb_smf_serving_area):
        """Sets the mb_smf_serving_area of this MbUpfInfo.


        :param mb_smf_serving_area: The mb_smf_serving_area of this MbUpfInfo.
        :type mb_smf_serving_area: List[str]
        """
        if mb_smf_serving_area is not None and len(mb_smf_serving_area) < 1:
            raise ValueError("Invalid value for `mb_smf_serving_area`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._mb_smf_serving_area = mb_smf_serving_area

    @property
    def interface_mb_upf_info_list(self):
        """Gets the interface_mb_upf_info_list of this MbUpfInfo.


        :return: The interface_mb_upf_info_list of this MbUpfInfo.
        :rtype: List[InterfaceUpfInfoItem]
        """
        return self._interface_mb_upf_info_list

    @interface_mb_upf_info_list.setter
    def interface_mb_upf_info_list(self, interface_mb_upf_info_list):
        """Sets the interface_mb_upf_info_list of this MbUpfInfo.


        :param interface_mb_upf_info_list: The interface_mb_upf_info_list of this MbUpfInfo.
        :type interface_mb_upf_info_list: List[InterfaceUpfInfoItem]
        """
        if interface_mb_upf_info_list is not None and len(interface_mb_upf_info_list) < 1:
            raise ValueError("Invalid value for `interface_mb_upf_info_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._interface_mb_upf_info_list = interface_mb_upf_info_list

    @property
    def tai_list(self):
        """Gets the tai_list of this MbUpfInfo.


        :return: The tai_list of this MbUpfInfo.
        :rtype: List[Tai]
        """
        return self._tai_list

    @tai_list.setter
    def tai_list(self, tai_list):
        """Sets the tai_list of this MbUpfInfo.


        :param tai_list: The tai_list of this MbUpfInfo.
        :type tai_list: List[Tai]
        """
        if tai_list is not None and len(tai_list) < 1:
            raise ValueError("Invalid value for `tai_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._tai_list = tai_list

    @property
    def tai_range_list(self):
        """Gets the tai_range_list of this MbUpfInfo.


        :return: The tai_range_list of this MbUpfInfo.
        :rtype: List[TaiRange]
        """
        return self._tai_range_list

    @tai_range_list.setter
    def tai_range_list(self, tai_range_list):
        """Sets the tai_range_list of this MbUpfInfo.


        :param tai_range_list: The tai_range_list of this MbUpfInfo.
        :type tai_range_list: List[TaiRange]
        """
        if tai_range_list is not None and len(tai_range_list) < 1:
            raise ValueError("Invalid value for `tai_range_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._tai_range_list = tai_range_list

    @property
    def priority(self):
        """Gets the priority of this MbUpfInfo.


        :return: The priority of this MbUpfInfo.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this MbUpfInfo.


        :param priority: The priority of this MbUpfInfo.
        :type priority: int
        """
        if priority is not None and priority > 65535:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `65535`")  # noqa: E501
        if priority is not None and priority < 0:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `0`")  # noqa: E501

        self._priority = priority

    @property
    def supported_pfcp_features(self):
        """Gets the supported_pfcp_features of this MbUpfInfo.


        :return: The supported_pfcp_features of this MbUpfInfo.
        :rtype: str
        """
        return self._supported_pfcp_features

    @supported_pfcp_features.setter
    def supported_pfcp_features(self, supported_pfcp_features):
        """Sets the supported_pfcp_features of this MbUpfInfo.


        :param supported_pfcp_features: The supported_pfcp_features of this MbUpfInfo.
        :type supported_pfcp_features: str
        """

        self._supported_pfcp_features = supported_pfcp_features
