# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.data_notification import DataNotification
from openapi_server.models.fetch_instruction import FetchInstruction
from openapi_server.models.notif_summary_report import NotifSummaryReport
from openapi_server import util

from openapi_server.models.data_notification import DataNotification  # noqa: E501
from openapi_server.models.fetch_instruction import FetchInstruction  # noqa: E501
from openapi_server.models.notif_summary_report import NotifSummaryReport  # noqa: E501

class NnwdafDataManagementNotif(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_notification=None, data_reports=None, notif_corr_id=None, termination_req=None, fetch_instruct=None, notif_timestamp=None):  # noqa: E501
        """NnwdafDataManagementNotif - a model defined in OpenAPI

        :param data_notification: The data_notification of this NnwdafDataManagementNotif.  # noqa: E501
        :type data_notification: DataNotification
        :param data_reports: The data_reports of this NnwdafDataManagementNotif.  # noqa: E501
        :type data_reports: List[NotifSummaryReport]
        :param notif_corr_id: The notif_corr_id of this NnwdafDataManagementNotif.  # noqa: E501
        :type notif_corr_id: str
        :param termination_req: The termination_req of this NnwdafDataManagementNotif.  # noqa: E501
        :type termination_req: str
        :param fetch_instruct: The fetch_instruct of this NnwdafDataManagementNotif.  # noqa: E501
        :type fetch_instruct: FetchInstruction
        :param notif_timestamp: The notif_timestamp of this NnwdafDataManagementNotif.  # noqa: E501
        :type notif_timestamp: datetime
        """
        self.openapi_types = {
            'data_notification': DataNotification,
            'data_reports': List[NotifSummaryReport],
            'notif_corr_id': str,
            'termination_req': str,
            'fetch_instruct': FetchInstruction,
            'notif_timestamp': datetime
        }

        self.attribute_map = {
            'data_notification': 'dataNotification',
            'data_reports': 'dataReports',
            'notif_corr_id': 'notifCorrId',
            'termination_req': 'terminationReq',
            'fetch_instruct': 'fetchInstruct',
            'notif_timestamp': 'notifTimestamp'
        }

        self._data_notification = data_notification
        self._data_reports = data_reports
        self._notif_corr_id = notif_corr_id
        self._termination_req = termination_req
        self._fetch_instruct = fetch_instruct
        self._notif_timestamp = notif_timestamp

    @classmethod
    def from_dict(cls, dikt) -> 'NnwdafDataManagementNotif':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NnwdafDataManagementNotif of this NnwdafDataManagementNotif.  # noqa: E501
        :rtype: NnwdafDataManagementNotif
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_notification(self):
        """Gets the data_notification of this NnwdafDataManagementNotif.


        :return: The data_notification of this NnwdafDataManagementNotif.
        :rtype: DataNotification
        """
        return self._data_notification

    @data_notification.setter
    def data_notification(self, data_notification):
        """Sets the data_notification of this NnwdafDataManagementNotif.


        :param data_notification: The data_notification of this NnwdafDataManagementNotif.
        :type data_notification: DataNotification
        """

        self._data_notification = data_notification

    @property
    def data_reports(self):
        """Gets the data_reports of this NnwdafDataManagementNotif.

        List of summary reports of processed notifications.  # noqa: E501

        :return: The data_reports of this NnwdafDataManagementNotif.
        :rtype: List[NotifSummaryReport]
        """
        return self._data_reports

    @data_reports.setter
    def data_reports(self, data_reports):
        """Sets the data_reports of this NnwdafDataManagementNotif.

        List of summary reports of processed notifications.  # noqa: E501

        :param data_reports: The data_reports of this NnwdafDataManagementNotif.
        :type data_reports: List[NotifSummaryReport]
        """
        if data_reports is not None and len(data_reports) < 1:
            raise ValueError("Invalid value for `data_reports`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._data_reports = data_reports

    @property
    def notif_corr_id(self):
        """Gets the notif_corr_id of this NnwdafDataManagementNotif.

        Notification correlation identifier.  # noqa: E501

        :return: The notif_corr_id of this NnwdafDataManagementNotif.
        :rtype: str
        """
        return self._notif_corr_id

    @notif_corr_id.setter
    def notif_corr_id(self, notif_corr_id):
        """Sets the notif_corr_id of this NnwdafDataManagementNotif.

        Notification correlation identifier.  # noqa: E501

        :param notif_corr_id: The notif_corr_id of this NnwdafDataManagementNotif.
        :type notif_corr_id: str
        """
        if notif_corr_id is None:
            raise ValueError("Invalid value for `notif_corr_id`, must not be `None`")  # noqa: E501

        self._notif_corr_id = notif_corr_id

    @property
    def termination_req(self):
        """Gets the termination_req of this NnwdafDataManagementNotif.

        It indicates that the termination of the data management subscription is requested by the NWDAF.   # noqa: E501

        :return: The termination_req of this NnwdafDataManagementNotif.
        :rtype: str
        """
        return self._termination_req

    @termination_req.setter
    def termination_req(self, termination_req):
        """Sets the termination_req of this NnwdafDataManagementNotif.

        It indicates that the termination of the data management subscription is requested by the NWDAF.   # noqa: E501

        :param termination_req: The termination_req of this NnwdafDataManagementNotif.
        :type termination_req: str
        """

        self._termination_req = termination_req

    @property
    def fetch_instruct(self):
        """Gets the fetch_instruct of this NnwdafDataManagementNotif.


        :return: The fetch_instruct of this NnwdafDataManagementNotif.
        :rtype: FetchInstruction
        """
        return self._fetch_instruct

    @fetch_instruct.setter
    def fetch_instruct(self, fetch_instruct):
        """Sets the fetch_instruct of this NnwdafDataManagementNotif.


        :param fetch_instruct: The fetch_instruct of this NnwdafDataManagementNotif.
        :type fetch_instruct: FetchInstruction
        """

        self._fetch_instruct = fetch_instruct

    @property
    def notif_timestamp(self):
        """Gets the notif_timestamp of this NnwdafDataManagementNotif.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The notif_timestamp of this NnwdafDataManagementNotif.
        :rtype: datetime
        """
        return self._notif_timestamp

    @notif_timestamp.setter
    def notif_timestamp(self, notif_timestamp):
        """Sets the notif_timestamp of this NnwdafDataManagementNotif.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param notif_timestamp: The notif_timestamp of this NnwdafDataManagementNotif.
        :type notif_timestamp: datetime
        """
        if notif_timestamp is None:
            raise ValueError("Invalid value for `notif_timestamp`, must not be `None`")  # noqa: E501

        self._notif_timestamp = notif_timestamp
