# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.subscr_cond import SubscrCond
from openapi_server import util

from openapi_server.models.subscr_cond import SubscrCond  # noqa: E501

class SubscriptionContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subscription_id=None, subscr_cond=None):  # noqa: E501
        """SubscriptionContext - a model defined in OpenAPI

        :param subscription_id: The subscription_id of this SubscriptionContext.  # noqa: E501
        :type subscription_id: str
        :param subscr_cond: The subscr_cond of this SubscriptionContext.  # noqa: E501
        :type subscr_cond: SubscrCond
        """
        self.openapi_types = {
            'subscription_id': str,
            'subscr_cond': SubscrCond
        }

        self.attribute_map = {
            'subscription_id': 'subscriptionId',
            'subscr_cond': 'subscrCond'
        }

        self._subscription_id = subscription_id
        self._subscr_cond = subscr_cond

    @classmethod
    def from_dict(cls, dikt) -> 'SubscriptionContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SubscriptionContext of this SubscriptionContext.  # noqa: E501
        :rtype: SubscriptionContext
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subscription_id(self):
        """Gets the subscription_id of this SubscriptionContext.


        :return: The subscription_id of this SubscriptionContext.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this SubscriptionContext.


        :param subscription_id: The subscription_id of this SubscriptionContext.
        :type subscription_id: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")  # noqa: E501

        self._subscription_id = subscription_id

    @property
    def subscr_cond(self):
        """Gets the subscr_cond of this SubscriptionContext.


        :return: The subscr_cond of this SubscriptionContext.
        :rtype: SubscrCond
        """
        return self._subscr_cond

    @subscr_cond.setter
    def subscr_cond(self, subscr_cond):
        """Sets the subscr_cond of this SubscriptionContext.


        :param subscr_cond: The subscr_cond of this SubscriptionContext.
        :type subscr_cond: SubscrCond
        """

        self._subscr_cond = subscr_cond
