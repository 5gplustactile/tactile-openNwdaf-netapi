# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.aggregation_level import AggregationLevel
from openapi_server.models.network_area_info import NetworkAreaInfo
from openapi_server.models.summarization_attribute import SummarizationAttribute
from openapi_server import util

from openapi_server.models.aggregation_level import AggregationLevel  # noqa: E501
from openapi_server.models.network_area_info import NetworkAreaInfo  # noqa: E501
from openapi_server.models.summarization_attribute import SummarizationAttribute  # noqa: E501

class ParameterProcessingInstruction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, values=None, sum_attrs=None, aggr_level=None, supis=None, areas=None):  # noqa: E501
        """ParameterProcessingInstruction - a model defined in OpenAPI

        :param name: The name of this ParameterProcessingInstruction.  # noqa: E501
        :type name: str
        :param values: The values of this ParameterProcessingInstruction.  # noqa: E501
        :type values: List[object]
        :param sum_attrs: The sum_attrs of this ParameterProcessingInstruction.  # noqa: E501
        :type sum_attrs: List[SummarizationAttribute]
        :param aggr_level: The aggr_level of this ParameterProcessingInstruction.  # noqa: E501
        :type aggr_level: AggregationLevel
        :param supis: The supis of this ParameterProcessingInstruction.  # noqa: E501
        :type supis: List[str]
        :param areas: The areas of this ParameterProcessingInstruction.  # noqa: E501
        :type areas: List[NetworkAreaInfo]
        """
        self.openapi_types = {
            'name': str,
            'values': List[object],
            'sum_attrs': List[SummarizationAttribute],
            'aggr_level': AggregationLevel,
            'supis': List[str],
            'areas': List[NetworkAreaInfo]
        }

        self.attribute_map = {
            'name': 'name',
            'values': 'values',
            'sum_attrs': 'sumAttrs',
            'aggr_level': 'aggrLevel',
            'supis': 'supis',
            'areas': 'areas'
        }

        self._name = name
        self._values = values
        self._sum_attrs = sum_attrs
        self._aggr_level = aggr_level
        self._supis = supis
        self._areas = areas

    @classmethod
    def from_dict(cls, dikt) -> 'ParameterProcessingInstruction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ParameterProcessingInstruction of this ParameterProcessingInstruction.  # noqa: E501
        :rtype: ParameterProcessingInstruction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ParameterProcessingInstruction.

        A JSON pointer value that references an attribute within the notification object to which the processing instruction is applied.   # noqa: E501

        :return: The name of this ParameterProcessingInstruction.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ParameterProcessingInstruction.

        A JSON pointer value that references an attribute within the notification object to which the processing instruction is applied.   # noqa: E501

        :param name: The name of this ParameterProcessingInstruction.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def values(self):
        """Gets the values of this ParameterProcessingInstruction.

        A list of values for the attribute identified by the name attribute.  # noqa: E501

        :return: The values of this ParameterProcessingInstruction.
        :rtype: List[object]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ParameterProcessingInstruction.

        A list of values for the attribute identified by the name attribute.  # noqa: E501

        :param values: The values of this ParameterProcessingInstruction.
        :type values: List[object]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501
        if values is not None and len(values) < 1:
            raise ValueError("Invalid value for `values`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._values = values

    @property
    def sum_attrs(self):
        """Gets the sum_attrs of this ParameterProcessingInstruction.

        Attributes requested to be used in the summarized reports.  # noqa: E501

        :return: The sum_attrs of this ParameterProcessingInstruction.
        :rtype: List[SummarizationAttribute]
        """
        return self._sum_attrs

    @sum_attrs.setter
    def sum_attrs(self, sum_attrs):
        """Sets the sum_attrs of this ParameterProcessingInstruction.

        Attributes requested to be used in the summarized reports.  # noqa: E501

        :param sum_attrs: The sum_attrs of this ParameterProcessingInstruction.
        :type sum_attrs: List[SummarizationAttribute]
        """
        if sum_attrs is None:
            raise ValueError("Invalid value for `sum_attrs`, must not be `None`")  # noqa: E501
        if sum_attrs is not None and len(sum_attrs) < 1:
            raise ValueError("Invalid value for `sum_attrs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._sum_attrs = sum_attrs

    @property
    def aggr_level(self):
        """Gets the aggr_level of this ParameterProcessingInstruction.


        :return: The aggr_level of this ParameterProcessingInstruction.
        :rtype: AggregationLevel
        """
        return self._aggr_level

    @aggr_level.setter
    def aggr_level(self, aggr_level):
        """Sets the aggr_level of this ParameterProcessingInstruction.


        :param aggr_level: The aggr_level of this ParameterProcessingInstruction.
        :type aggr_level: AggregationLevel
        """

        self._aggr_level = aggr_level

    @property
    def supis(self):
        """Gets the supis of this ParameterProcessingInstruction.

        Indicates the UEs for which processed reports are requested.  # noqa: E501

        :return: The supis of this ParameterProcessingInstruction.
        :rtype: List[str]
        """
        return self._supis

    @supis.setter
    def supis(self, supis):
        """Sets the supis of this ParameterProcessingInstruction.

        Indicates the UEs for which processed reports are requested.  # noqa: E501

        :param supis: The supis of this ParameterProcessingInstruction.
        :type supis: List[str]
        """
        if supis is not None and len(supis) < 1:
            raise ValueError("Invalid value for `supis`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._supis = supis

    @property
    def areas(self):
        """Gets the areas of this ParameterProcessingInstruction.

        Indicates the Areas of Interest for which processed reports are requested.  # noqa: E501

        :return: The areas of this ParameterProcessingInstruction.
        :rtype: List[NetworkAreaInfo]
        """
        return self._areas

    @areas.setter
    def areas(self, areas):
        """Sets the areas of this ParameterProcessingInstruction.

        Indicates the Areas of Interest for which processed reports are requested.  # noqa: E501

        :param areas: The areas of this ParameterProcessingInstruction.
        :type areas: List[NetworkAreaInfo]
        """
        if areas is not None and len(areas) < 1:
            raise ValueError("Invalid value for `areas`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._areas = areas
