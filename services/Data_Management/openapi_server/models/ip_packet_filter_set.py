# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class IpPacketFilterSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, src_ip=None, dst_ip=None, protocol=None, src_port=None, dst_port=None, to_stc=None, flow_label=None, spi=None, direction=None):  # noqa: E501
        """IpPacketFilterSet - a model defined in OpenAPI

        :param src_ip: The src_ip of this IpPacketFilterSet.  # noqa: E501
        :type src_ip: str
        :param dst_ip: The dst_ip of this IpPacketFilterSet.  # noqa: E501
        :type dst_ip: str
        :param protocol: The protocol of this IpPacketFilterSet.  # noqa: E501
        :type protocol: int
        :param src_port: The src_port of this IpPacketFilterSet.  # noqa: E501
        :type src_port: int
        :param dst_port: The dst_port of this IpPacketFilterSet.  # noqa: E501
        :type dst_port: int
        :param to_stc: The to_stc of this IpPacketFilterSet.  # noqa: E501
        :type to_stc: str
        :param flow_label: The flow_label of this IpPacketFilterSet.  # noqa: E501
        :type flow_label: int
        :param spi: The spi of this IpPacketFilterSet.  # noqa: E501
        :type spi: int
        :param direction: The direction of this IpPacketFilterSet.  # noqa: E501
        :type direction: str
        """
        self.openapi_types = {
            'src_ip': str,
            'dst_ip': str,
            'protocol': int,
            'src_port': int,
            'dst_port': int,
            'to_stc': str,
            'flow_label': int,
            'spi': int,
            'direction': str
        }

        self.attribute_map = {
            'src_ip': 'srcIp',
            'dst_ip': 'dstIp',
            'protocol': 'protocol',
            'src_port': 'srcPort',
            'dst_port': 'dstPort',
            'to_stc': 'toSTc',
            'flow_label': 'flowLabel',
            'spi': 'spi',
            'direction': 'direction'
        }

        self._src_ip = src_ip
        self._dst_ip = dst_ip
        self._protocol = protocol
        self._src_port = src_port
        self._dst_port = dst_port
        self._to_stc = to_stc
        self._flow_label = flow_label
        self._spi = spi
        self._direction = direction

    @classmethod
    def from_dict(cls, dikt) -> 'IpPacketFilterSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IpPacketFilterSet of this IpPacketFilterSet.  # noqa: E501
        :rtype: IpPacketFilterSet
        """
        return util.deserialize_model(dikt, cls)

    @property
    def src_ip(self):
        """Gets the src_ip of this IpPacketFilterSet.


        :return: The src_ip of this IpPacketFilterSet.
        :rtype: str
        """
        return self._src_ip

    @src_ip.setter
    def src_ip(self, src_ip):
        """Sets the src_ip of this IpPacketFilterSet.


        :param src_ip: The src_ip of this IpPacketFilterSet.
        :type src_ip: str
        """

        self._src_ip = src_ip

    @property
    def dst_ip(self):
        """Gets the dst_ip of this IpPacketFilterSet.


        :return: The dst_ip of this IpPacketFilterSet.
        :rtype: str
        """
        return self._dst_ip

    @dst_ip.setter
    def dst_ip(self, dst_ip):
        """Sets the dst_ip of this IpPacketFilterSet.


        :param dst_ip: The dst_ip of this IpPacketFilterSet.
        :type dst_ip: str
        """

        self._dst_ip = dst_ip

    @property
    def protocol(self):
        """Gets the protocol of this IpPacketFilterSet.


        :return: The protocol of this IpPacketFilterSet.
        :rtype: int
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this IpPacketFilterSet.


        :param protocol: The protocol of this IpPacketFilterSet.
        :type protocol: int
        """

        self._protocol = protocol

    @property
    def src_port(self):
        """Gets the src_port of this IpPacketFilterSet.


        :return: The src_port of this IpPacketFilterSet.
        :rtype: int
        """
        return self._src_port

    @src_port.setter
    def src_port(self, src_port):
        """Sets the src_port of this IpPacketFilterSet.


        :param src_port: The src_port of this IpPacketFilterSet.
        :type src_port: int
        """

        self._src_port = src_port

    @property
    def dst_port(self):
        """Gets the dst_port of this IpPacketFilterSet.


        :return: The dst_port of this IpPacketFilterSet.
        :rtype: int
        """
        return self._dst_port

    @dst_port.setter
    def dst_port(self, dst_port):
        """Sets the dst_port of this IpPacketFilterSet.


        :param dst_port: The dst_port of this IpPacketFilterSet.
        :type dst_port: int
        """

        self._dst_port = dst_port

    @property
    def to_stc(self):
        """Gets the to_stc of this IpPacketFilterSet.


        :return: The to_stc of this IpPacketFilterSet.
        :rtype: str
        """
        return self._to_stc

    @to_stc.setter
    def to_stc(self, to_stc):
        """Sets the to_stc of this IpPacketFilterSet.


        :param to_stc: The to_stc of this IpPacketFilterSet.
        :type to_stc: str
        """

        self._to_stc = to_stc

    @property
    def flow_label(self):
        """Gets the flow_label of this IpPacketFilterSet.


        :return: The flow_label of this IpPacketFilterSet.
        :rtype: int
        """
        return self._flow_label

    @flow_label.setter
    def flow_label(self, flow_label):
        """Sets the flow_label of this IpPacketFilterSet.


        :param flow_label: The flow_label of this IpPacketFilterSet.
        :type flow_label: int
        """

        self._flow_label = flow_label

    @property
    def spi(self):
        """Gets the spi of this IpPacketFilterSet.


        :return: The spi of this IpPacketFilterSet.
        :rtype: int
        """
        return self._spi

    @spi.setter
    def spi(self, spi):
        """Sets the spi of this IpPacketFilterSet.


        :param spi: The spi of this IpPacketFilterSet.
        :type spi: int
        """

        self._spi = spi

    @property
    def direction(self):
        """Gets the direction of this IpPacketFilterSet.


        :return: The direction of this IpPacketFilterSet.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this IpPacketFilterSet.


        :param direction: The direction of this IpPacketFilterSet.
        :type direction: str
        """
        if direction is None:
            raise ValueError("Invalid value for `direction`, must not be `None`")  # noqa: E501

        self._direction = direction
