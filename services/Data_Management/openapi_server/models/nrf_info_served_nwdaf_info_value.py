# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.event_id import EventId
from openapi_server.models.ml_analytics_info import MlAnalyticsInfo
from openapi_server.models.nf_type import NFType
from openapi_server.models.nwdaf_capability import NwdafCapability
from openapi_server.models.nwdaf_event import NwdafEvent
from openapi_server.models.nwdaf_info import NwdafInfo
from openapi_server.models.tai import Tai
from openapi_server.models.tai_range import TaiRange
from openapi_server import util

from openapi_server.models.event_id import EventId  # noqa: E501
from openapi_server.models.ml_analytics_info import MlAnalyticsInfo  # noqa: E501
from openapi_server.models.nf_type import NFType  # noqa: E501
from openapi_server.models.nwdaf_capability import NwdafCapability  # noqa: E501
from openapi_server.models.nwdaf_event import NwdafEvent  # noqa: E501
from openapi_server.models.nwdaf_info import NwdafInfo  # noqa: E501
from openapi_server.models.tai import Tai  # noqa: E501
from openapi_server.models.tai_range import TaiRange  # noqa: E501

class NrfInfoServedNwdafInfoValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_ids=None, nwdaf_events=None, tai_list=None, tai_range_list=None, nwdaf_capability=None, analytics_delay=None, serving_nf_set_id_list=None, serving_nf_type_list=None, ml_analytics_list=None):  # noqa: E501
        """NrfInfoServedNwdafInfoValue - a model defined in OpenAPI

        :param event_ids: The event_ids of this NrfInfoServedNwdafInfoValue.  # noqa: E501
        :type event_ids: List[EventId]
        :param nwdaf_events: The nwdaf_events of this NrfInfoServedNwdafInfoValue.  # noqa: E501
        :type nwdaf_events: List[NwdafEvent]
        :param tai_list: The tai_list of this NrfInfoServedNwdafInfoValue.  # noqa: E501
        :type tai_list: List[Tai]
        :param tai_range_list: The tai_range_list of this NrfInfoServedNwdafInfoValue.  # noqa: E501
        :type tai_range_list: List[TaiRange]
        :param nwdaf_capability: The nwdaf_capability of this NrfInfoServedNwdafInfoValue.  # noqa: E501
        :type nwdaf_capability: NwdafCapability
        :param analytics_delay: The analytics_delay of this NrfInfoServedNwdafInfoValue.  # noqa: E501
        :type analytics_delay: int
        :param serving_nf_set_id_list: The serving_nf_set_id_list of this NrfInfoServedNwdafInfoValue.  # noqa: E501
        :type serving_nf_set_id_list: List[str]
        :param serving_nf_type_list: The serving_nf_type_list of this NrfInfoServedNwdafInfoValue.  # noqa: E501
        :type serving_nf_type_list: List[NFType]
        :param ml_analytics_list: The ml_analytics_list of this NrfInfoServedNwdafInfoValue.  # noqa: E501
        :type ml_analytics_list: List[MlAnalyticsInfo]
        """
        self.openapi_types = {
            'event_ids': List[EventId],
            'nwdaf_events': List[NwdafEvent],
            'tai_list': List[Tai],
            'tai_range_list': List[TaiRange],
            'nwdaf_capability': NwdafCapability,
            'analytics_delay': int,
            'serving_nf_set_id_list': List[str],
            'serving_nf_type_list': List[NFType],
            'ml_analytics_list': List[MlAnalyticsInfo]
        }

        self.attribute_map = {
            'event_ids': 'eventIds',
            'nwdaf_events': 'nwdafEvents',
            'tai_list': 'taiList',
            'tai_range_list': 'taiRangeList',
            'nwdaf_capability': 'nwdafCapability',
            'analytics_delay': 'analyticsDelay',
            'serving_nf_set_id_list': 'servingNfSetIdList',
            'serving_nf_type_list': 'servingNfTypeList',
            'ml_analytics_list': 'mlAnalyticsList'
        }

        self._event_ids = event_ids
        self._nwdaf_events = nwdaf_events
        self._tai_list = tai_list
        self._tai_range_list = tai_range_list
        self._nwdaf_capability = nwdaf_capability
        self._analytics_delay = analytics_delay
        self._serving_nf_set_id_list = serving_nf_set_id_list
        self._serving_nf_type_list = serving_nf_type_list
        self._ml_analytics_list = ml_analytics_list

    @classmethod
    def from_dict(cls, dikt) -> 'NrfInfoServedNwdafInfoValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NrfInfo_servedNwdafInfo_value of this NrfInfoServedNwdafInfoValue.  # noqa: E501
        :rtype: NrfInfoServedNwdafInfoValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_ids(self):
        """Gets the event_ids of this NrfInfoServedNwdafInfoValue.


        :return: The event_ids of this NrfInfoServedNwdafInfoValue.
        :rtype: List[EventId]
        """
        return self._event_ids

    @event_ids.setter
    def event_ids(self, event_ids):
        """Sets the event_ids of this NrfInfoServedNwdafInfoValue.


        :param event_ids: The event_ids of this NrfInfoServedNwdafInfoValue.
        :type event_ids: List[EventId]
        """
        if event_ids is not None and len(event_ids) < 1:
            raise ValueError("Invalid value for `event_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._event_ids = event_ids

    @property
    def nwdaf_events(self):
        """Gets the nwdaf_events of this NrfInfoServedNwdafInfoValue.


        :return: The nwdaf_events of this NrfInfoServedNwdafInfoValue.
        :rtype: List[NwdafEvent]
        """
        return self._nwdaf_events

    @nwdaf_events.setter
    def nwdaf_events(self, nwdaf_events):
        """Sets the nwdaf_events of this NrfInfoServedNwdafInfoValue.


        :param nwdaf_events: The nwdaf_events of this NrfInfoServedNwdafInfoValue.
        :type nwdaf_events: List[NwdafEvent]
        """
        if nwdaf_events is not None and len(nwdaf_events) < 1:
            raise ValueError("Invalid value for `nwdaf_events`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._nwdaf_events = nwdaf_events

    @property
    def tai_list(self):
        """Gets the tai_list of this NrfInfoServedNwdafInfoValue.


        :return: The tai_list of this NrfInfoServedNwdafInfoValue.
        :rtype: List[Tai]
        """
        return self._tai_list

    @tai_list.setter
    def tai_list(self, tai_list):
        """Sets the tai_list of this NrfInfoServedNwdafInfoValue.


        :param tai_list: The tai_list of this NrfInfoServedNwdafInfoValue.
        :type tai_list: List[Tai]
        """
        if tai_list is not None and len(tai_list) < 1:
            raise ValueError("Invalid value for `tai_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._tai_list = tai_list

    @property
    def tai_range_list(self):
        """Gets the tai_range_list of this NrfInfoServedNwdafInfoValue.


        :return: The tai_range_list of this NrfInfoServedNwdafInfoValue.
        :rtype: List[TaiRange]
        """
        return self._tai_range_list

    @tai_range_list.setter
    def tai_range_list(self, tai_range_list):
        """Sets the tai_range_list of this NrfInfoServedNwdafInfoValue.


        :param tai_range_list: The tai_range_list of this NrfInfoServedNwdafInfoValue.
        :type tai_range_list: List[TaiRange]
        """
        if tai_range_list is not None and len(tai_range_list) < 1:
            raise ValueError("Invalid value for `tai_range_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._tai_range_list = tai_range_list

    @property
    def nwdaf_capability(self):
        """Gets the nwdaf_capability of this NrfInfoServedNwdafInfoValue.


        :return: The nwdaf_capability of this NrfInfoServedNwdafInfoValue.
        :rtype: NwdafCapability
        """
        return self._nwdaf_capability

    @nwdaf_capability.setter
    def nwdaf_capability(self, nwdaf_capability):
        """Sets the nwdaf_capability of this NrfInfoServedNwdafInfoValue.


        :param nwdaf_capability: The nwdaf_capability of this NrfInfoServedNwdafInfoValue.
        :type nwdaf_capability: NwdafCapability
        """

        self._nwdaf_capability = nwdaf_capability

    @property
    def analytics_delay(self):
        """Gets the analytics_delay of this NrfInfoServedNwdafInfoValue.

        indicating a time in seconds.  # noqa: E501

        :return: The analytics_delay of this NrfInfoServedNwdafInfoValue.
        :rtype: int
        """
        return self._analytics_delay

    @analytics_delay.setter
    def analytics_delay(self, analytics_delay):
        """Sets the analytics_delay of this NrfInfoServedNwdafInfoValue.

        indicating a time in seconds.  # noqa: E501

        :param analytics_delay: The analytics_delay of this NrfInfoServedNwdafInfoValue.
        :type analytics_delay: int
        """

        self._analytics_delay = analytics_delay

    @property
    def serving_nf_set_id_list(self):
        """Gets the serving_nf_set_id_list of this NrfInfoServedNwdafInfoValue.


        :return: The serving_nf_set_id_list of this NrfInfoServedNwdafInfoValue.
        :rtype: List[str]
        """
        return self._serving_nf_set_id_list

    @serving_nf_set_id_list.setter
    def serving_nf_set_id_list(self, serving_nf_set_id_list):
        """Sets the serving_nf_set_id_list of this NrfInfoServedNwdafInfoValue.


        :param serving_nf_set_id_list: The serving_nf_set_id_list of this NrfInfoServedNwdafInfoValue.
        :type serving_nf_set_id_list: List[str]
        """
        if serving_nf_set_id_list is not None and len(serving_nf_set_id_list) < 1:
            raise ValueError("Invalid value for `serving_nf_set_id_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._serving_nf_set_id_list = serving_nf_set_id_list

    @property
    def serving_nf_type_list(self):
        """Gets the serving_nf_type_list of this NrfInfoServedNwdafInfoValue.


        :return: The serving_nf_type_list of this NrfInfoServedNwdafInfoValue.
        :rtype: List[NFType]
        """
        return self._serving_nf_type_list

    @serving_nf_type_list.setter
    def serving_nf_type_list(self, serving_nf_type_list):
        """Sets the serving_nf_type_list of this NrfInfoServedNwdafInfoValue.


        :param serving_nf_type_list: The serving_nf_type_list of this NrfInfoServedNwdafInfoValue.
        :type serving_nf_type_list: List[NFType]
        """
        if serving_nf_type_list is not None and len(serving_nf_type_list) < 1:
            raise ValueError("Invalid value for `serving_nf_type_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._serving_nf_type_list = serving_nf_type_list

    @property
    def ml_analytics_list(self):
        """Gets the ml_analytics_list of this NrfInfoServedNwdafInfoValue.


        :return: The ml_analytics_list of this NrfInfoServedNwdafInfoValue.
        :rtype: List[MlAnalyticsInfo]
        """
        return self._ml_analytics_list

    @ml_analytics_list.setter
    def ml_analytics_list(self, ml_analytics_list):
        """Sets the ml_analytics_list of this NrfInfoServedNwdafInfoValue.


        :param ml_analytics_list: The ml_analytics_list of this NrfInfoServedNwdafInfoValue.
        :type ml_analytics_list: List[MlAnalyticsInfo]
        """
        if ml_analytics_list is not None and len(ml_analytics_list) < 1:
            raise ValueError("Invalid value for `ml_analytics_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ml_analytics_list = ml_analytics_list
