# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.aanf_info import AanfInfo
from openapi_server import util

from openapi_server.models.aanf_info import AanfInfo  # noqa: E501

class NrfInfoServedAanfInfoListValueValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, routing_indicators=None):  # noqa: E501
        """NrfInfoServedAanfInfoListValueValue - a model defined in OpenAPI

        :param routing_indicators: The routing_indicators of this NrfInfoServedAanfInfoListValueValue.  # noqa: E501
        :type routing_indicators: List[str]
        """
        self.openapi_types = {
            'routing_indicators': List[str]
        }

        self.attribute_map = {
            'routing_indicators': 'routingIndicators'
        }

        self._routing_indicators = routing_indicators

    @classmethod
    def from_dict(cls, dikt) -> 'NrfInfoServedAanfInfoListValueValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NrfInfo_servedAanfInfoList_value_value of this NrfInfoServedAanfInfoListValueValue.  # noqa: E501
        :rtype: NrfInfoServedAanfInfoListValueValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def routing_indicators(self):
        """Gets the routing_indicators of this NrfInfoServedAanfInfoListValueValue.


        :return: The routing_indicators of this NrfInfoServedAanfInfoListValueValue.
        :rtype: List[str]
        """
        return self._routing_indicators

    @routing_indicators.setter
    def routing_indicators(self, routing_indicators):
        """Sets the routing_indicators of this NrfInfoServedAanfInfoListValueValue.


        :param routing_indicators: The routing_indicators of this NrfInfoServedAanfInfoListValueValue.
        :type routing_indicators: List[str]
        """
        if routing_indicators is not None and len(routing_indicators) < 1:
            raise ValueError("Invalid value for `routing_indicators`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._routing_indicators = routing_indicators
