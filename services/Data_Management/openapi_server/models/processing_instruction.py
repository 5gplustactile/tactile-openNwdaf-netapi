# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.dccf_event import DccfEvent
from openapi_server.models.parameter_processing_instruction import ParameterProcessingInstruction
from openapi_server import util

from openapi_server.models.dccf_event import DccfEvent  # noqa: E501
from openapi_server.models.parameter_processing_instruction import ParameterProcessingInstruction  # noqa: E501

class ProcessingInstruction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_id=None, proc_interval=None, param_proc_instructs=None):  # noqa: E501
        """ProcessingInstruction - a model defined in OpenAPI

        :param event_id: The event_id of this ProcessingInstruction.  # noqa: E501
        :type event_id: DccfEvent
        :param proc_interval: The proc_interval of this ProcessingInstruction.  # noqa: E501
        :type proc_interval: int
        :param param_proc_instructs: The param_proc_instructs of this ProcessingInstruction.  # noqa: E501
        :type param_proc_instructs: List[ParameterProcessingInstruction]
        """
        self.openapi_types = {
            'event_id': DccfEvent,
            'proc_interval': int,
            'param_proc_instructs': List[ParameterProcessingInstruction]
        }

        self.attribute_map = {
            'event_id': 'eventId',
            'proc_interval': 'procInterval',
            'param_proc_instructs': 'paramProcInstructs'
        }

        self._event_id = event_id
        self._proc_interval = proc_interval
        self._param_proc_instructs = param_proc_instructs

    @classmethod
    def from_dict(cls, dikt) -> 'ProcessingInstruction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProcessingInstruction of this ProcessingInstruction.  # noqa: E501
        :rtype: ProcessingInstruction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_id(self):
        """Gets the event_id of this ProcessingInstruction.


        :return: The event_id of this ProcessingInstruction.
        :rtype: DccfEvent
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this ProcessingInstruction.


        :param event_id: The event_id of this ProcessingInstruction.
        :type event_id: DccfEvent
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")  # noqa: E501

        self._event_id = event_id

    @property
    def proc_interval(self):
        """Gets the proc_interval of this ProcessingInstruction.

        indicating a time in seconds.  # noqa: E501

        :return: The proc_interval of this ProcessingInstruction.
        :rtype: int
        """
        return self._proc_interval

    @proc_interval.setter
    def proc_interval(self, proc_interval):
        """Sets the proc_interval of this ProcessingInstruction.

        indicating a time in seconds.  # noqa: E501

        :param proc_interval: The proc_interval of this ProcessingInstruction.
        :type proc_interval: int
        """
        if proc_interval is None:
            raise ValueError("Invalid value for `proc_interval`, must not be `None`")  # noqa: E501

        self._proc_interval = proc_interval

    @property
    def param_proc_instructs(self):
        """Gets the param_proc_instructs of this ProcessingInstruction.

        List of event parameter names, and for each event parameter name, respective event parameter values and sets of the attributes to be used in the summarized reports.   # noqa: E501

        :return: The param_proc_instructs of this ProcessingInstruction.
        :rtype: List[ParameterProcessingInstruction]
        """
        return self._param_proc_instructs

    @param_proc_instructs.setter
    def param_proc_instructs(self, param_proc_instructs):
        """Sets the param_proc_instructs of this ProcessingInstruction.

        List of event parameter names, and for each event parameter name, respective event parameter values and sets of the attributes to be used in the summarized reports.   # noqa: E501

        :param param_proc_instructs: The param_proc_instructs of this ProcessingInstruction.
        :type param_proc_instructs: List[ParameterProcessingInstruction]
        """
        if param_proc_instructs is not None and len(param_proc_instructs) < 1:
            raise ValueError("Invalid value for `param_proc_instructs`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._param_proc_instructs = param_proc_instructs
