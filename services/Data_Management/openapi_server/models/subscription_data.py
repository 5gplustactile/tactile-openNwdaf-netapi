# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.ext_snssai import ExtSnssai
from openapi_server.models.locality_description import LocalityDescription
from openapi_server.models.nf_type import NFType
from openapi_server.models.notif_condition import NotifCondition
from openapi_server.models.notification_event_type import NotificationEventType
from openapi_server.models.plmn_id import PlmnId
from openapi_server.models.plmn_id_nid import PlmnIdNid
from openapi_server.models.plmn_snssai import PlmnSnssai
from openapi_server.models.subscr_cond import SubscrCond
import re
from openapi_server import util

from openapi_server.models.ext_snssai import ExtSnssai  # noqa: E501
from openapi_server.models.locality_description import LocalityDescription  # noqa: E501
from openapi_server.models.nf_type import NFType  # noqa: E501
from openapi_server.models.notif_condition import NotifCondition  # noqa: E501
from openapi_server.models.notification_event_type import NotificationEventType  # noqa: E501
from openapi_server.models.plmn_id import PlmnId  # noqa: E501
from openapi_server.models.plmn_id_nid import PlmnIdNid  # noqa: E501
from openapi_server.models.plmn_snssai import PlmnSnssai  # noqa: E501
from openapi_server.models.subscr_cond import SubscrCond  # noqa: E501
import re  # noqa: E501

class SubscriptionData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nf_status_notification_uri=None, req_nf_instance_id=None, subscr_cond=None, subscription_id=None, validity_time=None, req_notif_events=None, plmn_id=None, nid=None, notif_condition=None, req_nf_type=None, req_nf_fqdn=None, req_snssais=None, req_per_plmn_snssais=None, req_plmn_list=None, req_snpn_list=None, serving_scope=None, requester_features=None, nrf_supported_features=None, hnrf_uri=None, onboarding_capability=False, target_hni=None, preferred_locality=None, ext_preferred_locality=None, complete_profile_subscription=False):  # noqa: E501
        """SubscriptionData - a model defined in OpenAPI

        :param nf_status_notification_uri: The nf_status_notification_uri of this SubscriptionData.  # noqa: E501
        :type nf_status_notification_uri: str
        :param req_nf_instance_id: The req_nf_instance_id of this SubscriptionData.  # noqa: E501
        :type req_nf_instance_id: str
        :param subscr_cond: The subscr_cond of this SubscriptionData.  # noqa: E501
        :type subscr_cond: SubscrCond
        :param subscription_id: The subscription_id of this SubscriptionData.  # noqa: E501
        :type subscription_id: str
        :param validity_time: The validity_time of this SubscriptionData.  # noqa: E501
        :type validity_time: datetime
        :param req_notif_events: The req_notif_events of this SubscriptionData.  # noqa: E501
        :type req_notif_events: List[NotificationEventType]
        :param plmn_id: The plmn_id of this SubscriptionData.  # noqa: E501
        :type plmn_id: PlmnId
        :param nid: The nid of this SubscriptionData.  # noqa: E501
        :type nid: str
        :param notif_condition: The notif_condition of this SubscriptionData.  # noqa: E501
        :type notif_condition: NotifCondition
        :param req_nf_type: The req_nf_type of this SubscriptionData.  # noqa: E501
        :type req_nf_type: NFType
        :param req_nf_fqdn: The req_nf_fqdn of this SubscriptionData.  # noqa: E501
        :type req_nf_fqdn: str
        :param req_snssais: The req_snssais of this SubscriptionData.  # noqa: E501
        :type req_snssais: List[ExtSnssai]
        :param req_per_plmn_snssais: The req_per_plmn_snssais of this SubscriptionData.  # noqa: E501
        :type req_per_plmn_snssais: List[PlmnSnssai]
        :param req_plmn_list: The req_plmn_list of this SubscriptionData.  # noqa: E501
        :type req_plmn_list: List[PlmnId]
        :param req_snpn_list: The req_snpn_list of this SubscriptionData.  # noqa: E501
        :type req_snpn_list: List[PlmnIdNid]
        :param serving_scope: The serving_scope of this SubscriptionData.  # noqa: E501
        :type serving_scope: List[str]
        :param requester_features: The requester_features of this SubscriptionData.  # noqa: E501
        :type requester_features: str
        :param nrf_supported_features: The nrf_supported_features of this SubscriptionData.  # noqa: E501
        :type nrf_supported_features: str
        :param hnrf_uri: The hnrf_uri of this SubscriptionData.  # noqa: E501
        :type hnrf_uri: str
        :param onboarding_capability: The onboarding_capability of this SubscriptionData.  # noqa: E501
        :type onboarding_capability: bool
        :param target_hni: The target_hni of this SubscriptionData.  # noqa: E501
        :type target_hni: str
        :param preferred_locality: The preferred_locality of this SubscriptionData.  # noqa: E501
        :type preferred_locality: str
        :param ext_preferred_locality: The ext_preferred_locality of this SubscriptionData.  # noqa: E501
        :type ext_preferred_locality: Dict[str, List[LocalityDescription]]
        :param complete_profile_subscription: The complete_profile_subscription of this SubscriptionData.  # noqa: E501
        :type complete_profile_subscription: bool
        """
        self.openapi_types = {
            'nf_status_notification_uri': str,
            'req_nf_instance_id': str,
            'subscr_cond': SubscrCond,
            'subscription_id': str,
            'validity_time': datetime,
            'req_notif_events': List[NotificationEventType],
            'plmn_id': PlmnId,
            'nid': str,
            'notif_condition': NotifCondition,
            'req_nf_type': NFType,
            'req_nf_fqdn': str,
            'req_snssais': List[ExtSnssai],
            'req_per_plmn_snssais': List[PlmnSnssai],
            'req_plmn_list': List[PlmnId],
            'req_snpn_list': List[PlmnIdNid],
            'serving_scope': List[str],
            'requester_features': str,
            'nrf_supported_features': str,
            'hnrf_uri': str,
            'onboarding_capability': bool,
            'target_hni': str,
            'preferred_locality': str,
            'ext_preferred_locality': Dict[str, List[LocalityDescription]],
            'complete_profile_subscription': bool
        }

        self.attribute_map = {
            'nf_status_notification_uri': 'nfStatusNotificationUri',
            'req_nf_instance_id': 'reqNfInstanceId',
            'subscr_cond': 'subscrCond',
            'subscription_id': 'subscriptionId',
            'validity_time': 'validityTime',
            'req_notif_events': 'reqNotifEvents',
            'plmn_id': 'plmnId',
            'nid': 'nid',
            'notif_condition': 'notifCondition',
            'req_nf_type': 'reqNfType',
            'req_nf_fqdn': 'reqNfFqdn',
            'req_snssais': 'reqSnssais',
            'req_per_plmn_snssais': 'reqPerPlmnSnssais',
            'req_plmn_list': 'reqPlmnList',
            'req_snpn_list': 'reqSnpnList',
            'serving_scope': 'servingScope',
            'requester_features': 'requesterFeatures',
            'nrf_supported_features': 'nrfSupportedFeatures',
            'hnrf_uri': 'hnrfUri',
            'onboarding_capability': 'onboardingCapability',
            'target_hni': 'targetHni',
            'preferred_locality': 'preferredLocality',
            'ext_preferred_locality': 'extPreferredLocality',
            'complete_profile_subscription': 'completeProfileSubscription'
        }

        self._nf_status_notification_uri = nf_status_notification_uri
        self._req_nf_instance_id = req_nf_instance_id
        self._subscr_cond = subscr_cond
        self._subscription_id = subscription_id
        self._validity_time = validity_time
        self._req_notif_events = req_notif_events
        self._plmn_id = plmn_id
        self._nid = nid
        self._notif_condition = notif_condition
        self._req_nf_type = req_nf_type
        self._req_nf_fqdn = req_nf_fqdn
        self._req_snssais = req_snssais
        self._req_per_plmn_snssais = req_per_plmn_snssais
        self._req_plmn_list = req_plmn_list
        self._req_snpn_list = req_snpn_list
        self._serving_scope = serving_scope
        self._requester_features = requester_features
        self._nrf_supported_features = nrf_supported_features
        self._hnrf_uri = hnrf_uri
        self._onboarding_capability = onboarding_capability
        self._target_hni = target_hni
        self._preferred_locality = preferred_locality
        self._ext_preferred_locality = ext_preferred_locality
        self._complete_profile_subscription = complete_profile_subscription

    @classmethod
    def from_dict(cls, dikt) -> 'SubscriptionData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SubscriptionData of this SubscriptionData.  # noqa: E501
        :rtype: SubscriptionData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nf_status_notification_uri(self):
        """Gets the nf_status_notification_uri of this SubscriptionData.


        :return: The nf_status_notification_uri of this SubscriptionData.
        :rtype: str
        """
        return self._nf_status_notification_uri

    @nf_status_notification_uri.setter
    def nf_status_notification_uri(self, nf_status_notification_uri):
        """Sets the nf_status_notification_uri of this SubscriptionData.


        :param nf_status_notification_uri: The nf_status_notification_uri of this SubscriptionData.
        :type nf_status_notification_uri: str
        """
        if nf_status_notification_uri is None:
            raise ValueError("Invalid value for `nf_status_notification_uri`, must not be `None`")  # noqa: E501

        self._nf_status_notification_uri = nf_status_notification_uri

    @property
    def req_nf_instance_id(self):
        """Gets the req_nf_instance_id of this SubscriptionData.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :return: The req_nf_instance_id of this SubscriptionData.
        :rtype: str
        """
        return self._req_nf_instance_id

    @req_nf_instance_id.setter
    def req_nf_instance_id(self, req_nf_instance_id):
        """Sets the req_nf_instance_id of this SubscriptionData.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :param req_nf_instance_id: The req_nf_instance_id of this SubscriptionData.
        :type req_nf_instance_id: str
        """

        self._req_nf_instance_id = req_nf_instance_id

    @property
    def subscr_cond(self):
        """Gets the subscr_cond of this SubscriptionData.


        :return: The subscr_cond of this SubscriptionData.
        :rtype: SubscrCond
        """
        return self._subscr_cond

    @subscr_cond.setter
    def subscr_cond(self, subscr_cond):
        """Sets the subscr_cond of this SubscriptionData.


        :param subscr_cond: The subscr_cond of this SubscriptionData.
        :type subscr_cond: SubscrCond
        """

        self._subscr_cond = subscr_cond

    @property
    def subscription_id(self):
        """Gets the subscription_id of this SubscriptionData.


        :return: The subscription_id of this SubscriptionData.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this SubscriptionData.


        :param subscription_id: The subscription_id of this SubscriptionData.
        :type subscription_id: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")  # noqa: E501
        if subscription_id is not None and not re.search(r'^([0-9]{5,6}-)?[^-]+$', subscription_id):  # noqa: E501
            raise ValueError("Invalid value for `subscription_id`, must be a follow pattern or equal to `/^([0-9]{5,6}-)?[^-]+$/`")  # noqa: E501

        self._subscription_id = subscription_id

    @property
    def validity_time(self):
        """Gets the validity_time of this SubscriptionData.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :return: The validity_time of this SubscriptionData.
        :rtype: datetime
        """
        return self._validity_time

    @validity_time.setter
    def validity_time(self, validity_time):
        """Sets the validity_time of this SubscriptionData.

        string with format 'date-time' as defined in OpenAPI.  # noqa: E501

        :param validity_time: The validity_time of this SubscriptionData.
        :type validity_time: datetime
        """

        self._validity_time = validity_time

    @property
    def req_notif_events(self):
        """Gets the req_notif_events of this SubscriptionData.


        :return: The req_notif_events of this SubscriptionData.
        :rtype: List[NotificationEventType]
        """
        return self._req_notif_events

    @req_notif_events.setter
    def req_notif_events(self, req_notif_events):
        """Sets the req_notif_events of this SubscriptionData.


        :param req_notif_events: The req_notif_events of this SubscriptionData.
        :type req_notif_events: List[NotificationEventType]
        """
        if req_notif_events is not None and len(req_notif_events) < 1:
            raise ValueError("Invalid value for `req_notif_events`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._req_notif_events = req_notif_events

    @property
    def plmn_id(self):
        """Gets the plmn_id of this SubscriptionData.


        :return: The plmn_id of this SubscriptionData.
        :rtype: PlmnId
        """
        return self._plmn_id

    @plmn_id.setter
    def plmn_id(self, plmn_id):
        """Sets the plmn_id of this SubscriptionData.


        :param plmn_id: The plmn_id of this SubscriptionData.
        :type plmn_id: PlmnId
        """

        self._plmn_id = plmn_id

    @property
    def nid(self):
        """Gets the nid of this SubscriptionData.

        This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1).    # noqa: E501

        :return: The nid of this SubscriptionData.
        :rtype: str
        """
        return self._nid

    @nid.setter
    def nid(self, nid):
        """Sets the nid of this SubscriptionData.

        This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1).    # noqa: E501

        :param nid: The nid of this SubscriptionData.
        :type nid: str
        """
        if nid is not None and not re.search(r'^[A-Fa-f0-9]{11}$', nid):  # noqa: E501
            raise ValueError("Invalid value for `nid`, must be a follow pattern or equal to `/^[A-Fa-f0-9]{11}$/`")  # noqa: E501

        self._nid = nid

    @property
    def notif_condition(self):
        """Gets the notif_condition of this SubscriptionData.


        :return: The notif_condition of this SubscriptionData.
        :rtype: NotifCondition
        """
        return self._notif_condition

    @notif_condition.setter
    def notif_condition(self, notif_condition):
        """Sets the notif_condition of this SubscriptionData.


        :param notif_condition: The notif_condition of this SubscriptionData.
        :type notif_condition: NotifCondition
        """

        self._notif_condition = notif_condition

    @property
    def req_nf_type(self):
        """Gets the req_nf_type of this SubscriptionData.


        :return: The req_nf_type of this SubscriptionData.
        :rtype: NFType
        """
        return self._req_nf_type

    @req_nf_type.setter
    def req_nf_type(self, req_nf_type):
        """Sets the req_nf_type of this SubscriptionData.


        :param req_nf_type: The req_nf_type of this SubscriptionData.
        :type req_nf_type: NFType
        """

        self._req_nf_type = req_nf_type

    @property
    def req_nf_fqdn(self):
        """Gets the req_nf_fqdn of this SubscriptionData.

        Fully Qualified Domain Name  # noqa: E501

        :return: The req_nf_fqdn of this SubscriptionData.
        :rtype: str
        """
        return self._req_nf_fqdn

    @req_nf_fqdn.setter
    def req_nf_fqdn(self, req_nf_fqdn):
        """Sets the req_nf_fqdn of this SubscriptionData.

        Fully Qualified Domain Name  # noqa: E501

        :param req_nf_fqdn: The req_nf_fqdn of this SubscriptionData.
        :type req_nf_fqdn: str
        """
        if req_nf_fqdn is not None and len(req_nf_fqdn) > 253:
            raise ValueError("Invalid value for `req_nf_fqdn`, length must be less than or equal to `253`")  # noqa: E501
        if req_nf_fqdn is not None and len(req_nf_fqdn) < 4:
            raise ValueError("Invalid value for `req_nf_fqdn`, length must be greater than or equal to `4`")  # noqa: E501
        if req_nf_fqdn is not None and not re.search(r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$', req_nf_fqdn):  # noqa: E501
            raise ValueError("Invalid value for `req_nf_fqdn`, must be a follow pattern or equal to `/^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$/`")  # noqa: E501

        self._req_nf_fqdn = req_nf_fqdn

    @property
    def req_snssais(self):
        """Gets the req_snssais of this SubscriptionData.


        :return: The req_snssais of this SubscriptionData.
        :rtype: List[ExtSnssai]
        """
        return self._req_snssais

    @req_snssais.setter
    def req_snssais(self, req_snssais):
        """Sets the req_snssais of this SubscriptionData.


        :param req_snssais: The req_snssais of this SubscriptionData.
        :type req_snssais: List[ExtSnssai]
        """
        if req_snssais is not None and len(req_snssais) < 1:
            raise ValueError("Invalid value for `req_snssais`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._req_snssais = req_snssais

    @property
    def req_per_plmn_snssais(self):
        """Gets the req_per_plmn_snssais of this SubscriptionData.


        :return: The req_per_plmn_snssais of this SubscriptionData.
        :rtype: List[PlmnSnssai]
        """
        return self._req_per_plmn_snssais

    @req_per_plmn_snssais.setter
    def req_per_plmn_snssais(self, req_per_plmn_snssais):
        """Sets the req_per_plmn_snssais of this SubscriptionData.


        :param req_per_plmn_snssais: The req_per_plmn_snssais of this SubscriptionData.
        :type req_per_plmn_snssais: List[PlmnSnssai]
        """
        if req_per_plmn_snssais is not None and len(req_per_plmn_snssais) < 1:
            raise ValueError("Invalid value for `req_per_plmn_snssais`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._req_per_plmn_snssais = req_per_plmn_snssais

    @property
    def req_plmn_list(self):
        """Gets the req_plmn_list of this SubscriptionData.


        :return: The req_plmn_list of this SubscriptionData.
        :rtype: List[PlmnId]
        """
        return self._req_plmn_list

    @req_plmn_list.setter
    def req_plmn_list(self, req_plmn_list):
        """Sets the req_plmn_list of this SubscriptionData.


        :param req_plmn_list: The req_plmn_list of this SubscriptionData.
        :type req_plmn_list: List[PlmnId]
        """
        if req_plmn_list is not None and len(req_plmn_list) < 1:
            raise ValueError("Invalid value for `req_plmn_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._req_plmn_list = req_plmn_list

    @property
    def req_snpn_list(self):
        """Gets the req_snpn_list of this SubscriptionData.


        :return: The req_snpn_list of this SubscriptionData.
        :rtype: List[PlmnIdNid]
        """
        return self._req_snpn_list

    @req_snpn_list.setter
    def req_snpn_list(self, req_snpn_list):
        """Sets the req_snpn_list of this SubscriptionData.


        :param req_snpn_list: The req_snpn_list of this SubscriptionData.
        :type req_snpn_list: List[PlmnIdNid]
        """
        if req_snpn_list is not None and len(req_snpn_list) < 1:
            raise ValueError("Invalid value for `req_snpn_list`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._req_snpn_list = req_snpn_list

    @property
    def serving_scope(self):
        """Gets the serving_scope of this SubscriptionData.


        :return: The serving_scope of this SubscriptionData.
        :rtype: List[str]
        """
        return self._serving_scope

    @serving_scope.setter
    def serving_scope(self, serving_scope):
        """Sets the serving_scope of this SubscriptionData.


        :param serving_scope: The serving_scope of this SubscriptionData.
        :type serving_scope: List[str]
        """
        if serving_scope is not None and len(serving_scope) < 1:
            raise ValueError("Invalid value for `serving_scope`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._serving_scope = serving_scope

    @property
    def requester_features(self):
        """Gets the requester_features of this SubscriptionData.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :return: The requester_features of this SubscriptionData.
        :rtype: str
        """
        return self._requester_features

    @requester_features.setter
    def requester_features(self, requester_features):
        """Sets the requester_features of this SubscriptionData.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :param requester_features: The requester_features of this SubscriptionData.
        :type requester_features: str
        """
        if requester_features is not None and not re.search(r'^[A-Fa-f0-9]*$', requester_features):  # noqa: E501
            raise ValueError("Invalid value for `requester_features`, must be a follow pattern or equal to `/^[A-Fa-f0-9]*$/`")  # noqa: E501

        self._requester_features = requester_features

    @property
    def nrf_supported_features(self):
        """Gets the nrf_supported_features of this SubscriptionData.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :return: The nrf_supported_features of this SubscriptionData.
        :rtype: str
        """
        return self._nrf_supported_features

    @nrf_supported_features.setter
    def nrf_supported_features(self, nrf_supported_features):
        """Sets the nrf_supported_features of this SubscriptionData.

        A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported.   # noqa: E501

        :param nrf_supported_features: The nrf_supported_features of this SubscriptionData.
        :type nrf_supported_features: str
        """
        if nrf_supported_features is not None and not re.search(r'^[A-Fa-f0-9]*$', nrf_supported_features):  # noqa: E501
            raise ValueError("Invalid value for `nrf_supported_features`, must be a follow pattern or equal to `/^[A-Fa-f0-9]*$/`")  # noqa: E501

        self._nrf_supported_features = nrf_supported_features

    @property
    def hnrf_uri(self):
        """Gets the hnrf_uri of this SubscriptionData.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :return: The hnrf_uri of this SubscriptionData.
        :rtype: str
        """
        return self._hnrf_uri

    @hnrf_uri.setter
    def hnrf_uri(self, hnrf_uri):
        """Sets the hnrf_uri of this SubscriptionData.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :param hnrf_uri: The hnrf_uri of this SubscriptionData.
        :type hnrf_uri: str
        """

        self._hnrf_uri = hnrf_uri

    @property
    def onboarding_capability(self):
        """Gets the onboarding_capability of this SubscriptionData.


        :return: The onboarding_capability of this SubscriptionData.
        :rtype: bool
        """
        return self._onboarding_capability

    @onboarding_capability.setter
    def onboarding_capability(self, onboarding_capability):
        """Sets the onboarding_capability of this SubscriptionData.


        :param onboarding_capability: The onboarding_capability of this SubscriptionData.
        :type onboarding_capability: bool
        """

        self._onboarding_capability = onboarding_capability

    @property
    def target_hni(self):
        """Gets the target_hni of this SubscriptionData.

        Fully Qualified Domain Name  # noqa: E501

        :return: The target_hni of this SubscriptionData.
        :rtype: str
        """
        return self._target_hni

    @target_hni.setter
    def target_hni(self, target_hni):
        """Sets the target_hni of this SubscriptionData.

        Fully Qualified Domain Name  # noqa: E501

        :param target_hni: The target_hni of this SubscriptionData.
        :type target_hni: str
        """
        if target_hni is not None and len(target_hni) > 253:
            raise ValueError("Invalid value for `target_hni`, length must be less than or equal to `253`")  # noqa: E501
        if target_hni is not None and len(target_hni) < 4:
            raise ValueError("Invalid value for `target_hni`, length must be greater than or equal to `4`")  # noqa: E501
        if target_hni is not None and not re.search(r'^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$', target_hni):  # noqa: E501
            raise ValueError("Invalid value for `target_hni`, must be a follow pattern or equal to `/^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$/`")  # noqa: E501

        self._target_hni = target_hni

    @property
    def preferred_locality(self):
        """Gets the preferred_locality of this SubscriptionData.


        :return: The preferred_locality of this SubscriptionData.
        :rtype: str
        """
        return self._preferred_locality

    @preferred_locality.setter
    def preferred_locality(self, preferred_locality):
        """Sets the preferred_locality of this SubscriptionData.


        :param preferred_locality: The preferred_locality of this SubscriptionData.
        :type preferred_locality: str
        """

        self._preferred_locality = preferred_locality

    @property
    def ext_preferred_locality(self):
        """Gets the ext_preferred_locality of this SubscriptionData.

        A map (list of key-value pairs) where the key of the map represents the relative priority, for the requester, of each locality description among the list of locality descriptions in this query parameter, encoded as \"1\" (highest priority\"), \"2\", \"3\", …,  \"n\" (lowest priority)   # noqa: E501

        :return: The ext_preferred_locality of this SubscriptionData.
        :rtype: Dict[str, List[LocalityDescription]]
        """
        return self._ext_preferred_locality

    @ext_preferred_locality.setter
    def ext_preferred_locality(self, ext_preferred_locality):
        """Sets the ext_preferred_locality of this SubscriptionData.

        A map (list of key-value pairs) where the key of the map represents the relative priority, for the requester, of each locality description among the list of locality descriptions in this query parameter, encoded as \"1\" (highest priority\"), \"2\", \"3\", …,  \"n\" (lowest priority)   # noqa: E501

        :param ext_preferred_locality: The ext_preferred_locality of this SubscriptionData.
        :type ext_preferred_locality: Dict[str, List[LocalityDescription]]
        """
        if ext_preferred_locality is not None and len(ext_preferred_locality) < 1:
            raise ValueError("Invalid value for `ext_preferred_locality`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._ext_preferred_locality = ext_preferred_locality

    @property
    def complete_profile_subscription(self):
        """Gets the complete_profile_subscription of this SubscriptionData.


        :return: The complete_profile_subscription of this SubscriptionData.
        :rtype: bool
        """
        return self._complete_profile_subscription

    @complete_profile_subscription.setter
    def complete_profile_subscription(self, complete_profile_subscription):
        """Sets the complete_profile_subscription of this SubscriptionData.


        :param complete_profile_subscription: The complete_profile_subscription of this SubscriptionData.
        :type complete_profile_subscription: bool
        """

        self._complete_profile_subscription = complete_profile_subscription
