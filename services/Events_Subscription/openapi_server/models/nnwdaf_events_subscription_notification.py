# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.event_notification import EventNotification
from openapi_server.models.term_cause import TermCause
from openapi_server import util

from openapi_server.models.event_notification import EventNotification  # noqa: E501
from openapi_server.models.term_cause import TermCause  # noqa: E501

class NnwdafEventsSubscriptionNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_notifications=None, subscription_id=None, notif_corr_id=None, old_subscription_id=None, resource_uri=None, term_cause=None):  # noqa: E501
        """NnwdafEventsSubscriptionNotification - a model defined in OpenAPI

        :param event_notifications: The event_notifications of this NnwdafEventsSubscriptionNotification.  # noqa: E501
        :type event_notifications: List[EventNotification]
        :param subscription_id: The subscription_id of this NnwdafEventsSubscriptionNotification.  # noqa: E501
        :type subscription_id: str
        :param notif_corr_id: The notif_corr_id of this NnwdafEventsSubscriptionNotification.  # noqa: E501
        :type notif_corr_id: str
        :param old_subscription_id: The old_subscription_id of this NnwdafEventsSubscriptionNotification.  # noqa: E501
        :type old_subscription_id: str
        :param resource_uri: The resource_uri of this NnwdafEventsSubscriptionNotification.  # noqa: E501
        :type resource_uri: str
        :param term_cause: The term_cause of this NnwdafEventsSubscriptionNotification.  # noqa: E501
        :type term_cause: TermCause
        """
        self.openapi_types = {
            'event_notifications': List[EventNotification],
            'subscription_id': str,
            'notif_corr_id': str,
            'old_subscription_id': str,
            'resource_uri': str,
            'term_cause': TermCause
        }

        self.attribute_map = {
            'event_notifications': 'eventNotifications',
            'subscription_id': 'subscriptionId',
            'notif_corr_id': 'notifCorrId',
            'old_subscription_id': 'oldSubscriptionId',
            'resource_uri': 'resourceUri',
            'term_cause': 'termCause'
        }

        self._event_notifications = event_notifications
        self._subscription_id = subscription_id
        self._notif_corr_id = notif_corr_id
        self._old_subscription_id = old_subscription_id
        self._resource_uri = resource_uri
        self._term_cause = term_cause

    @classmethod
    def from_dict(cls, dikt) -> 'NnwdafEventsSubscriptionNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NnwdafEventsSubscriptionNotification of this NnwdafEventsSubscriptionNotification.  # noqa: E501
        :rtype: NnwdafEventsSubscriptionNotification
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_notifications(self):
        """Gets the event_notifications of this NnwdafEventsSubscriptionNotification.

        Notifications about Individual Events  # noqa: E501

        :return: The event_notifications of this NnwdafEventsSubscriptionNotification.
        :rtype: List[EventNotification]
        """
        return self._event_notifications

    @event_notifications.setter
    def event_notifications(self, event_notifications):
        """Sets the event_notifications of this NnwdafEventsSubscriptionNotification.

        Notifications about Individual Events  # noqa: E501

        :param event_notifications: The event_notifications of this NnwdafEventsSubscriptionNotification.
        :type event_notifications: List[EventNotification]
        """
        if event_notifications is not None and len(event_notifications) < 1:
            raise ValueError("Invalid value for `event_notifications`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._event_notifications = event_notifications

    @property
    def subscription_id(self):
        """Gets the subscription_id of this NnwdafEventsSubscriptionNotification.

        String identifying a subscription to the Nnwdaf_EventsSubscription Service  # noqa: E501

        :return: The subscription_id of this NnwdafEventsSubscriptionNotification.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this NnwdafEventsSubscriptionNotification.

        String identifying a subscription to the Nnwdaf_EventsSubscription Service  # noqa: E501

        :param subscription_id: The subscription_id of this NnwdafEventsSubscriptionNotification.
        :type subscription_id: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")  # noqa: E501

        self._subscription_id = subscription_id

    @property
    def notif_corr_id(self):
        """Gets the notif_corr_id of this NnwdafEventsSubscriptionNotification.

        Notification correlation identifier.  # noqa: E501

        :return: The notif_corr_id of this NnwdafEventsSubscriptionNotification.
        :rtype: str
        """
        return self._notif_corr_id

    @notif_corr_id.setter
    def notif_corr_id(self, notif_corr_id):
        """Sets the notif_corr_id of this NnwdafEventsSubscriptionNotification.

        Notification correlation identifier.  # noqa: E501

        :param notif_corr_id: The notif_corr_id of this NnwdafEventsSubscriptionNotification.
        :type notif_corr_id: str
        """

        self._notif_corr_id = notif_corr_id

    @property
    def old_subscription_id(self):
        """Gets the old_subscription_id of this NnwdafEventsSubscriptionNotification.

        Subscription ID which was allocated by the source NWDAF. This parameter shall be present if the notification is for informing the assignment of a new Subscription Id by the target NWDAF.   # noqa: E501

        :return: The old_subscription_id of this NnwdafEventsSubscriptionNotification.
        :rtype: str
        """
        return self._old_subscription_id

    @old_subscription_id.setter
    def old_subscription_id(self, old_subscription_id):
        """Sets the old_subscription_id of this NnwdafEventsSubscriptionNotification.

        Subscription ID which was allocated by the source NWDAF. This parameter shall be present if the notification is for informing the assignment of a new Subscription Id by the target NWDAF.   # noqa: E501

        :param old_subscription_id: The old_subscription_id of this NnwdafEventsSubscriptionNotification.
        :type old_subscription_id: str
        """

        self._old_subscription_id = old_subscription_id

    @property
    def resource_uri(self):
        """Gets the resource_uri of this NnwdafEventsSubscriptionNotification.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :return: The resource_uri of this NnwdafEventsSubscriptionNotification.
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this NnwdafEventsSubscriptionNotification.

        String providing an URI formatted according to RFC 3986.  # noqa: E501

        :param resource_uri: The resource_uri of this NnwdafEventsSubscriptionNotification.
        :type resource_uri: str
        """

        self._resource_uri = resource_uri

    @property
    def term_cause(self):
        """Gets the term_cause of this NnwdafEventsSubscriptionNotification.


        :return: The term_cause of this NnwdafEventsSubscriptionNotification.
        :rtype: TermCause
        """
        return self._term_cause

    @term_cause.setter
    def term_cause(self, term_cause):
        """Sets the term_cause of this NnwdafEventsSubscriptionNotification.


        :param term_cause: The term_cause of this NnwdafEventsSubscriptionNotification.
        :type term_cause: TermCause
        """

        self._term_cause = term_cause
