# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.subscription_transfer_info import SubscriptionTransferInfo
from openapi_server import util

from openapi_server.models.subscription_transfer_info import SubscriptionTransferInfo  # noqa: E501

class AnalyticsSubscriptionsTransfer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subs_trans_infos=None):  # noqa: E501
        """AnalyticsSubscriptionsTransfer - a model defined in OpenAPI

        :param subs_trans_infos: The subs_trans_infos of this AnalyticsSubscriptionsTransfer.  # noqa: E501
        :type subs_trans_infos: List[SubscriptionTransferInfo]
        """
        self.openapi_types = {
            'subs_trans_infos': List[SubscriptionTransferInfo]
        }

        self.attribute_map = {
            'subs_trans_infos': 'subsTransInfos'
        }

        self._subs_trans_infos = subs_trans_infos

    @classmethod
    def from_dict(cls, dikt) -> 'AnalyticsSubscriptionsTransfer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AnalyticsSubscriptionsTransfer of this AnalyticsSubscriptionsTransfer.  # noqa: E501
        :rtype: AnalyticsSubscriptionsTransfer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subs_trans_infos(self):
        """Gets the subs_trans_infos of this AnalyticsSubscriptionsTransfer.


        :return: The subs_trans_infos of this AnalyticsSubscriptionsTransfer.
        :rtype: List[SubscriptionTransferInfo]
        """
        return self._subs_trans_infos

    @subs_trans_infos.setter
    def subs_trans_infos(self, subs_trans_infos):
        """Sets the subs_trans_infos of this AnalyticsSubscriptionsTransfer.


        :param subs_trans_infos: The subs_trans_infos of this AnalyticsSubscriptionsTransfer.
        :type subs_trans_infos: List[SubscriptionTransferInfo]
        """
        if subs_trans_infos is None:
            raise ValueError("Invalid value for `subs_trans_infos`, must not be `None`")  # noqa: E501
        if subs_trans_infos is not None and len(subs_trans_infos) < 1:
            raise ValueError("Invalid value for `subs_trans_infos`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._subs_trans_infos = subs_trans_infos
