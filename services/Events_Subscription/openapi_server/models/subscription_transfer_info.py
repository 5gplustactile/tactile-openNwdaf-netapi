# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.analytics_context_identifier import AnalyticsContextIdentifier
from openapi_server.models.model_info import ModelInfo
from openapi_server.models.nnwdaf_events_subscription import NnwdafEventsSubscription
from openapi_server.models.transfer_request_type import TransferRequestType
from openapi_server import util

from openapi_server.models.analytics_context_identifier import AnalyticsContextIdentifier  # noqa: E501
from openapi_server.models.model_info import ModelInfo  # noqa: E501
from openapi_server.models.nnwdaf_events_subscription import NnwdafEventsSubscription  # noqa: E501
from openapi_server.models.transfer_request_type import TransferRequestType  # noqa: E501

class SubscriptionTransferInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, trans_req_type=None, nwdaf_ev_sub=None, consumer_id=None, context_id=None, source_nf_ids=None, source_set_ids=None, model_info=None):  # noqa: E501
        """SubscriptionTransferInfo - a model defined in OpenAPI

        :param trans_req_type: The trans_req_type of this SubscriptionTransferInfo.  # noqa: E501
        :type trans_req_type: TransferRequestType
        :param nwdaf_ev_sub: The nwdaf_ev_sub of this SubscriptionTransferInfo.  # noqa: E501
        :type nwdaf_ev_sub: NnwdafEventsSubscription
        :param consumer_id: The consumer_id of this SubscriptionTransferInfo.  # noqa: E501
        :type consumer_id: str
        :param context_id: The context_id of this SubscriptionTransferInfo.  # noqa: E501
        :type context_id: AnalyticsContextIdentifier
        :param source_nf_ids: The source_nf_ids of this SubscriptionTransferInfo.  # noqa: E501
        :type source_nf_ids: List[str]
        :param source_set_ids: The source_set_ids of this SubscriptionTransferInfo.  # noqa: E501
        :type source_set_ids: List[str]
        :param model_info: The model_info of this SubscriptionTransferInfo.  # noqa: E501
        :type model_info: List[ModelInfo]
        """
        self.openapi_types = {
            'trans_req_type': TransferRequestType,
            'nwdaf_ev_sub': NnwdafEventsSubscription,
            'consumer_id': str,
            'context_id': AnalyticsContextIdentifier,
            'source_nf_ids': List[str],
            'source_set_ids': List[str],
            'model_info': List[ModelInfo]
        }

        self.attribute_map = {
            'trans_req_type': 'transReqType',
            'nwdaf_ev_sub': 'nwdafEvSub',
            'consumer_id': 'consumerId',
            'context_id': 'contextId',
            'source_nf_ids': 'sourceNfIds',
            'source_set_ids': 'sourceSetIds',
            'model_info': 'modelInfo'
        }

        self._trans_req_type = trans_req_type
        self._nwdaf_ev_sub = nwdaf_ev_sub
        self._consumer_id = consumer_id
        self._context_id = context_id
        self._source_nf_ids = source_nf_ids
        self._source_set_ids = source_set_ids
        self._model_info = model_info

    @classmethod
    def from_dict(cls, dikt) -> 'SubscriptionTransferInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SubscriptionTransferInfo of this SubscriptionTransferInfo.  # noqa: E501
        :rtype: SubscriptionTransferInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def trans_req_type(self):
        """Gets the trans_req_type of this SubscriptionTransferInfo.


        :return: The trans_req_type of this SubscriptionTransferInfo.
        :rtype: TransferRequestType
        """
        return self._trans_req_type

    @trans_req_type.setter
    def trans_req_type(self, trans_req_type):
        """Sets the trans_req_type of this SubscriptionTransferInfo.


        :param trans_req_type: The trans_req_type of this SubscriptionTransferInfo.
        :type trans_req_type: TransferRequestType
        """
        if trans_req_type is None:
            raise ValueError("Invalid value for `trans_req_type`, must not be `None`")  # noqa: E501

        self._trans_req_type = trans_req_type

    @property
    def nwdaf_ev_sub(self):
        """Gets the nwdaf_ev_sub of this SubscriptionTransferInfo.


        :return: The nwdaf_ev_sub of this SubscriptionTransferInfo.
        :rtype: NnwdafEventsSubscription
        """
        return self._nwdaf_ev_sub

    @nwdaf_ev_sub.setter
    def nwdaf_ev_sub(self, nwdaf_ev_sub):
        """Sets the nwdaf_ev_sub of this SubscriptionTransferInfo.


        :param nwdaf_ev_sub: The nwdaf_ev_sub of this SubscriptionTransferInfo.
        :type nwdaf_ev_sub: NnwdafEventsSubscription
        """
        if nwdaf_ev_sub is None:
            raise ValueError("Invalid value for `nwdaf_ev_sub`, must not be `None`")  # noqa: E501

        self._nwdaf_ev_sub = nwdaf_ev_sub

    @property
    def consumer_id(self):
        """Gets the consumer_id of this SubscriptionTransferInfo.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :return: The consumer_id of this SubscriptionTransferInfo.
        :rtype: str
        """
        return self._consumer_id

    @consumer_id.setter
    def consumer_id(self, consumer_id):
        """Sets the consumer_id of this SubscriptionTransferInfo.

        String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.    # noqa: E501

        :param consumer_id: The consumer_id of this SubscriptionTransferInfo.
        :type consumer_id: str
        """
        if consumer_id is None:
            raise ValueError("Invalid value for `consumer_id`, must not be `None`")  # noqa: E501

        self._consumer_id = consumer_id

    @property
    def context_id(self):
        """Gets the context_id of this SubscriptionTransferInfo.


        :return: The context_id of this SubscriptionTransferInfo.
        :rtype: AnalyticsContextIdentifier
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """Sets the context_id of this SubscriptionTransferInfo.


        :param context_id: The context_id of this SubscriptionTransferInfo.
        :type context_id: AnalyticsContextIdentifier
        """

        self._context_id = context_id

    @property
    def source_nf_ids(self):
        """Gets the source_nf_ids of this SubscriptionTransferInfo.


        :return: The source_nf_ids of this SubscriptionTransferInfo.
        :rtype: List[str]
        """
        return self._source_nf_ids

    @source_nf_ids.setter
    def source_nf_ids(self, source_nf_ids):
        """Sets the source_nf_ids of this SubscriptionTransferInfo.


        :param source_nf_ids: The source_nf_ids of this SubscriptionTransferInfo.
        :type source_nf_ids: List[str]
        """
        if source_nf_ids is not None and len(source_nf_ids) < 1:
            raise ValueError("Invalid value for `source_nf_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._source_nf_ids = source_nf_ids

    @property
    def source_set_ids(self):
        """Gets the source_set_ids of this SubscriptionTransferInfo.


        :return: The source_set_ids of this SubscriptionTransferInfo.
        :rtype: List[str]
        """
        return self._source_set_ids

    @source_set_ids.setter
    def source_set_ids(self, source_set_ids):
        """Sets the source_set_ids of this SubscriptionTransferInfo.


        :param source_set_ids: The source_set_ids of this SubscriptionTransferInfo.
        :type source_set_ids: List[str]
        """
        if source_set_ids is not None and len(source_set_ids) < 1:
            raise ValueError("Invalid value for `source_set_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._source_set_ids = source_set_ids

    @property
    def model_info(self):
        """Gets the model_info of this SubscriptionTransferInfo.


        :return: The model_info of this SubscriptionTransferInfo.
        :rtype: List[ModelInfo]
        """
        return self._model_info

    @model_info.setter
    def model_info(self, model_info):
        """Sets the model_info of this SubscriptionTransferInfo.


        :param model_info: The model_info of this SubscriptionTransferInfo.
        :type model_info: List[ModelInfo]
        """
        if model_info is not None and len(model_info) < 1:
            raise ValueError("Invalid value for `model_info`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._model_info = model_info
